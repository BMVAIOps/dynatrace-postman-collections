{
	"info": {
		"_postman_id": "af0ac22f-1fd4-4979-a087-1e591d51fc6c",
		"name": "Dynatrace Cluster API v1",
		"description": "Dynatrace Managed exposes cluster management functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters. \n\nTo authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:\n\n* 400 - Bad Request: Some request parameters are not correct. See response body for details.\n* 401 - Unauthorized: A valid authorization header is required but is missing.\n* 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid.\n* 404 - Not Found: Endpoint does not exist or some entities could not be found, e.g. User account.\n* 500 - Internal Server Error: See response body for details.\n* 556 - Upgrade in progress: Operation couldn't be performed during the upgrade.\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "backup",
			"item": [
				{
					"name": "config",
					"item": [
						{
							"name": "Return backup configuration overview",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/backup/config",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"backup",
										"config"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/backup/config",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"backup",
												"config"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"datacenter\": \"dc1\",\n \"enabled\": true,\n \"storagePath\": \"/efs/backup\",\n \"includeRumData\": true,\n \"includeTsMetricData\": true,\n \"bandwidthLimitMbits\": 240,\n \"cassandraScheduledTime\": 22,\n \"pauseBackups\": false\n}"
								}
							]
						},
						{
							"name": "Change backup configuration",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"includeRumData\": \"<boolean>\",\n    \"includeTsMetricData\": \"<boolean>\",\n    \"bandwidthLimitMbits\": \"<integer>\",\n    \"cassandraScheduledTime\": \"<integer>\",\n    \"pauseBackups\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/backup/config",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"backup",
										"config"
									]
								}
							},
							"response": [
								{
									"name": "Configuration change failed.",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"datacenter\": \"dc1\",\n    \"enabled\": true,\n    \"storagePath\": \"/efs/backup\",\n    \"includeRumData\": true,\n    \"includeTsMetricData\": true,\n    \"bandwidthLimitMbits\": 240,\n    \"cassandraScheduledTime\": 22,\n    \"pauseBackups\": false\n}"
										},
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/backup/config",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"backup",
												"config"
											]
										}
									},
									"code": 512,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"datacenter\": \"dc1\",\n    \"enabled\": true,\n    \"storagePath\": \"/efs/backup\",\n    \"includeRumData\": true,\n    \"includeTsMetricData\": true,\n    \"bandwidthLimitMbits\": 240,\n    \"cassandraScheduledTime\": 22,\n    \"pauseBackups\": false\n}"
										},
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/backup/config",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"backup",
												"config"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Check status of change backup configuration",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/backup/config/status?requestId=<string>",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"backup",
										"config",
										"status"
									],
									"query": [
										{
											"key": "requestId",
											"value": "<string>"
										}
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/backup/config/status?requestId=<string>",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"backup",
												"config",
												"status"
											],
											"query": [
												{
													"key": "requestId",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Request accepted. There will be an id in the response body to check status through the config/status endpoint.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/backup/config/status?requestId=<string>",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"backup",
												"config",
												"status"
											],
											"query": [
												{
													"key": "requestId",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Multi-Status (WebDAV) (RFC 4918)",
									"code": 207,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "There is no response for your request id, it might have been already removed from cache if request was made several hours ago. Please make sure that request id is correct and not empty.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/backup/config/status?requestId=<string>",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"backup",
												"config",
												"status"
											],
											"query": [
												{
													"key": "requestId",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Configuration change failed",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/backup/config/status?requestId=<string>",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"backup",
												"config",
												"status"
											],
											"query": [
												{
													"key": "requestId",
													"value": "<string>"
												}
											]
										}
									},
									"code": 512,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Check if given directory is valid for backup in the cluster",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/backup/clusterCheckDir?dir=<string>&datacenter=<string>",
							"protocol": "https",
							"host": [
								"{{DT_HOST}}"
							],
							"path": [
								"api",
								"v1.0",
								"onpremise",
								"backup",
								"clusterCheckDir"
							],
							"query": [
								{
									"key": "dir",
									"value": "<string>",
									"description": "Backup store directory path parameter. Missing or empty values will return a 'Bad Request'"
								},
								{
									"key": "datacenter",
									"value": "<string>",
									"description": "Datacenter where backup should be executed. Should be omitted for Single Datacenter Cluster"
								}
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/backup/clusterCheckDir?dir=<string>&datacenter=<string>",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"backup",
										"clusterCheckDir"
									],
									"query": [
										{
											"key": "dir",
											"value": "<string>"
										},
										{
											"key": "datacenter",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"storagePath\": \"Ut\",\n \"storageError\": \"aliquip\",\n \"inProgress\": false\n}"
						},
						{
							"name": "No directory information received for validation",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/backup/clusterCheckDir?dir=<string>&datacenter=<string>",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"backup",
										"clusterCheckDir"
									],
									"query": [
										{
											"key": "dir",
											"value": "<string>"
										},
										{
											"key": "datacenter",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "bootstrap Management",
			"item": [
				{
					"name": "files",
					"item": [
						{
							"name": "ag",
							"item": [
								{
									"name": "Get ActiveGate config properties",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/bootstrapManagement/files/ag/configProperties",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"bootstrapManagement",
												"files",
												"ag",
												"configProperties"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/bootstrapManagement/files/ag/configProperties",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"bootstrapManagement",
														"files",
														"ag",
														"configProperties"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"content\": [\n  \"consequat aute pariatur sed\",\n  \"amet commodo sit\"\n ]\n}"
										},
										{
											"name": "No 'config.properties' file available",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/bootstrapManagement/files/ag/configProperties",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"bootstrapManagement",
														"files",
														"ag",
														"configProperties"
													]
												}
											},
											"status": "Not Extended (RFC 2774)",
											"code": 510,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get ActiveGate secure config properties",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/bootstrapManagement/files/ag/secureConfigProperties",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"bootstrapManagement",
												"files",
												"ag",
												"secureConfigProperties"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/bootstrapManagement/files/ag/secureConfigProperties",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"bootstrapManagement",
														"files",
														"ag",
														"secureConfigProperties"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"content\": [\n  \"consequat aute pariatur sed\",\n  \"amet commodo sit\"\n ]\n}"
										},
										{
											"name": "No 'secure.config.properties' file available",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/bootstrapManagement/files/ag/secureConfigProperties",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"bootstrapManagement",
														"files",
														"ag",
														"secureConfigProperties"
													]
												}
											},
											"status": "Not Extended (RFC 2774)",
											"code": 510,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get secure config properties",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/bootstrapManagement/files/secureConfigProperties",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"bootstrapManagement",
										"files",
										"secureConfigProperties"
									]
								}
							},
							"response": [
								{
									"name": "No 'secure.config.properties' file available",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/bootstrapManagement/files/secureConfigProperties",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"bootstrapManagement",
												"files",
												"secureConfigProperties"
											]
										}
									},
									"status": "Not Extended (RFC 2774)",
									"code": 510,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/bootstrapManagement/files/secureConfigProperties",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"bootstrapManagement",
												"files",
												"secureConfigProperties"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  \"Lorem ess\",\n  \"incididunt\"\n ]\n}"
								}
							]
						},
						{
							"name": "Get runtime properties",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/bootstrapManagement/files/runtimeProperties",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"bootstrapManagement",
										"files",
										"runtimeProperties"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/bootstrapManagement/files/runtimeProperties",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"bootstrapManagement",
												"files",
												"runtimeProperties"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  \"consequat aute pariatur sed\",\n  \"amet commodo sit\"\n ]\n}"
								},
								{
									"name": "No 'runtime.properties' file available",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/bootstrapManagement/files/runtimeProperties",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"bootstrapManagement",
												"files",
												"runtimeProperties"
											]
										}
									},
									"status": "Not Extended (RFC 2774)",
									"code": 510,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get installer metadata",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/bootstrapManagement/files/installerMetadata",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"bootstrapManagement",
										"files",
										"installerMetadata"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/bootstrapManagement/files/installerMetadata",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"bootstrapManagement",
												"files",
												"installerMetadata"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"clusterBackupPath\": \"in enim consectetur\",\n \"elasticsearchBackupPath\": \"velit\"\n}"
								}
							]
						},
						{
							"name": "Get key store",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/bootstrapManagement/files/keyStore",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"bootstrapManagement",
										"files",
										"keyStore"
									]
								}
							},
							"response": [
								{
									"name": "No 'key store' file available",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/bootstrapManagement/files/keyStore",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"bootstrapManagement",
												"files",
												"keyStore"
											]
										}
									},
									"status": "Not Extended (RFC 2774)",
									"code": 510,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/bootstrapManagement/files/keyStore",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"bootstrapManagement",
												"files",
												"keyStore"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  \"consequat aute pariatur sed\",\n  \"amet commodo sit\"\n ]\n}"
								}
							]
						},
						{
							"name": "Get config properties",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/bootstrapManagement/files/configProperties",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"bootstrapManagement",
										"files",
										"configProperties"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/bootstrapManagement/files/configProperties",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"bootstrapManagement",
												"files",
												"configProperties"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  \"consequat aute pariatur sed\",\n  \"amet commodo sit\"\n ]\n}"
								},
								{
									"name": "No 'config.properties' file available",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/bootstrapManagement/files/configProperties",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"bootstrapManagement",
												"files",
												"configProperties"
											]
										}
									},
									"status": "Not Extended (RFC 2774)",
									"code": 510,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get new node id",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/bootstrapManagement/newNodeId",
							"protocol": "https",
							"host": [
								"{{DT_HOST}}"
							],
							"path": [
								"api",
								"v1.0",
								"onpremise",
								"bootstrapManagement",
								"newNodeId"
							]
						}
					},
					"response": [
						{
							"name": "Failed to generate new node Id",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/bootstrapManagement/newNodeId",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"bootstrapManagement",
										"newNodeId"
									]
								}
							},
							"status": "Not Extended (RFC 2774)",
							"code": 510,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/bootstrapManagement/newNodeId",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"bootstrapManagement",
										"newNodeId"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"content\": [\n  \"consequat aute pariatur sed\",\n  \"amet commodo sit\"\n ]\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "endpoint",
			"item": [
				{
					"name": "web Ui Address",
					"item": [
						{
							"name": "Get WebUi address",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/endpoint/webUiAddress",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"endpoint",
										"webUiAddress"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/endpoint/webUiAddress",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"endpoint",
												"webUiAddress"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"address\": \"incididunt anim id cupidatat consequat\",\n \"newAddress\": \"in id\",\n \"usePublicIpForDomainGeneration\": true,\n \"usePublicIpForAgents\": false\n}"
								}
							]
						},
						{
							"name": "Update WebUi address",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"address\": \"<string>\",\n    \"newAddress\": \"<string>\",\n    \"usePublicIpForDomainGeneration\": \"<boolean>\",\n    \"usePublicIpForAgents\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/endpoint/webUiAddress",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"endpoint",
										"webUiAddress"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"address\": \"<string>\",\n    \"newAddress\": \"<string>\",\n    \"usePublicIpForDomainGeneration\": \"<boolean>\",\n    \"usePublicIpForAgents\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/endpoint/webUiAddress",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"endpoint",
												"webUiAddress"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"address\": \"<string>\",\n \"newAddress\": \"<string>\",\n \"usePublicIpForDomainGeneration\": \"<boolean>\",\n \"usePublicIpForAgents\": \"<boolean>\"\n}"
								},
								{
									"name": "Operation failed",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"address\": \"<string>\",\n    \"newAddress\": \"<string>\",\n    \"usePublicIpForDomainGeneration\": \"<boolean>\",\n    \"usePublicIpForAgents\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/endpoint/webUiAddress",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"endpoint",
												"webUiAddress"
											]
										}
									},
									"status": "Not Extended (RFC 2774)",
									"code": 510,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "cdn Address",
					"item": [
						{
							"name": "Get root CDN address",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/endpoint/cdnAddress",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"endpoint",
										"cdnAddress"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/endpoint/cdnAddress",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"endpoint",
												"cdnAddress"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"address\": \"<string>\",\n \"newAddress\": \"<string>\",\n \"usePublicIpForDomainGeneration\": \"<boolean>\",\n \"usePublicIpForAgents\": \"<boolean>\"\n}"
								}
							]
						},
						{
							"name": "Update root CDN address",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"address\": \"<string>\",\n    \"newAddress\": \"<string>\",\n    \"usePublicIpForDomainGeneration\": \"<boolean>\",\n    \"usePublicIpForAgents\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/endpoint/cdnAddress",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"endpoint",
										"cdnAddress"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"address\": \"<string>\",\n    \"newAddress\": \"<string>\",\n    \"usePublicIpForDomainGeneration\": \"<boolean>\",\n    \"usePublicIpForAgents\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/endpoint/cdnAddress",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"endpoint",
												"cdnAddress"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"address\": \"<string>\",\n \"newAddress\": \"<string>\",\n \"usePublicIpForDomainGeneration\": \"<boolean>\",\n \"usePublicIpForAgents\": \"<boolean>\"\n}"
								},
								{
									"name": "Operation failed",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"address\": \"<string>\",\n    \"newAddress\": \"<string>\",\n    \"usePublicIpForDomainGeneration\": \"<boolean>\",\n    \"usePublicIpForAgents\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/endpoint/cdnAddress",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"endpoint",
												"cdnAddress"
											]
										}
									},
									"status": "Not Extended (RFC 2774)",
									"code": 510,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "beacon Forwarder Address",
					"item": [
						{
							"name": "Get beacon forwarder address",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/endpoint/beaconForwarderAddress",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"endpoint",
										"beaconForwarderAddress"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/endpoint/beaconForwarderAddress",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"endpoint",
												"beaconForwarderAddress"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"address\": \"<string>\",\n \"newAddress\": \"<string>\",\n \"usePublicIpForDomainGeneration\": \"<boolean>\",\n \"usePublicIpForAgents\": \"<boolean>\"\n}"
								}
							]
						},
						{
							"name": "Update beacon forwarder address",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"address\": \"<string>\",\n    \"newAddress\": \"<string>\",\n    \"usePublicIpForDomainGeneration\": \"<boolean>\",\n    \"usePublicIpForAgents\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/endpoint/beaconForwarderAddress",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"endpoint",
										"beaconForwarderAddress"
									]
								}
							},
							"response": [
								{
									"name": "Operation failed",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"address\": \"<string>\",\n    \"newAddress\": \"<string>\",\n    \"usePublicIpForDomainGeneration\": \"<boolean>\",\n    \"usePublicIpForAgents\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/endpoint/beaconForwarderAddress",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"endpoint",
												"beaconForwarderAddress"
											]
										}
									},
									"status": "Not Extended (RFC 2774)",
									"code": 510,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"address\": \"<string>\",\n    \"newAddress\": \"<string>\",\n    \"usePublicIpForDomainGeneration\": \"<boolean>\",\n    \"usePublicIpForAgents\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/endpoint/beaconForwarderAddress",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"endpoint",
												"beaconForwarderAddress"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"address\": \"<string>\",\n \"newAddress\": \"<string>\",\n \"usePublicIpForDomainGeneration\": \"<boolean>\",\n \"usePublicIpForAgents\": \"<boolean>\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "public Ip",
					"item": [
						{
							"name": "domain/{node Id}",
							"item": [
								{
									"name": "Get node IP for domain",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/endpoint/publicIp/domain/:nodeId",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"endpoint",
												"publicIp",
												"domain",
												":nodeId"
											],
											"variable": [
												{
													"key": "nodeId",
													"value": "<integer>",
													"description": "(Required) Node ID"
												}
											]
										}
									},
									"response": [
										{
											"name": "Node not found by id",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/endpoint/publicIp/domain/:nodeId",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"endpoint",
														"publicIp",
														"domain",
														":nodeId"
													],
													"variable": [
														{
															"key": "nodeId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/endpoint/publicIp/domain/:nodeId",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"endpoint",
														"publicIp",
														"domain",
														":nodeId"
													],
													"variable": [
														{
															"key": "nodeId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"address\": \"<string>\",\n \"newAddress\": \"<string>\",\n \"usePublicIpForDomainGeneration\": \"<boolean>\",\n \"usePublicIpForAgents\": \"<boolean>\"\n}"
										}
									]
								},
								{
									"name": "Store node IP for domain",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\"<string>\""
										},
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/endpoint/publicIp/domain/:nodeId",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"endpoint",
												"publicIp",
												"domain",
												":nodeId"
											],
											"variable": [
												{
													"key": "nodeId",
													"value": "<integer>",
													"description": "(Required) Node ID"
												}
											]
										}
									},
									"response": [
										{
											"name": "Operation failed",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "\"<string>\""
												},
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/endpoint/publicIp/domain/:nodeId",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"endpoint",
														"publicIp",
														"domain",
														":nodeId"
													],
													"variable": [
														{
															"key": "nodeId"
														}
													]
												}
											},
											"status": "Not Extended (RFC 2774)",
											"code": 510,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "\"<string>\""
												},
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/endpoint/publicIp/domain/:nodeId",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"endpoint",
														"publicIp",
														"domain",
														":nodeId"
													],
													"variable": [
														{
															"key": "nodeId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"address\": \"<string>\",\n \"newAddress\": \"<string>\",\n \"usePublicIpForDomainGeneration\": \"<boolean>\",\n \"usePublicIpForAgents\": \"<boolean>\"\n}"
										},
										{
											"name": "Invalid IP address",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "\"<string>\""
												},
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/endpoint/publicIp/domain/:nodeId",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"endpoint",
														"publicIp",
														"domain",
														":nodeId"
													],
													"variable": [
														{
															"key": "nodeId"
														}
													]
												}
											},
											"code": 550,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Storing IP failed",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "\"<string>\""
												},
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/endpoint/publicIp/domain/:nodeId",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"endpoint",
														"publicIp",
														"domain",
														":nodeId"
													],
													"variable": [
														{
															"key": "nodeId"
														}
													]
												}
											},
											"code": 551,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "agents/{node Id}",
							"item": [
								{
									"name": "Get node IP for OneAgents",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/endpoint/publicIp/agents/:nodeId",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"endpoint",
												"publicIp",
												"agents",
												":nodeId"
											],
											"variable": [
												{
													"key": "nodeId",
													"value": "<integer>",
													"description": "(Required) Node ID"
												}
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/endpoint/publicIp/agents/:nodeId",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"endpoint",
														"publicIp",
														"agents",
														":nodeId"
													],
													"variable": [
														{
															"key": "nodeId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"address\": \"<string>\",\n \"newAddress\": \"<string>\",\n \"usePublicIpForDomainGeneration\": \"<boolean>\",\n \"usePublicIpForAgents\": \"<boolean>\"\n}"
										},
										{
											"name": "Invalid address",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/endpoint/publicIp/agents/:nodeId",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"endpoint",
														"publicIp",
														"agents",
														":nodeId"
													],
													"variable": [
														{
															"key": "nodeId"
														}
													]
												}
											},
											"code": 550,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Timeout",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/endpoint/publicIp/agents/:nodeId",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"endpoint",
														"publicIp",
														"agents",
														":nodeId"
													],
													"variable": [
														{
															"key": "nodeId"
														}
													]
												}
											},
											"code": 544,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Collector not found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/endpoint/publicIp/agents/:nodeId",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"endpoint",
														"publicIp",
														"agents",
														":nodeId"
													],
													"variable": [
														{
															"key": "nodeId"
														}
													]
												}
											},
											"code": 552,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Store node IP for OneAgents",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\"<string>\""
										},
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/endpoint/publicIp/agents/:nodeId",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"endpoint",
												"publicIp",
												"agents",
												":nodeId"
											],
											"variable": [
												{
													"key": "nodeId",
													"value": "<integer>",
													"description": "(Required) Node ID"
												}
											]
										}
									},
									"response": [
										{
											"name": "Invalid IP address",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "\"<string>\""
												},
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/endpoint/publicIp/agents/:nodeId",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"endpoint",
														"publicIp",
														"agents",
														":nodeId"
													],
													"variable": [
														{
															"key": "nodeId"
														}
													]
												}
											},
											"code": 550,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Storing configuration failed",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "\"<string>\""
												},
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/endpoint/publicIp/agents/:nodeId",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"endpoint",
														"publicIp",
														"agents",
														":nodeId"
													],
													"variable": [
														{
															"key": "nodeId"
														}
													]
												}
											},
											"code": 540,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Collector not found",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "\"<string>\""
												},
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/endpoint/publicIp/agents/:nodeId",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"endpoint",
														"publicIp",
														"agents",
														":nodeId"
													],
													"variable": [
														{
															"key": "nodeId"
														}
													]
												}
											},
											"code": 552,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "\"<string>\""
												},
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/endpoint/publicIp/agents/:nodeId",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"endpoint",
														"publicIp",
														"agents",
														":nodeId"
													],
													"variable": [
														{
															"key": "nodeId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Operation failed",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "\"<string>\""
												},
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/endpoint/publicIp/agents/:nodeId",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"endpoint",
														"publicIp",
														"agents",
														":nodeId"
													],
													"variable": [
														{
															"key": "nodeId"
														}
													]
												}
											},
											"status": "Not Extended (RFC 2774)",
											"code": 510,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "cluster",
			"item": [
				{
					"name": "configuration",
					"item": [
						{
							"name": "status",
							"item": [
								{
									"name": "Get cluster nodes configuration current status",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/cluster/configuration/status",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"cluster",
												"configuration",
												"status"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/cluster/configuration/status",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"cluster",
														"configuration",
														"status"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get cluster nodes configuration request status",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/cluster/configuration/status/:requestedAt",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"cluster",
												"configuration",
												"status",
												":requestedAt"
											],
											"variable": [
												{
													"key": "requestedAt",
													"value": "<long>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/cluster/configuration/status/:requestedAt",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"cluster",
														"configuration",
														"status",
														":requestedAt"
													],
													"variable": [
														{
															"key": "requestedAt"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cluster nodes configuration",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/cluster/configuration",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"cluster",
										"configuration"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/cluster/configuration",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"cluster",
												"configuration"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Configure cluster nodes responsibilities",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"clusterNodes\": [\n        {\n            \"id\": \"<integer>\",\n            \"webUI\": \"<boolean>\",\n            \"agent\": \"<boolean>\",\n            \"datacenter\": \"<string>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"webUI\": \"<boolean>\",\n            \"agent\": \"<boolean>\",\n            \"datacenter\": \"<string>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/cluster/configuration",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"cluster",
										"configuration"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"clusterNodes\": [\n        {\n            \"id\": \"<integer>\",\n            \"webUI\": \"<boolean>\",\n            \"agent\": \"<boolean>\",\n            \"datacenter\": \"<string>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"webUI\": \"<boolean>\",\n            \"agent\": \"<boolean>\",\n            \"datacenter\": \"<string>\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/cluster/configuration",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"cluster",
												"configuration"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get information about known servers",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/cluster",
							"protocol": "https",
							"host": [
								"{{DT_HOST}}"
							],
							"path": [
								"api",
								"v1.0",
								"onpremise",
								"cluster"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/cluster",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"cluster"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"id\": 47876648,\n  \"clusterMemberAddress\": \"incididunt aute\",\n  \"operationState\": \"do amet eiusmod nostrud\",\n  \"buildVersion\": \"non\",\n  \"osInfo\": \"Ut Excepteur voluptate dolore veniam\",\n  \"jvmInfo\": \"dolor consequat incididunt ex ea\",\n  \"dnsEntryPointUris\": [\n   \"ipsum amet do\",\n   \"est nisi irure\"\n  ],\n  \"restServiceRootUris\": [\n   \"sunt\",\n   \"deserunt in\"\n  ],\n  \"communicationUris\": [\n   \"irure labore dolore cupidatat\",\n   \"elit reprehenderit\"\n  ]\n },\n {\n  \"id\": -68937961,\n  \"clusterMemberAddress\": \"ipsum Ut est eiusmod\",\n  \"operationState\": \"labore in consectetur\",\n  \"buildVersion\": \"irure f\",\n  \"osInfo\": \"laboris Duis officia Excepteur est\",\n  \"jvmInfo\": \"magna dolor\",\n  \"dnsEntryPointUris\": [\n   \"in officia do\",\n   \"eiusmod proident\"\n  ],\n  \"restServiceRootUris\": [\n   \"dolore exercitation tempor\",\n   \"laborum ea in\"\n  ],\n  \"communicationUris\": [\n   \"sunt esse in\",\n   \"aliquip consequat\"\n  ]\n }\n]"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "multi Dc",
			"item": [
				{
					"name": "migration",
					"item": [
						{
							"name": "cluster State",
							"item": [
								{
									"name": "{sub Step}",
									"item": [
										{
											"name": "Get sub step of migration from single to multi datacenter cluster | maturity=EARLY_ADOPTER",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/clusterState/:subStep",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"clusterState",
														":subStep"
													],
													"variable": [
														{
															"key": "subStep",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Successful",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/clusterState/:subStep",
															"protocol": "https",
															"host": [
																"{{DT_HOST}}"
															],
															"path": [
																"api",
																"v1.0",
																"onpremise",
																"multiDc",
																"migration",
																"clusterState",
																":subStep"
															],
															"variable": [
																{
																	"key": "subStep"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"SUCCEEDED\",\n \"startedAt\": -61308038,\n \"finishedAt\": -7936288,\n \"details\": \"qui reprehenderit id amet\"\n}"
												}
											]
										},
										{
											"name": "Modify sub step of migration from single to multi datacenter cluster | maturity=EARLY_ADOPTER",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/clusterState/:subStep?status=<string>&details=<string>",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"clusterState",
														":subStep"
													],
													"query": [
														{
															"key": "status",
															"value": "<string>"
														},
														{
															"key": "details",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "subStep",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "No Content",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/clusterState/:subStep?status=<string>&details=<string>",
															"protocol": "https",
															"host": [
																"{{DT_HOST}}"
															],
															"path": [
																"api",
																"v1.0",
																"onpremise",
																"multiDc",
																"migration",
																"clusterState",
																":subStep"
															],
															"query": [
																{
																	"key": "status",
																	"value": "<string>"
																},
																{
																	"key": "details",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "subStep"
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Get cluster state of migration from single to multi datacenter cluster and its sub steps | maturity=EARLY_ADOPTER",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/clusterState",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"multiDc",
												"migration",
												"clusterState"
											]
										}
									},
									"response": [
										{
											"name": "Successful",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/clusterState",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"clusterState"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"singleToMultiDcMigration\": {\n  \"status\": \"SUCCEEDED\",\n  \"startedAt\": -63877594,\n  \"finishedAt\": -63734767,\n  \"details\": \"aliquip nulla laborum ullamco\"\n },\n \"migrationSteps\": \"Duis incididunt aliquip mollit\"\n}"
										}
									]
								},
								{
									"name": "Modify the overall cluster state of migration from single to multi datacenter cluster | maturity=EARLY_ADOPTER",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/clusterState?status=<string>&details=",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"multiDc",
												"migration",
												"clusterState"
											],
											"query": [
												{
													"key": "status",
													"value": "<string>"
												},
												{
													"key": "details",
													"value": ""
												}
											]
										}
									},
									"response": [
										{
											"name": "No Content",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/clusterState?status=<string>&details=",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"clusterState"
													],
													"query": [
														{
															"key": "status",
															"value": "<string>"
														},
														{
															"key": "details",
															"value": ""
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "datacenter Topology",
							"item": [
								{
									"name": "Get cluster topology draft | maturity=EARLY_ADOPTER",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/datacenterTopology",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"multiDc",
												"migration",
												"datacenterTopology"
											]
										}
									},
									"response": [
										{
											"name": "Successful",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/datacenterTopology",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"datacenterTopology"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"datacenterTopology\": \"ipsum deserunt\",\n \"oldDatacenterName\": \"ad veniam\",\n \"newDatacenterName\": \"\"\n}"
										}
									]
								},
								{
									"name": "Create cluster topology draft | maturity=EARLY_ADOPTER",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "*/*"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"newDatacenterName\": \"<string>\",\n    \"nodesIp\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
										},
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/datacenterTopology",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"multiDc",
												"migration",
												"datacenterTopology"
											]
										}
									},
									"response": [
										{
											"name": "Successful",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"newDatacenterName\": \"<string>\",\n    \"nodesIp\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
												},
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/datacenterTopology",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"datacenterTopology"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Invalid datacenter migration draft",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"newDatacenterName\": \"<string>\",\n    \"nodesIp\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
												},
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/datacenterTopology",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"datacenterTopology"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete cluster topology draft | maturity=EARLY_ADOPTER",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/datacenterTopology",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"multiDc",
												"migration",
												"datacenterTopology"
											]
										}
									},
									"response": [
										{
											"name": "Successful",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/datacenterTopology",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"datacenterTopology"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "cluster Nodes/current Dc",
							"item": [
								{
									"name": "Start cluster topology configuration - open firewall ports | maturity=EARLY_ADOPTER",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/clusterNodes/currentDc",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"multiDc",
												"migration",
												"clusterNodes",
												"currentDc"
											]
										}
									},
									"response": [
										{
											"name": "Successful",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/clusterNodes/currentDc",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"clusterNodes",
														"currentDc"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Request is incorrect please validate your path and arguments.",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/clusterNodes/currentDc",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"clusterNodes",
														"currentDc"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "There was problem in your request. Please check body or logs for more details.",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/clusterNodes/currentDc",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"clusterNodes",
														"currentDc"
													]
												}
											},
											"code": 512,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unexpected problem in server.",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/clusterNodes/currentDc",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"clusterNodes",
														"currentDc"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get topology configuration status | maturity=EARLY_ADOPTER",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/clusterNodes/currentDc/:requestId",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"multiDc",
												"migration",
												"clusterNodes",
												"currentDc",
												":requestId"
											],
											"variable": [
												{
													"key": "requestId",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Your request is still progressed.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/clusterNodes/currentDc/:requestId",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"clusterNodes",
														"currentDc",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"status": "Multi-Status (WebDAV) (RFC 4918)",
											"code": 207,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Successful",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/clusterNodes/currentDc/:requestId",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"clusterNodes",
														"currentDc",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unexpected problem in server.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/clusterNodes/currentDc/:requestId",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"clusterNodes",
														"currentDc",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "There was problem in your request. Please check body or logs for more details.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/clusterNodes/currentDc/:requestId",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"clusterNodes",
														"currentDc",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"code": 512,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "There is no response for your request id. Please make sure that request id is correct and retry. You may get this error when components are restarting or this request is already removed from cache",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/clusterNodes/currentDc/:requestId",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"clusterNodes",
														"currentDc",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Request is incorrect please validate your path and arguments.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/clusterNodes/currentDc/:requestId",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"clusterNodes",
														"currentDc",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "cassandra",
							"item": [
								{
									"name": "current Dc",
									"item": [
										{
											"name": "Start cassandra migration in current datacenter | maturity=EARLY_ADOPTER",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/cassandra/currentDc",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"cassandra",
														"currentDc"
													]
												}
											},
											"response": [
												{
													"name": "Unexpected problem in server.",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/cassandra/currentDc",
															"protocol": "https",
															"host": [
																"{{DT_HOST}}"
															],
															"path": [
																"api",
																"v1.0",
																"onpremise",
																"multiDc",
																"migration",
																"cassandra",
																"currentDc"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Request is incorrect please validate your path and arguments.",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/cassandra/currentDc",
															"protocol": "https",
															"host": [
																"{{DT_HOST}}"
															],
															"path": [
																"api",
																"v1.0",
																"onpremise",
																"multiDc",
																"migration",
																"cassandra",
																"currentDc"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "There was problem in your request. Please check body or logs for more details.",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/cassandra/currentDc",
															"protocol": "https",
															"host": [
																"{{DT_HOST}}"
															],
															"path": [
																"api",
																"v1.0",
																"onpremise",
																"multiDc",
																"migration",
																"cassandra",
																"currentDc"
															]
														}
													},
													"code": 512,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/cassandra/currentDc",
															"protocol": "https",
															"host": [
																"{{DT_HOST}}"
															],
															"path": [
																"api",
																"v1.0",
																"onpremise",
																"multiDc",
																"migration",
																"cassandra",
																"currentDc"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get cassandra migration status in current datacenter | maturity=EARLY_ADOPTER",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/cassandra/currentDc/:requestId",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"cassandra",
														"currentDc",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "There is no response for your request id. Please make sure that request id is correct and retry. You may get this error when components are restarting or this request is already removed from cache",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/cassandra/currentDc/:requestId",
															"protocol": "https",
															"host": [
																"{{DT_HOST}}"
															],
															"path": [
																"api",
																"v1.0",
																"onpremise",
																"multiDc",
																"migration",
																"cassandra",
																"currentDc",
																":requestId"
															],
															"variable": [
																{
																	"key": "requestId"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Unexpected problem in server.",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/cassandra/currentDc/:requestId",
															"protocol": "https",
															"host": [
																"{{DT_HOST}}"
															],
															"path": [
																"api",
																"v1.0",
																"onpremise",
																"multiDc",
																"migration",
																"cassandra",
																"currentDc",
																":requestId"
															],
															"variable": [
																{
																	"key": "requestId"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/cassandra/currentDc/:requestId",
															"protocol": "https",
															"host": [
																"{{DT_HOST}}"
															],
															"path": [
																"api",
																"v1.0",
																"onpremise",
																"multiDc",
																"migration",
																"cassandra",
																"currentDc",
																":requestId"
															],
															"variable": [
																{
																	"key": "requestId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "There was problem in your request. Please check body or logs for more details.",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/cassandra/currentDc/:requestId",
															"protocol": "https",
															"host": [
																"{{DT_HOST}}"
															],
															"path": [
																"api",
																"v1.0",
																"onpremise",
																"multiDc",
																"migration",
																"cassandra",
																"currentDc",
																":requestId"
															],
															"variable": [
																{
																	"key": "requestId"
																}
															]
														}
													},
													"code": 512,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Your request is still progressed.",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/cassandra/currentDc/:requestId",
															"protocol": "https",
															"host": [
																"{{DT_HOST}}"
															],
															"path": [
																"api",
																"v1.0",
																"onpremise",
																"multiDc",
																"migration",
																"cassandra",
																"currentDc",
																":requestId"
															],
															"variable": [
																{
																	"key": "requestId"
																}
															]
														}
													},
													"status": "Multi-Status (WebDAV) (RFC 4918)",
													"code": 207,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Request is incorrect please validate your path and arguments.",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/cassandra/currentDc/:requestId",
															"protocol": "https",
															"host": [
																"{{DT_HOST}}"
															],
															"path": [
																"api",
																"v1.0",
																"onpremise",
																"multiDc",
																"migration",
																"cassandra",
																"currentDc",
																":requestId"
															],
															"variable": [
																{
																	"key": "requestId"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "new Dc",
									"item": [
										{
											"name": "Start cassandra migration in new datacenter | maturity=EARLY_ADOPTER",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/cassandra/newDc",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"cassandra",
														"newDc"
													]
												}
											},
											"response": [
												{
													"name": "There was problem in your request. Please check body or logs for more details.",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/cassandra/newDc",
															"protocol": "https",
															"host": [
																"{{DT_HOST}}"
															],
															"path": [
																"api",
																"v1.0",
																"onpremise",
																"multiDc",
																"migration",
																"cassandra",
																"newDc"
															]
														}
													},
													"code": 512,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Request is incorrect please validate your path and arguments.",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/cassandra/newDc",
															"protocol": "https",
															"host": [
																"{{DT_HOST}}"
															],
															"path": [
																"api",
																"v1.0",
																"onpremise",
																"multiDc",
																"migration",
																"cassandra",
																"newDc"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Unexpected problem in server.",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/cassandra/newDc",
															"protocol": "https",
															"host": [
																"{{DT_HOST}}"
															],
															"path": [
																"api",
																"v1.0",
																"onpremise",
																"multiDc",
																"migration",
																"cassandra",
																"newDc"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/cassandra/newDc",
															"protocol": "https",
															"host": [
																"{{DT_HOST}}"
															],
															"path": [
																"api",
																"v1.0",
																"onpremise",
																"multiDc",
																"migration",
																"cassandra",
																"newDc"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get cassandra migration status in new datacenter | maturity=EARLY_ADOPTER",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/cassandra/newDc/:requestId",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"cassandra",
														"newDc",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "There was problem in your request. Please check body or logs for more details.",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/cassandra/newDc/:requestId",
															"protocol": "https",
															"host": [
																"{{DT_HOST}}"
															],
															"path": [
																"api",
																"v1.0",
																"onpremise",
																"multiDc",
																"migration",
																"cassandra",
																"newDc",
																":requestId"
															],
															"variable": [
																{
																	"key": "requestId"
																}
															]
														}
													},
													"code": 512,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/cassandra/newDc/:requestId",
															"protocol": "https",
															"host": [
																"{{DT_HOST}}"
															],
															"path": [
																"api",
																"v1.0",
																"onpremise",
																"multiDc",
																"migration",
																"cassandra",
																"newDc",
																":requestId"
															],
															"variable": [
																{
																	"key": "requestId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "There is no response for your request id. Please make sure that request id is correct and retry. You may get this error when components are restarting or this request is already removed from cache",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/cassandra/newDc/:requestId",
															"protocol": "https",
															"host": [
																"{{DT_HOST}}"
															],
															"path": [
																"api",
																"v1.0",
																"onpremise",
																"multiDc",
																"migration",
																"cassandra",
																"newDc",
																":requestId"
															],
															"variable": [
																{
																	"key": "requestId"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Your request is still progressed.",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/cassandra/newDc/:requestId",
															"protocol": "https",
															"host": [
																"{{DT_HOST}}"
															],
															"path": [
																"api",
																"v1.0",
																"onpremise",
																"multiDc",
																"migration",
																"cassandra",
																"newDc",
																":requestId"
															],
															"variable": [
																{
																	"key": "requestId"
																}
															]
														}
													},
													"status": "Multi-Status (WebDAV) (RFC 4918)",
													"code": 207,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Request is incorrect please validate your path and arguments.",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/cassandra/newDc/:requestId",
															"protocol": "https",
															"host": [
																"{{DT_HOST}}"
															],
															"path": [
																"api",
																"v1.0",
																"onpremise",
																"multiDc",
																"migration",
																"cassandra",
																"newDc",
																":requestId"
															],
															"variable": [
																{
																	"key": "requestId"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Unexpected problem in server.",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/cassandra/newDc/:requestId",
															"protocol": "https",
															"host": [
																"{{DT_HOST}}"
															],
															"path": [
																"api",
																"v1.0",
																"onpremise",
																"multiDc",
																"migration",
																"cassandra",
																"newDc",
																":requestId"
															],
															"variable": [
																{
																	"key": "requestId"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Verify cassandra rebuild status | maturity=EARLY_ADOPTER",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/cassandra/rebuildStatus",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"multiDc",
												"migration",
												"cassandra",
												"rebuildStatus"
											]
										}
									},
									"response": [
										{
											"name": "Successful",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/cassandra/rebuildStatus",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"cassandra",
														"rebuildStatus"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "There was problem in your request. Please check body or logs for more details.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/cassandra/rebuildStatus",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"cassandra",
														"rebuildStatus"
													]
												}
											},
											"code": 512,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Request is incorrect please validate your path and arguments.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/cassandra/rebuildStatus",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"cassandra",
														"rebuildStatus"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unexpected problem in server.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/cassandra/rebuildStatus",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"cassandra",
														"rebuildStatus"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "elasticsearch",
							"item": [
								{
									"name": "Start elasticsearch migration | maturity=EARLY_ADOPTER",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/elasticsearch",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"multiDc",
												"migration",
												"elasticsearch"
											]
										}
									},
									"response": [
										{
											"name": "Request is incorrect please validate your path and arguments.",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/elasticsearch",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"elasticsearch"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unexpected problem in server.",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/elasticsearch",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"elasticsearch"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Successful",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/elasticsearch",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"elasticsearch"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "There was problem in your request. Please check body or logs for more details.",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/elasticsearch",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"elasticsearch"
													]
												}
											},
											"code": 512,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get elasticsearch migration status | maturity=EARLY_ADOPTER",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/elasticsearch/:requestId",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"multiDc",
												"migration",
												"elasticsearch",
												":requestId"
											],
											"variable": [
												{
													"key": "requestId",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Your request is still progressed.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/elasticsearch/:requestId",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"elasticsearch",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"status": "Multi-Status (WebDAV) (RFC 4918)",
											"code": 207,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unexpected problem in server.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/elasticsearch/:requestId",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"elasticsearch",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Request is incorrect please validate your path and arguments.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/elasticsearch/:requestId",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"elasticsearch",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "There is no response for your request id. Please make sure that request id is correct and retry. You may get this error when components are restarting or this request is already removed from cache",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/elasticsearch/:requestId",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"elasticsearch",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "There was problem in your request. Please check body or logs for more details.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/elasticsearch/:requestId",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"elasticsearch",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"code": 512,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Successful",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/elasticsearch/:requestId",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"elasticsearch",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Verify elasticsearch migration status | maturity=EARLY_ADOPTER",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/elasticsearch/indexMigrationStatus",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"multiDc",
												"migration",
												"elasticsearch",
												"indexMigrationStatus"
											]
										}
									},
									"response": [
										{
											"name": "There was problem in your request. Please check body or logs for more details.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/elasticsearch/indexMigrationStatus",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"elasticsearch",
														"indexMigrationStatus"
													]
												}
											},
											"code": 512,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unexpected problem in server.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/elasticsearch/indexMigrationStatus",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"elasticsearch",
														"indexMigrationStatus"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Request is incorrect please validate your path and arguments.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/elasticsearch/indexMigrationStatus",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"elasticsearch",
														"indexMigrationStatus"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Successful",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/elasticsearch/indexMigrationStatus",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"elasticsearch",
														"indexMigrationStatus"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "server",
							"item": [
								{
									"name": "Start server migration in current datacenter | maturity=EARLY_ADOPTER",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/server",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"multiDc",
												"migration",
												"server"
											]
										}
									},
									"response": [
										{
											"name": "There was problem in your request. Please check body or logs for more details.",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/server",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"server"
													]
												}
											},
											"code": 512,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Successful",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/server",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"server"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unexpected problem in server.",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/server",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"server"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Request is incorrect please validate your path and arguments.",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/server",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"server"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get server migration status | maturity=EARLY_ADOPTER",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/server/:requestId",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"multiDc",
												"migration",
												"server",
												":requestId"
											],
											"variable": [
												{
													"key": "requestId",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "There is no response for your request id. Please make sure that request id is correct and retry. You may get this error when components are restarting or this request is already removed from cache",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/server/:requestId",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"server",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Your request is still progressed.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/server/:requestId",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"server",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"status": "Multi-Status (WebDAV) (RFC 4918)",
											"code": 207,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "There was problem in your request. Please check body or logs for more details.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/server/:requestId",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"server",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"code": 512,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Request is incorrect please validate your path and arguments.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/server/:requestId",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"server",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Successful",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/server/:requestId",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"server",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unexpected problem in server.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/server/:requestId",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"migration",
														"server",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get nodekeeper helathcheck | maturity=EARLY_ADOPTER",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/nodekeeper/healthCheck",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"multiDc",
										"migration",
										"nodekeeper",
										"healthCheck"
									]
								}
							},
							"response": [
								{
									"name": "There was problem in your request. Please check body or logs for more details.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/nodekeeper/healthCheck",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"multiDc",
												"migration",
												"nodekeeper",
												"healthCheck"
											]
										}
									},
									"code": 512,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Unexpected problem in server.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/nodekeeper/healthCheck",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"multiDc",
												"migration",
												"nodekeeper",
												"healthCheck"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Successful",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/nodekeeper/healthCheck",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"multiDc",
												"migration",
												"nodekeeper",
												"healthCheck"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Request is incorrect please validate your path and arguments.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/nodekeeper/healthCheck",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"multiDc",
												"migration",
												"nodekeeper",
												"healthCheck"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Clean up lost datacenter settings | maturity=EARLY_ADOPTER",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/lostDatacenterCleanUp",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"multiDc",
										"migration",
										"lostDatacenterCleanUp"
									]
								}
							},
							"response": [
								{
									"name": "Request is incorrect please validate your path and arguments.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/lostDatacenterCleanUp",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"multiDc",
												"migration",
												"lostDatacenterCleanUp"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "There was problem in your request. Please check body or logs for more details.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/lostDatacenterCleanUp",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"multiDc",
												"migration",
												"lostDatacenterCleanUp"
											]
										}
									},
									"code": 512,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Unexpected problem in server.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/lostDatacenterCleanUp",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"multiDc",
												"migration",
												"lostDatacenterCleanUp"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Successful",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/lostDatacenterCleanUp",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"multiDc",
												"migration",
												"lostDatacenterCleanUp"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Finish migration | maturity=EARLY_ADOPTER",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/finish",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"multiDc",
										"migration",
										"finish"
									]
								}
							},
							"response": [
								{
									"name": "Request is incorrect please validate your path and arguments.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/finish",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"multiDc",
												"migration",
												"finish"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Successful",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/finish",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"multiDc",
												"migration",
												"finish"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "There was problem in your request. Please check body or logs for more details.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/finish",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"multiDc",
												"migration",
												"finish"
											]
										}
									},
									"code": 512,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Unexpected problem in server.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/finish",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"multiDc",
												"migration",
												"finish"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get state of in-server config migration (from single to multi datacenter cluster) | maturity=EARLY_ADOPTER",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/inServerconfigState",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"multiDc",
										"migration",
										"inServerconfigState"
									]
								}
							},
							"response": [
								{
									"name": "Successful",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/migration/inServerconfigState",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"multiDc",
												"migration",
												"inServerconfigState"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"componentMigrationStates\": \"ullamco est sit\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "restore",
					"item": [
						{
							"name": "elasticsearch/recover",
							"item": [
								{
									"name": "Get status of disaster recovery. | maturity=EARLY_ADOPTER",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/restore/elasticsearch/recover",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"multiDc",
												"restore",
												"elasticsearch",
												"recover"
											]
										}
									},
									"response": [
										{
											"name": "Path not implemented.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/restore/elasticsearch/recover",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"restore",
														"elasticsearch",
														"recover"
													]
												}
											},
											"status": "Not Implemented",
											"code": 501,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "There is no response for your request id. Please make sure that request id is correct and retry. You may get this error when components are restarting or this request is already removed from cache",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/restore/elasticsearch/recover",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"restore",
														"elasticsearch",
														"recover"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Successful",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/restore/elasticsearch/recover",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"restore",
														"elasticsearch",
														"recover"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Your request is still progressed.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/restore/elasticsearch/recover",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"restore",
														"elasticsearch",
														"recover"
													]
												}
											},
											"status": "Multi-Status (WebDAV) (RFC 4918)",
											"code": 207,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Recover elasticsearch from a snapshot on one datacenter. | maturity=EARLY_ADOPTER",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/restore/elasticsearch/recover",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"multiDc",
												"restore",
												"elasticsearch",
												"recover"
											]
										}
									},
									"response": [
										{
											"name": "Path not implemented.",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/restore/elasticsearch/recover",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"restore",
														"elasticsearch",
														"recover"
													]
												}
											},
											"status": "Not Implemented",
											"code": 501,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Request is incorrect please validate your path and arguments.",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/restore/elasticsearch/recover",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"restore",
														"elasticsearch",
														"recover"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Successful",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/restore/elasticsearch/recover",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"restore",
														"elasticsearch",
														"recover"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "server/recovery",
							"item": [
								{
									"name": "Migrate servers and start components after disaster recovery | maturity=EARLY_ADOPTER",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/restore/server/recovery",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"multiDc",
												"restore",
												"server",
												"recovery"
											]
										}
									},
									"response": [
										{
											"name": "Request is incorrect please validate your path and arguments.",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/restore/server/recovery",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"restore",
														"server",
														"recovery"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Successful",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/restore/server/recovery",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"restore",
														"server",
														"recovery"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unexpected problem in server.",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/restore/server/recovery",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"restore",
														"server",
														"recovery"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "There was problem in your request. Please check body or logs for more details.",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/restore/server/recovery",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"restore",
														"server",
														"recovery"
													]
												}
											},
											"code": 512,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get status after server migration and start components in disaster recovery | maturity=EARLY_ADOPTER",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/restore/server/recovery/:requestId",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"multiDc",
												"restore",
												"server",
												"recovery",
												":requestId"
											],
											"variable": [
												{
													"key": "requestId",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Request is incorrect please validate your path and arguments.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/restore/server/recovery/:requestId",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"restore",
														"server",
														"recovery",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Your request is still progressed.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/restore/server/recovery/:requestId",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"restore",
														"server",
														"recovery",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"status": "Multi-Status (WebDAV) (RFC 4918)",
											"code": 207,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unexpected problem in server.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/restore/server/recovery/:requestId",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"restore",
														"server",
														"recovery",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Successful",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/restore/server/recovery/:requestId",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"restore",
														"server",
														"recovery",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "There is no response for your request id. Please make sure that request id is correct and retry. You may get this error when components are restarting or this request is already removed from cache",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/restore/server/recovery/:requestId",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"restore",
														"server",
														"recovery",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "There was problem in your request. Please check body or logs for more details.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/multiDc/restore/server/recovery/:requestId",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"multiDc",
														"restore",
														"server",
														"recovery",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"code": 512,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "firewall Management",
			"item": [
				{
					"name": "remove Cluster Node",
					"item": [
						{
							"name": "Remove cluster node",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ipAddress\": \"<string>\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/firewallManagement/removeClusterNode",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"firewallManagement",
										"removeClusterNode"
									]
								}
							},
							"response": [
								{
									"name": "Removal of node failed",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ipAddress\": \"<string>\"\n}"
										},
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/firewallManagement/removeClusterNode",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"firewallManagement",
												"removeClusterNode"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ipAddress\": \"<string>\"\n}"
										},
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/firewallManagement/removeClusterNode",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"firewallManagement",
												"removeClusterNode"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "remove Cluster Nodes Delete Method",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/firewallManagement/removeClusterNode/:ip?scope=<string>",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"firewallManagement",
										"removeClusterNode",
										":ip"
									],
									"query": [
										{
											"key": "scope",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "ip",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "default response",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/firewallManagement/removeClusterNode/:ip?scope=<string>",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"firewallManagement",
												"removeClusterNode",
												":ip"
											],
											"query": [
												{
													"key": "scope",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "ip"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "\"\""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get cluster nodes",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/firewallManagement/clusterNodes",
							"protocol": "https",
							"host": [
								"{{DT_HOST}}"
							],
							"path": [
								"api",
								"v1.0",
								"onpremise",
								"firewallManagement",
								"clusterNodes"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/firewallManagement/clusterNodes",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"firewallManagement",
										"clusterNodes"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"clusterNodes\": [\n  {\n   \"id\": \"<integer>\",\n   \"webUI\": \"<boolean>\",\n   \"agent\": \"<boolean>\",\n   \"datacenter\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"webUI\": \"<boolean>\",\n   \"agent\": \"<boolean>\",\n   \"datacenter\": \"<string>\"\n  }\n ]\n}"
						},
						{
							"name": "Operation failed",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/firewallManagement/clusterNodes",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"firewallManagement",
										"clusterNodes"
									]
								}
							},
							"status": "Not Extended (RFC 2774)",
							"code": 510,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Add cluster node",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"<integer>\",\n    \"webUI\": \"<boolean>\",\n    \"agent\": \"<boolean>\",\n    \"datacenter\": \"<string>\"\n}"
						},
						"url": {
							"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/firewallManagement/addClusterNode",
							"protocol": "https",
							"host": [
								"{{DT_HOST}}"
							],
							"path": [
								"api",
								"v1.0",
								"onpremise",
								"firewallManagement",
								"addClusterNode"
							]
						}
					},
					"response": [
						{
							"name": "Addition of node failed",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<integer>\",\n    \"webUI\": \"<boolean>\",\n    \"agent\": \"<boolean>\",\n    \"datacenter\": \"<string>\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/firewallManagement/addClusterNode",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"firewallManagement",
										"addClusterNode"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<integer>\",\n    \"webUI\": \"<boolean>\",\n    \"agent\": \"<boolean>\",\n    \"datacenter\": \"<string>\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/firewallManagement/addClusterNode",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"firewallManagement",
										"addClusterNode"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "node Management",
			"item": [
				{
					"name": "cassandra Quorum Override",
					"item": [
						{
							"name": "Get the cassandra read quorum override.",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/cassandraQuorumOverride",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"nodeManagement",
										"cassandraQuorumOverride"
									]
								},
								"description": "Does not return actual used read quorum if no override is set, in this case UNSET is returned."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/cassandraQuorumOverride",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"nodeManagement",
												"cassandraQuorumOverride"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Override cassandra read quorum at runtime only for this particular server instance",
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/cassandraQuorumOverride/:quorum",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"nodeManagement",
										"cassandraQuorumOverride",
										":quorum"
									],
									"variable": [
										{
											"key": "quorum",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								},
								"description": "This API allows you to override cassandra read quorum of this particular server instance. Other server instances are not affected.\n\nNote that this will not be persisted, after server restart this override will be lost!\n\nTypically you only need it in multi-datacenter fail-over scenarios. \n\n To reset the overrides call the API with the UNSET value."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/cassandraQuorumOverride/:quorum",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"nodeManagement",
												"cassandraQuorumOverride",
												":quorum"
											],
											"variable": [
												{
													"key": "quorum"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "joining",
					"item": [
						{
							"name": "initialize Node Joining",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/joining?ip=<string>&timestamp=<long>&datacenter=<string>",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"nodeManagement",
										"joining"
									],
									"query": [
										{
											"key": "ip",
											"value": "<string>"
										},
										{
											"key": "timestamp",
											"value": "<long>"
										},
										{
											"key": "datacenter",
											"value": "<string>"
										}
									]
								}
							},
							"response": [
								{
									"name": "default response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/joining?ip=<string>&timestamp=<long>&datacenter=<string>",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"nodeManagement",
												"joining"
											],
											"query": [
												{
													"key": "ip",
													"value": "<string>"
												},
												{
													"key": "timestamp",
													"value": "<long>"
												},
												{
													"key": "datacenter",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "\"\""
								}
							]
						},
						{
							"name": "get Node Joining",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/joining/:requestId",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"nodeManagement",
										"joining",
										":requestId"
									],
									"variable": [
										{
											"key": "requestId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "default response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/joining/:requestId",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"nodeManagement",
												"joining",
												":requestId"
											],
											"variable": [
												{
													"key": "requestId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "\"\""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "join/check",
					"item": [
						{
							"name": "Initialize verification if a node can be added to the cluster",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/join/check?ip=<string>&timestamp=<long>&datacenter=<string>",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"nodeManagement",
										"join",
										"check"
									],
									"query": [
										{
											"key": "ip",
											"value": "<string>"
										},
										{
											"key": "timestamp",
											"value": "<long>"
										},
										{
											"key": "datacenter",
											"value": "<string>"
										}
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/join/check?ip=<string>&timestamp=<long>&datacenter=<string>",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"nodeManagement",
												"join",
												"check"
											],
											"query": [
												{
													"key": "ip",
													"value": "<string>"
												},
												{
													"key": "timestamp",
													"value": "<long>"
												},
												{
													"key": "datacenter",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"requestId\": \"dolore laboris\"\n}"
								}
							]
						},
						{
							"name": "Verification if a node can be added to the cluster status",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/join/check/:requestId",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"nodeManagement",
										"join",
										"check",
										":requestId"
									],
									"variable": [
										{
											"key": "requestId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/join/check/:requestId",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"nodeManagement",
												"join",
												"check",
												":requestId"
											],
											"variable": [
												{
													"key": "requestId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"nodeJoiningPreCheckFinished\": false,\n \"canRunNodeInstallation\": true,\n \"details\": \"eiusmod\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Restart node",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/nodeRestart",
							"protocol": "https",
							"host": [
								"{{DT_HOST}}"
							],
							"path": [
								"api",
								"v1.0",
								"onpremise",
								"nodeManagement",
								"nodeRestart"
							]
						}
					},
					"response": [
						{
							"name": "Restart failed",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/nodeRestart",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"nodeManagement",
										"nodeRestart"
									]
								}
							},
							"status": "Not Extended (RFC 2774)",
							"code": 510,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/nodeRestart",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"nodeManagement",
										"nodeRestart"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get node's server status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/nodeServerStatus",
							"protocol": "https",
							"host": [
								"{{DT_HOST}}"
							],
							"path": [
								"api",
								"v1.0",
								"onpremise",
								"nodeManagement",
								"nodeServerStatus"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/nodeServerStatus",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"nodeManagement",
										"nodeServerStatus"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"EMERGENCY\""
						}
					]
				},
				{
					"name": "Get product version",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/productVersion",
							"protocol": "https",
							"host": [
								"{{DT_HOST}}"
							],
							"path": [
								"api",
								"v1.0",
								"onpremise",
								"nodeManagement",
								"productVersion"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/productVersion",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"nodeManagement",
										"productVersion"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"productVersion\": \"magna cupidatat esse irure\"\n}"
						}
					]
				},
				{
					"name": "get Nodekeeper Product Version",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/nodekeeperProductVersion",
							"protocol": "https",
							"host": [
								"{{DT_HOST}}"
							],
							"path": [
								"api",
								"v1.0",
								"onpremise",
								"nodeManagement",
								"nodekeeperProductVersion"
							]
						}
					},
					"response": [
						{
							"name": "default response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/nodekeeperProductVersion",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"nodeManagement",
										"nodekeeperProductVersion"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"\""
						}
					]
				},
				{
					"name": "Override which nodes can perform internal responsibilities",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"responsibilityNodeIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ]\n}"
						},
						"url": {
							"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/responsibilityOverride",
							"protocol": "https",
							"host": [
								"{{DT_HOST}}"
							],
							"path": [
								"api",
								"v1.0",
								"onpremise",
								"nodeManagement",
								"responsibilityOverride"
							]
						},
						"description": "This API allows you to define which nodes can perform cluster-wide responsibilities, for example metric aging or problem detection, by specifying nodes IDs. \n\nTypically you only need it in multi-datacenter fail-over scenarios. \n\n To reset the overrides call the API with an empty list of node IDs."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"responsibilityNodeIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ]\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/responsibilityOverride",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"nodeManagement",
										"responsibilityOverride"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "try Lock Removal",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/tryLockRemoval?id=<integer>&ip=<string>&requestedOnNode=<integer>&requestedByUser=<string>",
							"protocol": "https",
							"host": [
								"{{DT_HOST}}"
							],
							"path": [
								"api",
								"v1.0",
								"onpremise",
								"nodeManagement",
								"tryLockRemoval"
							],
							"query": [
								{
									"key": "id",
									"value": "<integer>"
								},
								{
									"key": "ip",
									"value": "<string>"
								},
								{
									"key": "requestedOnNode",
									"value": "<integer>"
								},
								{
									"key": "requestedByUser",
									"value": "<string>"
								}
							]
						}
					},
					"response": [
						{
							"name": "default response",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/tryLockRemoval?id=<integer>&ip=<string>&requestedOnNode=<integer>&requestedByUser=<string>",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"nodeManagement",
										"tryLockRemoval"
									],
									"query": [
										{
											"key": "id",
											"value": "<integer>"
										},
										{
											"key": "ip",
											"value": "<string>"
										},
										{
											"key": "requestedOnNode",
											"value": "<integer>"
										},
										{
											"key": "requestedByUser",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"\""
						}
					]
				},
				{
					"name": "unlock Removal",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/unlockRemoval?id=<integer>&ip=<string>&removalStopReason=<string>",
							"protocol": "https",
							"host": [
								"{{DT_HOST}}"
							],
							"path": [
								"api",
								"v1.0",
								"onpremise",
								"nodeManagement",
								"unlockRemoval"
							],
							"query": [
								{
									"key": "id",
									"value": "<integer>"
								},
								{
									"key": "ip",
									"value": "<string>"
								},
								{
									"key": "removalStopReason",
									"value": "<string>"
								}
							]
						}
					},
					"response": [
						{
							"name": "default response",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/unlockRemoval?id=<integer>&ip=<string>&removalStopReason=<string>",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"nodeManagement",
										"unlockRemoval"
									],
									"query": [
										{
											"key": "id",
											"value": "<integer>"
										},
										{
											"key": "ip",
											"value": "<string>"
										},
										{
											"key": "removalStopReason",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"\""
						}
					]
				},
				{
					"name": "Get node removal status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/nodeRemovalStatus",
							"protocol": "https",
							"host": [
								"{{DT_HOST}}"
							],
							"path": [
								"api",
								"v1.0",
								"onpremise",
								"nodeManagement",
								"nodeRemovalStatus"
							]
						},
						"description": "Responses with status of current node removal (if it's already running) and statuses of historical removals."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/nodeRemovalStatus",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"nodeManagement",
										"nodeRemovalStatus"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "dead Node Cleaning",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/deadNodeCleaning?ip=<string>&requestedOnNode=<integer>&requestedByUser=<string>",
							"protocol": "https",
							"host": [
								"{{DT_HOST}}"
							],
							"path": [
								"api",
								"v1.0",
								"onpremise",
								"nodeManagement",
								"deadNodeCleaning"
							],
							"query": [
								{
									"key": "ip",
									"value": "<string>"
								},
								{
									"key": "requestedOnNode",
									"value": "<integer>"
								},
								{
									"key": "requestedByUser",
									"value": "<string>"
								}
							]
						}
					},
					"response": [
						{
							"name": "default response",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/deadNodeCleaning?ip=<string>&requestedOnNode=<integer>&requestedByUser=<string>",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"nodeManagement",
										"deadNodeCleaning"
									],
									"query": [
										{
											"key": "ip",
											"value": "<string>"
										},
										{
											"key": "requestedOnNode",
											"value": "<integer>"
										},
										{
											"key": "requestedByUser",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"\""
						}
					]
				},
				{
					"name": "Remove node",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nodeId\": \"<integer>\",\n    \"ipAddress\": \"<string>\"\n}"
						},
						"url": {
							"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/triggerRemoveNode",
							"protocol": "https",
							"host": [
								"{{DT_HOST}}"
							],
							"path": [
								"api",
								"v1.0",
								"onpremise",
								"nodeManagement",
								"triggerRemoveNode"
							]
						}
					},
					"response": [
						{
							"name": "Node removal operation is not allowed. Elasticsearch is sharding data.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nodeId\": \"<integer>\",\n    \"ipAddress\": \"<string>\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/triggerRemoveNode",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"nodeManagement",
										"triggerRemoveNode"
									]
								}
							},
							"code": 535,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Offline node removal operation error. Cleaning cluster configuration was not completed",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nodeId\": \"<integer>\",\n    \"ipAddress\": \"<string>\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/triggerRemoveNode",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"nodeManagement",
										"triggerRemoveNode"
									]
								}
							},
							"code": 530,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Node removal operation is in progress",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nodeId\": \"<integer>\",\n    \"ipAddress\": \"<string>\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/triggerRemoveNode",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"nodeManagement",
										"triggerRemoveNode"
									]
								}
							},
							"status": "Variant Also Negotiates (RFC 2295)",
							"code": 506,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Node joining operation is in progress",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nodeId\": \"<integer>\",\n    \"ipAddress\": \"<string>\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/triggerRemoveNode",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"nodeManagement",
										"triggerRemoveNode"
									]
								}
							},
							"status": "HTTP Version Not Supported",
							"code": 505,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Node not found by id or IP address",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nodeId\": \"<integer>\",\n    \"ipAddress\": \"<string>\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/triggerRemoveNode",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"nodeManagement",
										"triggerRemoveNode"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Node removal operation is not allowed. Upgrade is in progress.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nodeId\": \"<integer>\",\n    \"ipAddress\": \"<string>\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/triggerRemoveNode",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"nodeManagement",
										"triggerRemoveNode"
									]
								}
							},
							"code": 533,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Node removal process started successfully",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nodeId\": \"<integer>\",\n    \"ipAddress\": \"<string>\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/triggerRemoveNode",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"nodeManagement",
										"triggerRemoveNode"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Node is not reachable error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nodeId\": \"<integer>\",\n    \"ipAddress\": \"<string>\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/triggerRemoveNode",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"nodeManagement",
										"triggerRemoveNode"
									]
								}
							},
							"code": 536,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Lock node removal operation error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nodeId\": \"<integer>\",\n    \"ipAddress\": \"<string>\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/triggerRemoveNode",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"nodeManagement",
										"triggerRemoveNode"
									]
								}
							},
							"code": 531,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Node removal operation is not allowed. Cassandra nodes are not in valid state (UN).",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nodeId\": \"<integer>\",\n    \"ipAddress\": \"<string>\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/triggerRemoveNode",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"nodeManagement",
										"triggerRemoveNode"
									]
								}
							},
							"code": 534,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Node removal operation timeout",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nodeId\": \"<integer>\",\n    \"ipAddress\": \"<string>\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/triggerRemoveNode",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"nodeManagement",
										"triggerRemoveNode"
									]
								}
							},
							"status": "Insufficient Storage (WebDAV) (RFC 4918)",
							"code": 507,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Trigger node removal process error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nodeId\": \"<integer>\",\n    \"ipAddress\": \"<string>\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/triggerRemoveNode",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"nodeManagement",
										"triggerRemoveNode"
									]
								}
							},
							"code": 532,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "set Installer Status",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"<string>\",\n    \"details\": \"<string>\"\n}"
						},
						"url": {
							"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/installerStatus?ip=<string>",
							"protocol": "https",
							"host": [
								"{{DT_HOST}}"
							],
							"path": [
								"api",
								"v1.0",
								"onpremise",
								"nodeManagement",
								"installerStatus"
							],
							"query": [
								{
									"key": "ip",
									"value": "<string>"
								}
							]
						}
					},
					"response": [
						{
							"name": "default response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"<string>\",\n    \"details\": \"<string>\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/installerStatus?ip=<string>",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"nodeManagement",
										"installerStatus"
									],
									"query": [
										{
											"key": "ip",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"\""
						}
					]
				},
				{
					"name": "try Lock Joining",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/tryLockJoining?ip=<string>",
							"protocol": "https",
							"host": [
								"{{DT_HOST}}"
							],
							"path": [
								"api",
								"v1.0",
								"onpremise",
								"nodeManagement",
								"tryLockJoining"
							],
							"query": [
								{
									"key": "ip",
									"value": "<string>"
								}
							]
						}
					},
					"response": [
						{
							"name": "default response",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/tryLockJoining?ip=<string>",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"nodeManagement",
										"tryLockJoining"
									],
									"query": [
										{
											"key": "ip",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"\""
						}
					]
				},
				{
					"name": "finalize Joining",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ip\": \"<string>\",\n    \"result\": \"<string>\",\n    \"details\": \"<string>\"\n}"
						},
						"url": {
							"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/finalizeJoining?ip=<string>&status=<string>&forceUnlock=<boolean>",
							"protocol": "https",
							"host": [
								"{{DT_HOST}}"
							],
							"path": [
								"api",
								"v1.0",
								"onpremise",
								"nodeManagement",
								"finalizeJoining"
							],
							"query": [
								{
									"key": "ip",
									"value": "<string>"
								},
								{
									"key": "status",
									"value": "<string>"
								},
								{
									"key": "forceUnlock",
									"value": "<boolean>"
								}
							]
						}
					},
					"response": [
						{
							"name": "default response",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ip\": \"<string>\",\n    \"result\": \"<string>\",\n    \"details\": \"<string>\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/nodeManagement/finalizeJoining?ip=<string>&status=<string>&forceUnlock=<boolean>",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"nodeManagement",
										"finalizeJoining"
									],
									"query": [
										{
											"key": "ip",
											"value": "<string>"
										},
										{
											"key": "status",
											"value": "<string>"
										},
										{
											"key": "forceUnlock",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"\""
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "preferences",
			"item": [
				{
					"name": "Get Dynatrace Managed specific properties",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/preferences",
							"protocol": "https",
							"host": [
								"{{DT_HOST}}"
							],
							"path": [
								"api",
								"v1.0",
								"onpremise",
								"preferences"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/preferences",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"preferences"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"supportSendBilling\": true,\n \"supportSendClusterHealth\": false,\n \"suppressNonBillingRelevantData\": true,\n \"certificateManagementEnabled\": false,\n \"certificateManagementPossible\": true,\n \"supportSendEvents\": true,\n \"supportAllowRemoteAccess\": false,\n \"remoteAccessOnDemandOnly\": false,\n \"communityCreateUser\": false,\n \"communityExternalSearch\": false,\n \"backupEnabled\": true,\n \"ruxitMonitorsRuxit\": false,\n \"woopraIntegration\": true,\n \"telemetrySharing\": false,\n \"helpChatEnabled\": true,\n \"readOnlyRemoteAccessAllowed\": true\n}"
						}
					]
				},
				{
					"name": "Update properties",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"supportSendBilling\": \"<boolean>\",\n    \"supportSendClusterHealth\": \"<boolean>\",\n    \"suppressNonBillingRelevantData\": \"<boolean>\",\n    \"certificateManagementEnabled\": \"<boolean>\",\n    \"certificateManagementPossible\": \"<boolean>\",\n    \"supportSendEvents\": \"<boolean>\",\n    \"supportAllowRemoteAccess\": \"<boolean>\",\n    \"remoteAccessOnDemandOnly\": \"<boolean>\",\n    \"communityCreateUser\": \"<boolean>\",\n    \"communityExternalSearch\": \"<boolean>\",\n    \"ruxitMonitorsRuxit\": \"<boolean>\",\n    \"woopraIntegration\": \"<boolean>\",\n    \"telemetrySharing\": \"<boolean>\",\n    \"helpChatEnabled\": \"<boolean>\",\n    \"readOnlyRemoteAccessAllowed\": \"<boolean>\"\n}"
						},
						"url": {
							"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/preferences",
							"protocol": "https",
							"host": [
								"{{DT_HOST}}"
							],
							"path": [
								"api",
								"v1.0",
								"onpremise",
								"preferences"
							]
						}
					},
					"response": [
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"supportSendBilling\": \"<boolean>\",\n    \"supportSendClusterHealth\": \"<boolean>\",\n    \"suppressNonBillingRelevantData\": \"<boolean>\",\n    \"certificateManagementEnabled\": \"<boolean>\",\n    \"certificateManagementPossible\": \"<boolean>\",\n    \"supportSendEvents\": \"<boolean>\",\n    \"supportAllowRemoteAccess\": \"<boolean>\",\n    \"remoteAccessOnDemandOnly\": \"<boolean>\",\n    \"communityCreateUser\": \"<boolean>\",\n    \"communityExternalSearch\": \"<boolean>\",\n    \"ruxitMonitorsRuxit\": \"<boolean>\",\n    \"woopraIntegration\": \"<boolean>\",\n    \"telemetrySharing\": \"<boolean>\",\n    \"helpChatEnabled\": \"<boolean>\",\n    \"readOnlyRemoteAccessAllowed\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/preferences",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"preferences"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"supportSendBilling\": \"<boolean>\",\n    \"supportSendClusterHealth\": \"<boolean>\",\n    \"suppressNonBillingRelevantData\": \"<boolean>\",\n    \"certificateManagementEnabled\": \"<boolean>\",\n    \"certificateManagementPossible\": \"<boolean>\",\n    \"supportSendEvents\": \"<boolean>\",\n    \"supportAllowRemoteAccess\": \"<boolean>\",\n    \"remoteAccessOnDemandOnly\": \"<boolean>\",\n    \"communityCreateUser\": \"<boolean>\",\n    \"communityExternalSearch\": \"<boolean>\",\n    \"ruxitMonitorsRuxit\": \"<boolean>\",\n    \"woopraIntegration\": \"<boolean>\",\n    \"telemetrySharing\": \"<boolean>\",\n    \"helpChatEnabled\": \"<boolean>\",\n    \"readOnlyRemoteAccessAllowed\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/preferences",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"preferences"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"supportSendBilling\": \"<boolean>\",\n \"supportSendClusterHealth\": \"<boolean>\",\n \"suppressNonBillingRelevantData\": \"<boolean>\",\n \"certificateManagementEnabled\": \"<boolean>\",\n \"certificateManagementPossible\": \"<boolean>\",\n \"supportSendEvents\": \"<boolean>\",\n \"supportAllowRemoteAccess\": \"<boolean>\",\n \"remoteAccessOnDemandOnly\": \"<boolean>\",\n \"communityCreateUser\": \"<boolean>\",\n \"communityExternalSearch\": \"<boolean>\",\n \"backupEnabled\": true,\n \"ruxitMonitorsRuxit\": \"<boolean>\",\n \"woopraIntegration\": \"<boolean>\",\n \"telemetrySharing\": \"<boolean>\",\n \"helpChatEnabled\": \"<boolean>\",\n \"readOnlyRemoteAccessAllowed\": \"<boolean>\"\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "smtp",
			"item": [
				{
					"name": "Get SMTP configuration",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/smtp",
							"protocol": "https",
							"host": [
								"{{DT_HOST}}"
							],
							"path": [
								"api",
								"v1.0",
								"onpremise",
								"smtp"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/smtp",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"smtp"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"hostName\": \"consectetur anim pariatur proident\",\n \"port\": -40228430,\n \"userName\": \"ullamco adipisicing do fugiat veniam\",\n \"password\": \"eu sunt minim dolore\",\n \"isPasswordConfigured\": false,\n \"connectionSecurity\": \"OPTIONAL_STARTTLS\",\n \"senderEmailAddress\": \"eiusmod ut\",\n \"testEmailAddress\": \"cillum non sed\",\n \"allowFallbackViaMissionControl\": false,\n \"useSmtpServer\": false\n}"
						}
					]
				},
				{
					"name": "Update SMTP configuration",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"hostName\": \"<string>\",\n    \"port\": \"<integer>\",\n    \"userName\": \"<string>\",\n    \"password\": \"<string>\",\n    \"isPasswordConfigured\": \"<boolean>\",\n    \"connectionSecurity\": \"<string>\",\n    \"senderEmailAddress\": \"<string>\",\n    \"testEmailAddress\": \"<string>\",\n    \"allowFallbackViaMissionControl\": \"<boolean>\",\n    \"useSmtpServer\": \"<boolean>\"\n}"
						},
						"url": {
							"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/smtp",
							"protocol": "https",
							"host": [
								"{{DT_HOST}}"
							],
							"path": [
								"api",
								"v1.0",
								"onpremise",
								"smtp"
							]
						}
					},
					"response": [
						{
							"name": "SMTP configuration not accepted",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"hostName\": \"<string>\",\n    \"port\": \"<integer>\",\n    \"userName\": \"<string>\",\n    \"password\": \"<string>\",\n    \"isPasswordConfigured\": \"<boolean>\",\n    \"connectionSecurity\": \"<string>\",\n    \"senderEmailAddress\": \"<string>\",\n    \"testEmailAddress\": \"<string>\",\n    \"allowFallbackViaMissionControl\": \"<boolean>\",\n    \"useSmtpServer\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/smtp",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"smtp"
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Invalid SMTP configuration",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"hostName\": \"<string>\",\n    \"port\": \"<integer>\",\n    \"userName\": \"<string>\",\n    \"password\": \"<string>\",\n    \"isPasswordConfigured\": \"<boolean>\",\n    \"connectionSecurity\": \"<string>\",\n    \"senderEmailAddress\": \"<string>\",\n    \"testEmailAddress\": \"<string>\",\n    \"allowFallbackViaMissionControl\": \"<boolean>\",\n    \"useSmtpServer\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/smtp",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"smtp"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"hostName\": \"<string>\",\n    \"port\": \"<integer>\",\n    \"userName\": \"<string>\",\n    \"password\": \"<string>\",\n    \"isPasswordConfigured\": \"<boolean>\",\n    \"connectionSecurity\": \"<string>\",\n    \"senderEmailAddress\": \"<string>\",\n    \"testEmailAddress\": \"<string>\",\n    \"allowFallbackViaMissionControl\": \"<boolean>\",\n    \"useSmtpServer\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/smtp",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"smtp"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"hostName\": \"<string>\",\n \"port\": \"<integer>\",\n \"userName\": \"<string>\",\n \"password\": \"<string>\",\n \"isPasswordConfigured\": \"<boolean>\",\n \"connectionSecurity\": \"<string>\",\n \"senderEmailAddress\": \"<string>\",\n \"testEmailAddress\": \"<string>\",\n \"allowFallbackViaMissionControl\": \"<boolean>\",\n \"useSmtpServer\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "Send test email",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/smtp/sendTestMessage/:emailAddress",
							"protocol": "https",
							"host": [
								"{{DT_HOST}}"
							],
							"path": [
								"api",
								"v1.0",
								"onpremise",
								"smtp",
								"sendTestMessage",
								":emailAddress"
							],
							"variable": [
								{
									"key": "emailAddress",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						},
						"description": "You can send only one test email per minute"
					},
					"response": [
						{
							"name": "Successfully sent",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/smtp/sendTestMessage/:emailAddress",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"smtp",
										"sendTestMessage",
										":emailAddress"
									],
									"variable": [
										{
											"key": "emailAddress"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Sending email failed",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/smtp/sendTestMessage/:emailAddress",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"smtp",
										"sendTestMessage",
										":emailAddress"
									],
									"variable": [
										{
											"key": "emailAddress"
										}
									]
								}
							},
							"status": "Not Extended (RFC 2774)",
							"code": 510,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Incorrect email address",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/smtp/sendTestMessage/:emailAddress",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"smtp",
										"sendTestMessage",
										":emailAddress"
									],
									"variable": [
										{
											"key": "emailAddress"
										}
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Too short a time interval between sending attempts",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/smtp/sendTestMessage/:emailAddress",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"smtp",
										"sendTestMessage",
										":emailAddress"
									],
									"variable": [
										{
											"key": "emailAddress"
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "ssl Certificate",
			"item": [
				{
					"name": "store/{entity Type}/{entity Id}",
					"item": [
						{
							"name": "Get certificate-storage status",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/sslCertificate/store/:entityType/:entityId",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"sslCertificate",
										"store",
										":entityType",
										":entityId"
									],
									"variable": [
										{
											"key": "entityType",
											"value": "<string>",
											"description": "(Required) entity type, possible values = \"COLLECTOR\" "
										},
										{
											"key": "entityId",
											"value": "<integer>",
											"description": "(Required) Node ID, which can be extracted from the URL in 'Node details' view."
										}
									]
								}
							},
							"response": [
								{
									"name": "Status not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/sslCertificate/store/:entityType/:entityId",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detailedError\": \"nulla cupidatat reprehenderit ut non\",\n \"certificateStoreStatus\": \"NOT_FOUND\"\n}"
								},
								{
									"name": "Public key certificate is invalid",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/sslCertificate/store/:entityType/:entityId",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"code": 525,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detailedError\": \"nulla cupidatat reprehenderit ut non\",\n \"certificateStoreStatus\": \"NOT_FOUND\"\n}"
								},
								{
									"name": "Internal error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/sslCertificate/store/:entityType/:entityId",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"code": 529,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detailedError\": \"nulla cupidatat reprehenderit ut non\",\n \"certificateStoreStatus\": \"NOT_FOUND\"\n}"
								},
								{
									"name": "Successful or in progress",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/sslCertificate/store/:entityType/:entityId",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detailedError\": \"nulla cupidatat reprehenderit ut non\",\n \"certificateStoreStatus\": \"NOT_FOUND\"\n}"
								},
								{
									"name": "Error while storing SSL certificate",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/sslCertificate/store/:entityType/:entityId",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"code": 527,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detailedError\": \"nulla cupidatat reprehenderit ut non\",\n \"certificateStoreStatus\": \"NOT_FOUND\"\n}"
								},
								{
									"name": "Private key does not match public key certificate",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/sslCertificate/store/:entityType/:entityId",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"code": 523,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detailedError\": \"nulla cupidatat reprehenderit ut non\",\n \"certificateStoreStatus\": \"NOT_FOUND\"\n}"
								},
								{
									"name": "Certificate has been stored but has not been refreshed",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/sslCertificate/store/:entityType/:entityId",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"code": 528,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detailedError\": \"nulla cupidatat reprehenderit ut non\",\n \"certificateStoreStatus\": \"NOT_FOUND\"\n}"
								},
								{
									"name": "Internal error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/sslCertificate/store/:entityType/:entityId",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Certificate chain is invalid",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/sslCertificate/store/:entityType/:entityId",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"code": 522,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detailedError\": \"nulla cupidatat reprehenderit ut non\",\n \"certificateStoreStatus\": \"NOT_FOUND\"\n}"
								},
								{
									"name": "Incorrect entity type",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/sslCertificate/store/:entityType/:entityId",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detailedError\": \"nulla cupidatat reprehenderit ut non\",\n \"certificateStoreStatus\": \"NOT_FOUND\"\n}"
								},
								{
									"name": "Private key is invalid",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/sslCertificate/store/:entityType/:entityId",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"code": 526,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detailedError\": \"nulla cupidatat reprehenderit ut non\",\n \"certificateStoreStatus\": \"NOT_FOUND\"\n}"
								}
							]
						},
						{
							"name": "Store SSL certificate status",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"privateKeyEncoded\": \"<string>\",\n    \"publicKeyCertificateEncoded\": \"<string>\",\n    \"certificateChainEncoded\": \"<string>\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/sslCertificate/store/:entityType/:entityId",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"sslCertificate",
										"store",
										":entityType",
										":entityId"
									],
									"variable": [
										{
											"key": "entityType",
											"value": "<string>",
											"description": "(Required) entity type, possible values = \"SERVER, COLLECTOR\" "
										},
										{
											"key": "entityId",
											"value": "<integer>",
											"description": "(Required) Node ID, which can be extracted from the URL in 'Node details' view."
										}
									]
								}
							},
							"response": [
								{
									"name": "Internal error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"privateKeyEncoded\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEow...aHzMvp\\n-----END RSA PRIVATE KEY-----\",\n    \"publicKeyCertificateEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\",\n    \"certificateChainEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\\n-----BEGIN CERTIFICATE-----\\nMIIDKT...bXTK+M\\n-----END CERTIFICATE-----\"\n}"
										},
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/sslCertificate/store/:entityType/:entityId",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Internal error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"privateKeyEncoded\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEow...aHzMvp\\n-----END RSA PRIVATE KEY-----\",\n    \"publicKeyCertificateEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\",\n    \"certificateChainEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\\n-----BEGIN CERTIFICATE-----\\nMIIDKT...bXTK+M\\n-----END CERTIFICATE-----\"\n}"
										},
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/sslCertificate/store/:entityType/:entityId",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"code": 529,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detailedError\": \"nulla cupidatat reprehenderit ut non\",\n \"certificateStoreStatus\": \"NOT_FOUND\"\n}"
								},
								{
									"name": "Successful or in progress",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"privateKeyEncoded\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEow...aHzMvp\\n-----END RSA PRIVATE KEY-----\",\n    \"publicKeyCertificateEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\",\n    \"certificateChainEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\\n-----BEGIN CERTIFICATE-----\\nMIIDKT...bXTK+M\\n-----END CERTIFICATE-----\"\n}"
										},
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/sslCertificate/store/:entityType/:entityId",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detailedError\": \"nulla cupidatat reprehenderit ut non\",\n \"certificateStoreStatus\": \"NOT_FOUND\"\n}"
								},
								{
									"name": "Private key does not match public key certificate",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"privateKeyEncoded\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEow...aHzMvp\\n-----END RSA PRIVATE KEY-----\",\n    \"publicKeyCertificateEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\",\n    \"certificateChainEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\\n-----BEGIN CERTIFICATE-----\\nMIIDKT...bXTK+M\\n-----END CERTIFICATE-----\"\n}"
										},
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/sslCertificate/store/:entityType/:entityId",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"code": 523,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detailedError\": \"nulla cupidatat reprehenderit ut non\",\n \"certificateStoreStatus\": \"NOT_FOUND\"\n}"
								},
								{
									"name": "Error while storing SSL certificate",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"privateKeyEncoded\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEow...aHzMvp\\n-----END RSA PRIVATE KEY-----\",\n    \"publicKeyCertificateEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\",\n    \"certificateChainEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\\n-----BEGIN CERTIFICATE-----\\nMIIDKT...bXTK+M\\n-----END CERTIFICATE-----\"\n}"
										},
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/sslCertificate/store/:entityType/:entityId",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"code": 527,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detailedError\": \"nulla cupidatat reprehenderit ut non\",\n \"certificateStoreStatus\": \"NOT_FOUND\"\n}"
								},
								{
									"name": "Certificate has been stored but has not been refreshed",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"privateKeyEncoded\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEow...aHzMvp\\n-----END RSA PRIVATE KEY-----\",\n    \"publicKeyCertificateEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\",\n    \"certificateChainEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\\n-----BEGIN CERTIFICATE-----\\nMIIDKT...bXTK+M\\n-----END CERTIFICATE-----\"\n}"
										},
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/sslCertificate/store/:entityType/:entityId",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"code": 528,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detailedError\": \"nulla cupidatat reprehenderit ut non\",\n \"certificateStoreStatus\": \"NOT_FOUND\"\n}"
								},
								{
									"name": "Certificate chain is invalid",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"privateKeyEncoded\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEow...aHzMvp\\n-----END RSA PRIVATE KEY-----\",\n    \"publicKeyCertificateEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\",\n    \"certificateChainEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\\n-----BEGIN CERTIFICATE-----\\nMIIDKT...bXTK+M\\n-----END CERTIFICATE-----\"\n}"
										},
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/sslCertificate/store/:entityType/:entityId",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"code": 522,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detailedError\": \"nulla cupidatat reprehenderit ut non\",\n \"certificateStoreStatus\": \"NOT_FOUND\"\n}"
								},
								{
									"name": "Public key certificate is invalid",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"privateKeyEncoded\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEow...aHzMvp\\n-----END RSA PRIVATE KEY-----\",\n    \"publicKeyCertificateEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\",\n    \"certificateChainEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\\n-----BEGIN CERTIFICATE-----\\nMIIDKT...bXTK+M\\n-----END CERTIFICATE-----\"\n}"
										},
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/sslCertificate/store/:entityType/:entityId",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"code": 525,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detailedError\": \"nulla cupidatat reprehenderit ut non\",\n \"certificateStoreStatus\": \"NOT_FOUND\"\n}"
								},
								{
									"name": "Incorrect entity type",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"privateKeyEncoded\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEow...aHzMvp\\n-----END RSA PRIVATE KEY-----\",\n    \"publicKeyCertificateEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\",\n    \"certificateChainEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\\n-----BEGIN CERTIFICATE-----\\nMIIDKT...bXTK+M\\n-----END CERTIFICATE-----\"\n}"
										},
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/sslCertificate/store/:entityType/:entityId",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detailedError\": \"nulla cupidatat reprehenderit ut non\",\n \"certificateStoreStatus\": \"NOT_FOUND\"\n}"
								},
								{
									"name": "Private key is invalid",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"privateKeyEncoded\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEow...aHzMvp\\n-----END RSA PRIVATE KEY-----\",\n    \"publicKeyCertificateEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\",\n    \"certificateChainEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\\n-----BEGIN CERTIFICATE-----\\nMIIDKT...bXTK+M\\n-----END CERTIFICATE-----\"\n}"
										},
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/sslCertificate/store/:entityType/:entityId",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"code": 526,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"detailedError\": \"nulla cupidatat reprehenderit ut non\",\n \"certificateStoreStatus\": \"NOT_FOUND\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "SSL certificate details.",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/sslCertificate/:entityType/:entityId",
							"protocol": "https",
							"host": [
								"{{DT_HOST}}"
							],
							"path": [
								"api",
								"v1.0",
								"onpremise",
								"sslCertificate",
								":entityType",
								":entityId"
							],
							"variable": [
								{
									"key": "entityType",
									"value": "<string>",
									"description": "(Required) entity type, possible values = \"SERVER, COLLECTOR\" "
								},
								{
									"key": "entityId",
									"value": "<integer>",
									"description": "(Required) Node ID, which can be extracted from the URL in 'Node details' view."
								}
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/sslCertificate/:entityType/:entityId",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"sslCertificate",
										":entityType",
										":entityId"
									],
									"variable": [
										{
											"key": "entityType"
										},
										{
											"key": "entityId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"type\": \"boolean\"\n}"
						},
						{
							"name": "Internal server error.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/sslCertificate/:entityType/:entityId",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"sslCertificate",
										":entityType",
										":entityId"
									],
									"variable": [
										{
											"key": "entityType"
										},
										{
											"key": "entityId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "sso/saml/sp/cert",
			"item": [
				{
					"name": "Get SAML SP X.509 certificate details",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/sso/saml/sp/cert",
							"protocol": "https",
							"host": [
								"{{DT_HOST}}"
							],
							"path": [
								"api",
								"v1.0",
								"onpremise",
								"sso",
								"saml",
								"sp",
								"cert"
							]
						}
					},
					"response": [
						{
							"name": "Internal server error.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/sso/saml/sp/cert",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"sso",
										"saml",
										"sp",
										"cert"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/sso/saml/sp/cert",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"sso",
										"saml",
										"sp",
										"cert"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"issuer\": \"ea aliquip qui\",\n \"subject\": \"exercitation in\",\n \"expirationTimestamp\": 63627731,\n \"expirationDate\": \"cupidatat id eu\"\n}"
						}
					]
				},
				{
					"name": "Update SAML SP X.509 certificate",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"privateKeyEncoded\": \"<string>\",\n    \"publicKeyCertificateEncoded\": \"<string>\"\n}"
						},
						"url": {
							"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/sso/saml/sp/cert",
							"protocol": "https",
							"host": [
								"{{DT_HOST}}"
							],
							"path": [
								"api",
								"v1.0",
								"onpremise",
								"sso",
								"saml",
								"sp",
								"cert"
							]
						}
					},
					"response": [
						{
							"name": "Failed. The input is invalid.",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"privateKeyEncoded\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEow...aHzMvp\\n-----END RSA PRIVATE KEY-----\",\n    \"publicKeyCertificateEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/sso/saml/sp/cert",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"sso",
										"saml",
										"sp",
										"cert"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"error\": {\n  \"constraintViolations\": [\n   {\n    \"parameterLocation\": \"PATH\",\n    \"location\": \"ullamco dolor ex\",\n    \"message\": \"officia exercitation\",\n    \"path\": \"in dolore consequat non dolor\"\n   },\n   {\n    \"parameterLocation\": \"QUERY\",\n    \"location\": \"enim Lorem\",\n    \"message\": \"ut voluptate enim\",\n    \"path\": \"dolor sed\"\n   }\n  ],\n  \"code\": 51079554,\n  \"message\": \"magna velit\"\n }\n}"
						},
						{
							"name": "Success",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"privateKeyEncoded\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEow...aHzMvp\\n-----END RSA PRIVATE KEY-----\",\n    \"publicKeyCertificateEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/sso/saml/sp/cert",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"sso",
										"saml",
										"sp",
										"cert"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Operation failed. Check server logs for more details.",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"privateKeyEncoded\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEow...aHzMvp\\n-----END RSA PRIVATE KEY-----\",\n    \"publicKeyCertificateEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/sso/saml/sp/cert",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"sso",
										"saml",
										"sp",
										"cert"
									]
								}
							},
							"status": "Not Extended (RFC 2774)",
							"code": 510,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "support Archive",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "Get support upgrade file",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/supportArchive/:id",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"supportArchive",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Support archive was already deleted from disk",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/supportArchive/:id",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"supportArchive",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Could not find support archive request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/supportArchive/:id",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"supportArchive",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Support archive generation has not completed yet",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/supportArchive/:id",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"supportArchive",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Ok - download file",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/supportArchive/:id",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"supportArchive",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/zip"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Cancel support upgrade generation",
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/supportArchive/:id",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"supportArchive",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Ok",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/supportArchive/:id",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"supportArchive",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete existing support archive",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/supportArchive/:id",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"supportArchive",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Ok - deleted successfully",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/supportArchive/:id",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"supportArchive",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Support archive generation in progress - please cancel it using /cancel",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/supportArchive/:id",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"supportArchive",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Could not find support archive request",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/supportArchive/:id",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"supportArchive",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get support upgrade generation status",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/supportArchive/:id/status",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"supportArchive",
										":id",
										"status"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Could not find support archive request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/supportArchive/:id/status",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"supportArchive",
												":id",
												"status"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Support archive generation state",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/supportArchive/:id/status",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"supportArchive",
												":id",
												"status"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"downloadState\": \"STARTING\",\n \"report\": {\n  \"parts\": [\n   {\n    \"compressedTotalBytes\": -1374310,\n    \"numberOfFiles\": -5709755,\n    \"uncompressedTotalBytes\": 95675431,\n    \"source\": \"incididunt nostrud\",\n    \"errors\": [\n     \"quis mollit in ea\",\n     \"proident\"\n    ]\n   },\n   {\n    \"compressedTotalBytes\": 1341188,\n    \"numberOfFiles\": -35581856,\n    \"uncompressedTotalBytes\": -34528872,\n    \"source\": \"nisi dolor consectetur\",\n    \"errors\": [\n     \"magna tempor labore aute eu\",\n     \"commodo amet in velit Ut\"\n    ]\n   }\n  ]\n }\n}"
								}
							]
						},
						{
							"name": "Get support upgrade generation report",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/supportArchive/:id/report",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"supportArchive",
										":id",
										"report"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Support archive generation report",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/supportArchive/:id/report",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"supportArchive",
												":id",
												"report"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"downloadState\": \"STARTING\",\n \"report\": {\n  \"parts\": [\n   {\n    \"compressedTotalBytes\": -1374310,\n    \"numberOfFiles\": -5709755,\n    \"uncompressedTotalBytes\": 95675431,\n    \"source\": \"incididunt nostrud\",\n    \"errors\": [\n     \"quis mollit in ea\",\n     \"proident\"\n    ]\n   },\n   {\n    \"compressedTotalBytes\": 1341188,\n    \"numberOfFiles\": -35581856,\n    \"uncompressedTotalBytes\": -34528872,\n    \"source\": \"nisi dolor consectetur\",\n    \"errors\": [\n     \"magna tempor labore aute eu\",\n     \"commodo amet in velit Ut\"\n    ]\n   }\n  ]\n }\n}"
								},
								{
									"name": "Could not find support archive request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/supportArchive/:id/report",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"supportArchive",
												":id",
												"report"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Support archive generation has not completed yet",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/supportArchive/:id/report",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"supportArchive",
												":id",
												"report"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Trigger support upgrade generation",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"numberOfDays\": \"<integer>\",\n    \"includeServerData\": \"<boolean>\",\n    \"includeActiveGateData\": \"<boolean>\",\n    \"includeLogs\": \"<boolean>\",\n    \"includeDebugLogs\": \"<boolean>\",\n    \"includeAgentRegistryLogs\": \"<boolean>\",\n    \"includeLauncherLogs\": \"<boolean>\",\n    \"includeMonitoringConfigAuditLogs\": \"<boolean>\",\n    \"includeOtherAuditLogs\": \"<boolean>\"\n}"
						},
						"url": {
							"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/supportArchive",
							"protocol": "https",
							"host": [
								"{{DT_HOST}}"
							],
							"path": [
								"api",
								"v1.0",
								"onpremise",
								"supportArchive"
							]
						}
					},
					"response": [
						{
							"name": "Could not trigger support archive generation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"numberOfDays\": \"<integer>\",\n    \"includeServerData\": \"<boolean>\",\n    \"includeActiveGateData\": \"<boolean>\",\n    \"includeLogs\": \"<boolean>\",\n    \"includeDebugLogs\": \"<boolean>\",\n    \"includeAgentRegistryLogs\": \"<boolean>\",\n    \"includeLauncherLogs\": \"<boolean>\",\n    \"includeMonitoringConfigAuditLogs\": \"<boolean>\",\n    \"includeOtherAuditLogs\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/supportArchive",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"supportArchive"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Ok - returns support archive id",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"numberOfDays\": \"<integer>\",\n    \"includeServerData\": \"<boolean>\",\n    \"includeActiveGateData\": \"<boolean>\",\n    \"includeLogs\": \"<boolean>\",\n    \"includeDebugLogs\": \"<boolean>\",\n    \"includeAgentRegistryLogs\": \"<boolean>\",\n    \"includeLauncherLogs\": \"<boolean>\",\n    \"includeMonitoringConfigAuditLogs\": \"<boolean>\",\n    \"includeOtherAuditLogs\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/supportArchive",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"supportArchive"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "-39221655"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "upgrade Management",
			"item": [
				{
					"name": "installation Files",
					"item": [
						{
							"name": "Get list of installation files and their cluster-wide availability information",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/upgradeManagement/installationFiles",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"upgradeManagement",
										"installationFiles"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/upgradeManagement/installationFiles",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"upgradeManagement",
												"installationFiles"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Trigger removal of installation package",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/upgradeManagement/installationFiles/:type/:version",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"upgradeManagement",
										"installationFiles",
										":type",
										":version"
									],
									"variable": [
										{
											"key": "type",
											"value": "<string>",
											"description": "(Required) Installation package type, possible values = \"SERVER, AGENT, JS_AGENT, SG, NGINX\" "
										},
										{
											"key": "version",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Specified installation package was not found.",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/upgradeManagement/installationFiles/:type/:version",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"upgradeManagement",
												"installationFiles",
												":type",
												":version"
											],
											"variable": [
												{
													"key": "type"
												},
												{
													"key": "version"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Operation failed. Check server logs for more details.",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/upgradeManagement/installationFiles/:type/:version",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"upgradeManagement",
												"installationFiles",
												":type",
												":version"
											],
											"variable": [
												{
													"key": "type"
												},
												{
													"key": "version"
												}
											]
										}
									},
									"status": "Not Extended (RFC 2774)",
									"code": 510,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Successfully scheduled. Package should be removed from all nodes within a couple of minutes.",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/upgradeManagement/installationFiles/:type/:version",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"upgradeManagement",
												"installationFiles",
												":type",
												":version"
											],
											"variable": [
												{
													"key": "type"
												},
												{
													"key": "version"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Removing installation files is not allowed. Update list is synchronized with Mission Control.",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/upgradeManagement/installationFiles/:type/:version",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"upgradeManagement",
												"installationFiles",
												":type",
												":version"
											],
											"variable": [
												{
													"key": "type"
												},
												{
													"key": "version"
												}
											]
										}
									},
									"status": "Precondition Failed",
									"code": 412,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Trigger manual cluster upgrade",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/upgradeManagement/triggerUpgrade",
							"protocol": "https",
							"host": [
								"{{DT_HOST}}"
							],
							"path": [
								"api",
								"v1.0",
								"onpremise",
								"upgradeManagement",
								"triggerUpgrade"
							]
						}
					},
					"response": [
						{
							"name": "Started successfully.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/upgradeManagement/triggerUpgrade",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"upgradeManagement",
										"triggerUpgrade"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Triggering of upgrade failed due to missing new version on all nodes.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/upgradeManagement/triggerUpgrade",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"upgradeManagement",
										"triggerUpgrade"
									]
								}
							},
							"status": "Precondition Failed",
							"code": 412,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Upgrade suspended by Dynatrace Mission Control. Could not upgrade cluster now.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/upgradeManagement/triggerUpgrade",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"upgradeManagement",
										"triggerUpgrade"
									]
								}
							},
							"code": 553,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Could not trigger upgrade. Check logs for details...",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/upgradeManagement/triggerUpgrade",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"upgradeManagement",
										"triggerUpgrade"
									]
								}
							},
							"status": "Not Extended (RFC 2774)",
							"code": 510,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get system precondition check state for the cluster",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/upgradeManagement/clusterUpgradeStartupState",
							"protocol": "https",
							"host": [
								"{{DT_HOST}}"
							],
							"path": [
								"api",
								"v1.0",
								"onpremise",
								"upgradeManagement",
								"clusterUpgradeStartupState"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/upgradeManagement/clusterUpgradeStartupState",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"upgradeManagement",
										"clusterUpgradeStartupState"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"state\": \"ERROR\",\n \"error\": \"velit ut sit sint\"\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "groups",
			"item": [
				{
					"name": "{group Id}",
					"item": [
						{
							"name": "Get group",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/groups/:groupId",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"groups",
										":groupId"
									],
									"variable": [
										{
											"key": "groupId",
											"value": "<string>",
											"description": "(Required) Group ID path parameter. Missing or empty values will return a 'Bad Request'."
										}
									]
								}
							},
							"response": [
								{
									"name": "Not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/groups/:groupId",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "No ID information received for the request to get a group",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/groups/:groupId",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/groups/:groupId",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<string>\",\n \"isClusterAdminGroup\": \"<boolean>\",\n \"name\": \"<string>\",\n \"ldapGroupNames\": [\n  \"<string>\"\n ],\n \"accessRight\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Delete group",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/groups/:groupId",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"groups",
										":groupId"
									],
									"variable": [
										{
											"key": "groupId",
											"value": "<string>",
											"description": "(Required) Group ID path parameter. Missing or empty values will return a 'Bad Request'."
										}
									]
								}
							},
							"response": [
								{
									"name": "Successfully deleted",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/groups/:groupId",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<string>\",\n \"isClusterAdminGroup\": \"<boolean>\",\n \"name\": \"<string>\",\n \"ldapGroupNames\": [\n  \"<string>\"\n ],\n \"accessRight\": \"<string>\"\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/groups/:groupId",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "management Zones",
					"item": [
						{
							"name": "Get management zone permissions for all groups",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/groups/managementZones",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"groups",
										"managementZones"
									]
								},
								"description": "This is a list of management zone specific permissions only. Environment permissions are not taken into account here. Groups with permissions for whole environments can also see all management zones defined in these environments, even if they have no management zone specific permissions and the list returned by this request is empty."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/groups/managementZones",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"groups",
												"managementZones"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"groupId\": \"consequat magna fugiat non in\",\n  \"mzPermissionsPerEnvironment\": [\n   {\n    \"environmentUuid\": \"adipisicing\",\n    \"mzPermissions\": [\n     {\n      \"mzId\": \"ad in\",\n      \"permissions\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ]\n     },\n     {\n      \"mzId\": \"laborum\",\n      \"permissions\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ]\n     }\n    ]\n   },\n   {\n    \"environmentUuid\": \"in ea\",\n    \"mzPermissions\": [\n     {\n      \"mzId\": \"sint aute fugiat eu do\",\n      \"permissions\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ]\n     },\n     {\n      \"mzId\": \"dolore veniam\",\n      \"permissions\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ]\n     }\n    ]\n   }\n  ]\n },\n {\n  \"groupId\": \"aliquip ut reprehenderit\",\n  \"mzPermissionsPerEnvironment\": [\n   {\n    \"environmentUuid\": \"dolore cillum Duis aliqua irure\",\n    \"mzPermissions\": [\n     {\n      \"mzId\": \"sit adipisicing in\",\n      \"permissions\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ]\n     },\n     {\n      \"mzId\": \"commodo sunt consectetur\",\n      \"permissions\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ]\n     }\n    ]\n   },\n   {\n    \"environmentUuid\": \"velit dolore sint\",\n    \"mzPermissions\": [\n     {\n      \"mzId\": \"aute in voluptate tempor\",\n      \"permissions\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ]\n     },\n     {\n      \"mzId\": \"exercitation mollit\",\n      \"permissions\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ]\n     }\n    ]\n   }\n  ]\n }\n]"
								}
							]
						},
						{
							"name": "Update management zone permissions for a single group",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"groupId\": \"<string>\",\n    \"mzPermissionsPerEnvironment\": [\n        {\n            \"environmentUuid\": \"voluptate ipsum eu\",\n            \"mzPermissions\": [\n                {\n                    \"mzId\": \"adipisicing ex culpa\",\n                    \"permissions\": [\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        },\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        }\n                    ]\n                },\n                {\n                    \"mzId\": \"in aliquip\",\n                    \"permissions\": [\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        },\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            \"environmentUuid\": \"quis Duis\",\n            \"mzPermissions\": [\n                {\n                    \"mzId\": \"Ut dolor commodo\",\n                    \"permissions\": [\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        },\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        }\n                    ]\n                },\n                {\n                    \"mzId\": \"ea Excepteur dolore\",\n                    \"permissions\": [\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        },\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/groups/managementZones",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"groups",
										"managementZones"
									]
								}
							},
							"response": [
								{
									"name": "Provided model is incorrect or is missing required elements",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"groupId\": \"<string>\",\n    \"mzPermissionsPerEnvironment\": [\n        {\n            \"environmentUuid\": \"laboris\",\n            \"mzPermissions\": [\n                {\n                    \"mzId\": \"deserunt veniam\",\n                    \"permissions\": [\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        },\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        }\n                    ]\n                },\n                {\n                    \"mzId\": \"eu sint\",\n                    \"permissions\": [\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        },\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            \"environmentUuid\": \"proident mollit\",\n            \"mzPermissions\": [\n                {\n                    \"mzId\": \"Duis aliquip\",\n                    \"permissions\": [\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        },\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        }\n                    ]\n                },\n                {\n                    \"mzId\": \"dolore anim occaecat non\",\n                    \"permissions\": [\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        },\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/groups/managementZones",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"groups",
												"managementZones"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "A group, environment or management zone does not exist",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"groupId\": \"<string>\",\n    \"mzPermissionsPerEnvironment\": [\n        {\n            \"environmentUuid\": \"laboris\",\n            \"mzPermissions\": [\n                {\n                    \"mzId\": \"deserunt veniam\",\n                    \"permissions\": [\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        },\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        }\n                    ]\n                },\n                {\n                    \"mzId\": \"eu sint\",\n                    \"permissions\": [\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        },\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            \"environmentUuid\": \"proident mollit\",\n            \"mzPermissions\": [\n                {\n                    \"mzId\": \"Duis aliquip\",\n                    \"permissions\": [\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        },\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        }\n                    ]\n                },\n                {\n                    \"mzId\": \"dolore anim occaecat non\",\n                    \"permissions\": [\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        },\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/groups/managementZones",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"groups",
												"managementZones"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Successfully updated",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"groupId\": \"<string>\",\n    \"mzPermissionsPerEnvironment\": [\n        {\n            \"environmentUuid\": \"laboris\",\n            \"mzPermissions\": [\n                {\n                    \"mzId\": \"deserunt veniam\",\n                    \"permissions\": [\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        },\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        }\n                    ]\n                },\n                {\n                    \"mzId\": \"eu sint\",\n                    \"permissions\": [\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        },\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            \"environmentUuid\": \"proident mollit\",\n            \"mzPermissions\": [\n                {\n                    \"mzId\": \"Duis aliquip\",\n                    \"permissions\": [\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        },\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        }\n                    ]\n                },\n                {\n                    \"mzId\": \"dolore anim occaecat non\",\n                    \"permissions\": [\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        },\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/groups/managementZones",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"groups",
												"managementZones"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Operation failed",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"groupId\": \"<string>\",\n    \"mzPermissionsPerEnvironment\": [\n        {\n            \"environmentUuid\": \"laboris\",\n            \"mzPermissions\": [\n                {\n                    \"mzId\": \"deserunt veniam\",\n                    \"permissions\": [\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        },\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        }\n                    ]\n                },\n                {\n                    \"mzId\": \"eu sint\",\n                    \"permissions\": [\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        },\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            \"environmentUuid\": \"proident mollit\",\n            \"mzPermissions\": [\n                {\n                    \"mzId\": \"Duis aliquip\",\n                    \"permissions\": [\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        },\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        }\n                    ]\n                },\n                {\n                    \"mzId\": \"dolore anim occaecat non\",\n                    \"permissions\": [\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        },\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/groups/managementZones",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"groups",
												"managementZones"
											]
										}
									},
									"status": "Not Extended (RFC 2774)",
									"code": 510,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get management zone permissions for a given group",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/groups/managementZones/:groupId",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"groups",
										"managementZones",
										":groupId"
									],
									"variable": [
										{
											"key": "groupId",
											"value": "<string>",
											"description": "(Required) Group ID path parameter. Missing or empty values will return a 'Bad Request'."
										}
									]
								},
								"description": "This is a list of management zone specific permissions only. Environment permissions are not taken into account here. Groups with permissions for whole environments can also see all management zones defined in these environments, even if they have no management zone specific permissions and the list returned by this request is empty."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/groups/managementZones/:groupId",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"groups",
												"managementZones",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"groupId\": \"<string>\",\n \"mzPermissionsPerEnvironment\": [\n  {\n   \"environmentUuid\": \"laboris\",\n   \"mzPermissions\": [\n    {\n     \"mzId\": \"deserunt veniam\",\n     \"permissions\": [\n      {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     ]\n    },\n    {\n     \"mzId\": \"eu sint\",\n     \"permissions\": [\n      {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     ]\n    }\n   ]\n  },\n  {\n   \"environmentUuid\": \"proident mollit\",\n   \"mzPermissions\": [\n    {\n     \"mzId\": \"Duis aliquip\",\n     \"permissions\": [\n      {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     ]\n    },\n    {\n     \"mzId\": \"dolore anim occaecat non\",\n     \"permissions\": [\n      {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     ]\n    }\n   ]\n  }\n ]\n}"
								},
								{
									"name": "Group not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/groups/managementZones/:groupId",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"groups",
												"managementZones",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "No ID information received for the request to get group MZ permissions",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/groups/managementZones/:groupId",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"groups",
												"managementZones",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get groups",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/groups",
							"protocol": "https",
							"host": [
								"{{DT_HOST}}"
							],
							"path": [
								"api",
								"v1.0",
								"onpremise",
								"groups"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/groups",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"groups"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"id\": \"amet non\",\n  \"isClusterAdminGroup\": true,\n  \"name\": \"ex ea\",\n  \"ldapGroupNames\": [\n   \"voluptate dolor aute\",\n   \"occaecat pariatur tempor\"\n  ],\n  \"accessRight\": \"nulla deserunt exercitation Ut amet\"\n },\n {\n  \"id\": \"exercitation Duis\",\n  \"isClusterAdminGroup\": true,\n  \"name\": \"labore aliqua in\",\n  \"ldapGroupNames\": [\n   \"sint Ut\",\n   \"eiusmod Duis\"\n  ],\n  \"accessRight\": \"aute ex sunt irure\"\n }\n]"
						}
					]
				},
				{
					"name": "Update group",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"<string>\",\n    \"isClusterAdminGroup\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"ldapGroupNames\": [\n        \"<string>\"\n    ],\n    \"accessRight\": \"<string>\"\n}"
						},
						"url": {
							"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/groups",
							"protocol": "https",
							"host": [
								"{{DT_HOST}}"
							],
							"path": [
								"api",
								"v1.0",
								"onpremise",
								"groups"
							]
						}
					},
					"response": [
						{
							"name": "Not acceptable. Group name already exists or group not found",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<string>\",\n    \"isClusterAdminGroup\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"ldapGroupNames\": [\n        \"<string>\"\n    ],\n    \"accessRight\": \"<string>\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/groups",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"groups"
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Successfully updated",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<string>\",\n    \"isClusterAdminGroup\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"ldapGroupNames\": [\n        \"<string>\"\n    ],\n    \"accessRight\": \"<string>\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/groups",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"groups"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<string>\",\n \"isClusterAdminGroup\": \"<boolean>\",\n \"name\": \"<string>\",\n \"ldapGroupNames\": [\n  \"<string>\"\n ],\n \"accessRight\": \"<string>\"\n}"
						},
						{
							"name": "Operation failed. The input is invalid. Possible reasons:\n - No group information received for the request to create a group\n - Group ID is not set\n - Group name cannot be null or empty\n - At least one of the specified environments doesn't exist\n",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<string>\",\n    \"isClusterAdminGroup\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"ldapGroupNames\": [\n        \"<string>\"\n    ],\n    \"accessRight\": \"<string>\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/groups",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"groups"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create group",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"<string>\",\n    \"isClusterAdminGroup\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"ldapGroupNames\": [\n        \"<string>\"\n    ],\n    \"accessRight\": \"<string>\"\n}"
						},
						"url": {
							"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/groups",
							"protocol": "https",
							"host": [
								"{{DT_HOST}}"
							],
							"path": [
								"api",
								"v1.0",
								"onpremise",
								"groups"
							]
						}
					},
					"response": [
						{
							"name": "Not acceptable. Group already exists",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<string>\",\n    \"isClusterAdminGroup\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"ldapGroupNames\": [\n        \"<string>\"\n    ],\n    \"accessRight\": \"<string>\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/groups",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"groups"
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Successfully updated",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<string>\",\n    \"isClusterAdminGroup\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"ldapGroupNames\": [\n        \"<string>\"\n    ],\n    \"accessRight\": \"<string>\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/groups",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"groups"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<string>\",\n \"isClusterAdminGroup\": \"<boolean>\",\n \"name\": \"<string>\",\n \"ldapGroupNames\": [\n  \"<string>\"\n ],\n \"accessRight\": \"<string>\"\n}"
						},
						{
							"name": "Operation failed. The input is invalid. Possible reasons:\n - No group information received for the request to create a group\n - Group ID cannot be set\n - Group name cannot be null or empty\n - At least one of the specified environments doesn't exist\n",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<string>\",\n    \"isClusterAdminGroup\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"ldapGroupNames\": [\n        \"<string>\"\n    ],\n    \"accessRight\": \"<string>\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/groups",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"groups"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create groups",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"id\": \"<string>\",\n        \"isClusterAdminGroup\": \"<boolean>\",\n        \"name\": \"<string>\",\n        \"ldapGroupNames\": [\n            \"<string>\"\n        ],\n        \"accessRight\": \"<string>\"\n    },\n    {\n        \"id\": \"<string>\",\n        \"isClusterAdminGroup\": \"<boolean>\",\n        \"name\": \"<string>\",\n        \"ldapGroupNames\": [\n            \"<string>\"\n        ],\n        \"accessRight\": \"<string>\"\n    }\n]"
						},
						"url": {
							"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/groups/bulk",
							"protocol": "https",
							"host": [
								"{{DT_HOST}}"
							],
							"path": [
								"api",
								"v1.0",
								"onpremise",
								"groups",
								"bulk"
							]
						}
					},
					"response": [
						{
							"name": "No group information received for the create-group request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"id\": \"<string>\",\n        \"isClusterAdminGroup\": \"<boolean>\",\n        \"name\": \"<string>\",\n        \"ldapGroupNames\": [\n            \"<string>\"\n        ],\n        \"accessRight\": \"<string>\"\n    },\n    {\n        \"id\": \"<string>\",\n        \"isClusterAdminGroup\": \"<boolean>\",\n        \"name\": \"<string>\",\n        \"ldapGroupNames\": [\n            \"<string>\"\n        ],\n        \"accessRight\": \"<string>\"\n    }\n]"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/groups/bulk",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"groups",
										"bulk"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unacceptable or incomplete request. Some groups were added.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"id\": \"<string>\",\n        \"isClusterAdminGroup\": \"<boolean>\",\n        \"name\": \"<string>\",\n        \"ldapGroupNames\": [\n            \"<string>\"\n        ],\n        \"accessRight\": \"<string>\"\n    },\n    {\n        \"id\": \"<string>\",\n        \"isClusterAdminGroup\": \"<boolean>\",\n        \"name\": \"<string>\",\n        \"ldapGroupNames\": [\n            \"<string>\"\n        ],\n        \"accessRight\": \"<string>\"\n    }\n]"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/groups/bulk",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"groups",
										"bulk"
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"id\": \"<string>\",\n  \"isClusterAdminGroup\": \"<boolean>\",\n  \"name\": \"<string>\",\n  \"ldapGroupNames\": [\n   \"<string>\"\n  ],\n  \"accessRight\": \"<string>\"\n },\n {\n  \"id\": \"<string>\",\n  \"isClusterAdminGroup\": \"<boolean>\",\n  \"name\": \"<string>\",\n  \"ldapGroupNames\": [\n   \"<string>\"\n  ],\n  \"accessRight\": \"<string>\"\n }\n]"
						},
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"id\": \"<string>\",\n        \"isClusterAdminGroup\": \"<boolean>\",\n        \"name\": \"<string>\",\n        \"ldapGroupNames\": [\n            \"<string>\"\n        ],\n        \"accessRight\": \"<string>\"\n    },\n    {\n        \"id\": \"<string>\",\n        \"isClusterAdminGroup\": \"<boolean>\",\n        \"name\": \"<string>\",\n        \"ldapGroupNames\": [\n            \"<string>\"\n        ],\n        \"accessRight\": \"<string>\"\n    }\n]"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/groups/bulk",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"groups",
										"bulk"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"id\": \"<string>\",\n  \"isClusterAdminGroup\": \"<boolean>\",\n  \"name\": \"<string>\",\n  \"ldapGroupNames\": [\n   \"<string>\"\n  ],\n  \"accessRight\": \"<string>\"\n },\n {\n  \"id\": \"<string>\",\n  \"isClusterAdminGroup\": \"<boolean>\",\n  \"name\": \"<string>\",\n  \"ldapGroupNames\": [\n   \"<string>\"\n  ],\n  \"accessRight\": \"<string>\"\n }\n]"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "users",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "Get user",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/users/:id",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) User ID path parameter. Missing or empty values will return a 'Bad Request'"
										}
									]
								}
							},
							"response": [
								{
									"name": "No ID information received for the get-user request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/users/:id",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/users/:id",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"email\": \"<string>\",\n \"firstName\": \"<string>\",\n \"id\": \"<string>\",\n \"lastName\": \"<string>\",\n \"passwordClearText\": \"<string>\",\n \"groups\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
								},
								{
									"name": "Not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/users/:id",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete user",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/users/:id",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) User ID path parameter. Missing or empty values will return a 'Bad Request'."
										}
									]
								}
							},
							"response": [
								{
									"name": "Successfully deleted",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/users/:id",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"email\": \"<string>\",\n \"firstName\": \"<string>\",\n \"id\": \"<string>\",\n \"lastName\": \"<string>\",\n \"passwordClearText\": \"<string>\",\n \"groups\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
								},
								{
									"name": "Not modified",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/users/:id",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Modified",
									"code": 304,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Unacceptable request",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/users/:id",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "No ID information received for the delete-user request",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/users/:id",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/users",
							"protocol": "https",
							"host": [
								"{{DT_HOST}}"
							],
							"path": [
								"api",
								"v1.0",
								"onpremise",
								"users"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/users",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"email\": \"esse cillum\",\n  \"firstName\": \"deserunt\",\n  \"id\": \"do culpa laboris officia\",\n  \"lastName\": \"adipisicing laborum id\",\n  \"passwordClearText\": \"id ipsum irure\",\n  \"groups\": [\n   \"ut\",\n   \"et dol\"\n  ]\n },\n {\n  \"email\": \"Duis ea officia\",\n  \"firstName\": \"Duis nulla id laboris labore\",\n  \"id\": \"Lorem dolore\",\n  \"lastName\": \"amet aliquip magna ipsum\",\n  \"passwordClearText\": \"id ex ea\",\n  \"groups\": [\n   \"quis\",\n   \"sed commodo Ut\"\n  ]\n }\n]"
						}
					]
				},
				{
					"name": "Update user",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"id\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"passwordClearText\": \"<string>\",\n    \"groups\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
						},
						"url": {
							"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/users",
							"protocol": "https",
							"host": [
								"{{DT_HOST}}"
							],
							"path": [
								"api",
								"v1.0",
								"onpremise",
								"users"
							]
						}
					},
					"response": [
						{
							"name": "Email address already registered",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"id\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"passwordClearText\": \"<string>\",\n    \"groups\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/users",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"users"
									]
								}
							},
							"code": 524,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Successfully updated",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"id\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"passwordClearText\": \"<string>\",\n    \"groups\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/users",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"email\": \"<string>\",\n \"firstName\": \"<string>\",\n \"id\": \"<string>\",\n \"lastName\": \"<string>\",\n \"passwordClearText\": \"<string>\",\n \"groups\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
						},
						{
							"name": "Not found",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"id\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"passwordClearText\": \"<string>\",\n    \"groups\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/users",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"users"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Operation forbidden - either LDAP or SSO with group assignment integration is turned on",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"id\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"passwordClearText\": \"<string>\",\n    \"groups\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/users",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"users"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Operation failed. The input is invalid. Possible reasons:\n - all required values (ID, email, first name, last name) must be set\n - invalid user data\n - user email address already assigned\n - user group ID does not exist",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"id\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"passwordClearText\": \"<string>\",\n    \"groups\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/users",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"users"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unacceptable request",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"id\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"passwordClearText\": \"<string>\",\n    \"groups\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/users",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"users"
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create user",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"id\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"passwordClearText\": \"<string>\",\n    \"groups\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
						},
						"url": {
							"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/users",
							"protocol": "https",
							"host": [
								"{{DT_HOST}}"
							],
							"path": [
								"api",
								"v1.0",
								"onpremise",
								"users"
							]
						}
					},
					"response": [
						{
							"name": "Operation failed. The input is invalid. Possible reasons:\n - all required values (ID, email, first name, last name) must be set\n - invalid user data\n - user ID already exists\n - user email address already assigned\n - user group ID does not exist",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"id\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"passwordClearText\": \"<string>\",\n    \"groups\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/users",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"users"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unacceptable request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"id\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"passwordClearText\": \"<string>\",\n    \"groups\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/users",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"users"
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Couldn't create user",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"id\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"passwordClearText\": \"<string>\",\n    \"groups\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/users",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"users"
									]
								}
							},
							"code": 522,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Operation forbidden - either LDAP or SSO with group assignment integration is turned on",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"id\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"passwordClearText\": \"<string>\",\n    \"groups\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/users",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"users"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Successfully created",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"id\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"passwordClearText\": \"<string>\",\n    \"groups\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/users",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"email\": \"<string>\",\n \"firstName\": \"<string>\",\n \"id\": \"<string>\",\n \"lastName\": \"<string>\",\n \"passwordClearText\": \"<string>\",\n \"groups\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
						},
						{
							"name": "Email address already registered",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"id\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"passwordClearText\": \"<string>\",\n    \"groups\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/users",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"users"
									]
								}
							},
							"code": 524,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "User already exists",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"id\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"passwordClearText\": \"<string>\",\n    \"groups\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/users",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"users"
									]
								}
							},
							"code": 523,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create users",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"email\": \"<string>\",\n        \"firstName\": \"<string>\",\n        \"id\": \"<string>\",\n        \"lastName\": \"<string>\",\n        \"passwordClearText\": \"<string>\",\n        \"groups\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    },\n    {\n        \"email\": \"<string>\",\n        \"firstName\": \"<string>\",\n        \"id\": \"<string>\",\n        \"lastName\": \"<string>\",\n        \"passwordClearText\": \"<string>\",\n        \"groups\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    }\n]"
						},
						"url": {
							"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/users/bulk",
							"protocol": "https",
							"host": [
								"{{DT_HOST}}"
							],
							"path": [
								"api",
								"v1.0",
								"onpremise",
								"users",
								"bulk"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"email\": \"<string>\",\n        \"firstName\": \"<string>\",\n        \"id\": \"<string>\",\n        \"lastName\": \"<string>\",\n        \"passwordClearText\": \"<string>\",\n        \"groups\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    },\n    {\n        \"email\": \"<string>\",\n        \"firstName\": \"<string>\",\n        \"id\": \"<string>\",\n        \"lastName\": \"<string>\",\n        \"passwordClearText\": \"<string>\",\n        \"groups\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    }\n]"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/users/bulk",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"users",
										"bulk"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"email\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"id\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"passwordClearText\": \"<string>\",\n  \"groups\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n },\n {\n  \"email\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"id\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"passwordClearText\": \"<string>\",\n  \"groups\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n }\n]"
						},
						{
							"name": "Operation forbidden - either LDAP or SSO with group assignment integration is turned on",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"email\": \"<string>\",\n        \"firstName\": \"<string>\",\n        \"id\": \"<string>\",\n        \"lastName\": \"<string>\",\n        \"passwordClearText\": \"<string>\",\n        \"groups\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    },\n    {\n        \"email\": \"<string>\",\n        \"firstName\": \"<string>\",\n        \"id\": \"<string>\",\n        \"lastName\": \"<string>\",\n        \"passwordClearText\": \"<string>\",\n        \"groups\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    }\n]"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/users/bulk",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"users",
										"bulk"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unacceptable or incomplete request. Some users added",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"email\": \"<string>\",\n        \"firstName\": \"<string>\",\n        \"id\": \"<string>\",\n        \"lastName\": \"<string>\",\n        \"passwordClearText\": \"<string>\",\n        \"groups\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    },\n    {\n        \"email\": \"<string>\",\n        \"firstName\": \"<string>\",\n        \"id\": \"<string>\",\n        \"lastName\": \"<string>\",\n        \"passwordClearText\": \"<string>\",\n        \"groups\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    }\n]"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/users/bulk",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"users",
										"bulk"
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"email\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"id\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"passwordClearText\": \"<string>\",\n  \"groups\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n },\n {\n  \"email\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"id\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"passwordClearText\": \"<string>\",\n  \"groups\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n }\n]"
						},
						{
							"name": "Operation failed. The input is invalid. Possible reasons:\n - no user information received for the create-users request\n - all required values (ID, email, first name, last name) must be set\n - invalid user data\n - input contains duplicated IDs\n - input contains duplicated email addresses\n - user ID already exists\n - user email address already assigned\n - user group ID does not exist",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"email\": \"<string>\",\n        \"firstName\": \"<string>\",\n        \"id\": \"<string>\",\n        \"lastName\": \"<string>\",\n        \"passwordClearText\": \"<string>\",\n        \"groups\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    },\n    {\n        \"email\": \"<string>\",\n        \"firstName\": \"<string>\",\n        \"id\": \"<string>\",\n        \"lastName\": \"<string>\",\n        \"passwordClearText\": \"<string>\",\n        \"groups\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    }\n]"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/users/bulk",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"users",
										"bulk"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "user Repository",
			"item": [
				{
					"name": "authentication Mode",
					"item": [
						{
							"name": "Get authentication mode",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/userRepository/authenticationMode",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"userRepository",
										"authenticationMode"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/userRepository/authenticationMode",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"userRepository",
												"authenticationMode"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"authenticationProvider\": \"LDAP\"\n}"
								}
							]
						},
						{
							"name": "Update authentication mode",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"authenticationProvider\": \"<string>\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/userRepository/authenticationMode",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"userRepository",
										"authenticationMode"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"authenticationProvider\": \"<string>\"\n}"
										},
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/userRepository/authenticationMode",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"userRepository",
												"authenticationMode"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"authenticationProvider\": \"LDAP\"\n}"
								},
								{
									"name": "Not Acceptable. LDAP cannot be turned on if \"Import user groups\" from SSO flag is turned on",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"authenticationProvider\": \"<string>\"\n}"
										},
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/userRepository/authenticationMode",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"userRepository",
												"authenticationMode"
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "ldap",
					"item": [
						{
							"name": "connection Configuration",
							"item": [
								{
									"name": "Get LDAP configuration",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/userRepository/ldap/connectionConfiguration",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"userRepository",
												"ldap",
												"connectionConfiguration"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/userRepository/ldap/connectionConfiguration",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"userRepository",
														"ldap",
														"connectionConfiguration"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"shouldUseSecureConnection\": true,\n \"hostName\": \"cillum \",\n \"port\": -65849371,\n \"bindDn\": \"aute quis adipisicing\",\n \"bindPassword\": \"incididunt non nulla\",\n \"bindPasswordSet\": true,\n \"referralHopLimit\": -49727369\n}"
										}
									]
								},
								{
									"name": "Update LDAP connection",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"shouldUseSecureConnection\": \"<boolean>\",\n    \"hostName\": \"<string>\",\n    \"port\": \"<integer>\",\n    \"bindDn\": \"<string>\",\n    \"bindPassword\": \"<string>\",\n    \"bindPasswordSet\": \"<boolean>\",\n    \"referralHopLimit\": \"<integer>\"\n}"
										},
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/userRepository/ldap/connectionConfiguration",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"userRepository",
												"ldap",
												"connectionConfiguration"
											]
										}
									},
									"response": [
										{
											"name": "Not Acceptable",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"shouldUseSecureConnection\": \"<boolean>\",\n    \"hostName\": \"<string>\",\n    \"port\": \"<integer>\",\n    \"bindDn\": \"<string>\",\n    \"bindPassword\": \"<string>\",\n    \"bindPasswordSet\": \"<boolean>\",\n    \"referralHopLimit\": \"<integer>\"\n}"
												},
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/userRepository/ldap/connectionConfiguration",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"userRepository",
														"ldap",
														"connectionConfiguration"
													]
												}
											},
											"status": "Not Acceptable",
											"code": 406,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"shouldUseSecureConnection\": \"<boolean>\",\n    \"hostName\": \"<string>\",\n    \"port\": \"<integer>\",\n    \"bindDn\": \"<string>\",\n    \"bindPassword\": \"<string>\",\n    \"bindPasswordSet\": \"<boolean>\",\n    \"referralHopLimit\": \"<integer>\"\n}"
												},
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/userRepository/ldap/connectionConfiguration",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"userRepository",
														"ldap",
														"connectionConfiguration"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "query Groups",
							"item": [
								{
									"name": "Get LDAP group configuration",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/userRepository/ldap/queryGroups",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"userRepository",
												"ldap",
												"queryGroups"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/userRepository/ldap/queryGroups",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"userRepository",
														"ldap",
														"queryGroups"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"groupsIdAttribute\": \"pariatur ma\",\n \"groupsDisplayNameAttribute\": \"esse\",\n \"groupsMemberAttribute\": \"dolore irure\",\n \"groupsFilter\": \"do dolore\",\n \"groupsDn\": \"do\"\n}"
										}
									]
								},
								{
									"name": "Update LDAP groups query configuration",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"groupsIdAttribute\": \"<string>\",\n    \"groupsDisplayNameAttribute\": \"<string>\",\n    \"groupsMemberAttribute\": \"<string>\",\n    \"groupsFilter\": \"<string>\",\n    \"groupsDn\": \"<string>\"\n}"
										},
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/userRepository/ldap/queryGroups",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"userRepository",
												"ldap",
												"queryGroups"
											]
										}
									},
									"response": [
										{
											"name": "Unacceptable request",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"groupsIdAttribute\": \"<string>\",\n    \"groupsDisplayNameAttribute\": \"<string>\",\n    \"groupsMemberAttribute\": \"<string>\",\n    \"groupsFilter\": \"<string>\",\n    \"groupsDn\": \"<string>\"\n}"
												},
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/userRepository/ldap/queryGroups",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"userRepository",
														"ldap",
														"queryGroups"
													]
												}
											},
											"status": "Not Acceptable",
											"code": 406,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"groupsIdAttribute\": \"<string>\",\n    \"groupsDisplayNameAttribute\": \"<string>\",\n    \"groupsMemberAttribute\": \"<string>\",\n    \"groupsFilter\": \"<string>\",\n    \"groupsDn\": \"<string>\"\n}"
												},
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/userRepository/ldap/queryGroups",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"userRepository",
														"ldap",
														"queryGroups"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "query Users",
							"item": [
								{
									"name": "Get LDAP users query configuration",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/userRepository/ldap/queryUsers",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"userRepository",
												"ldap",
												"queryUsers"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/userRepository/ldap/queryUsers",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"userRepository",
														"ldap",
														"queryUsers"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"usersBaseDn\": \"minim et pariatur tempor sed\",\n \"usersAccountNameAttribute\": \"in mollit eiusmod\",\n \"usersFirstNameAttribute\": \"occaecat cupidatat dolore\",\n \"usersLastNameAttribute\": \"do Lorem\",\n \"usersEmailAttribute\": \"in proident sed et\",\n \"usersMembershipAttribute\": \"Excepteur\",\n \"usersFilter\": \"Duis eiusmod mollit sit\"\n}"
										}
									]
								},
								{
									"name": "Update LDAP users query configuration",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"usersBaseDn\": \"<string>\",\n    \"usersAccountNameAttribute\": \"<string>\",\n    \"usersFirstNameAttribute\": \"<string>\",\n    \"usersLastNameAttribute\": \"<string>\",\n    \"usersEmailAttribute\": \"<string>\",\n    \"usersMembershipAttribute\": \"<string>\",\n    \"usersFilter\": \"<string>\"\n}"
										},
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/userRepository/ldap/queryUsers",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"userRepository",
												"ldap",
												"queryUsers"
											]
										}
									},
									"response": [
										{
											"name": "Unacceptable request",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"usersBaseDn\": \"<string>\",\n    \"usersAccountNameAttribute\": \"<string>\",\n    \"usersFirstNameAttribute\": \"<string>\",\n    \"usersLastNameAttribute\": \"<string>\",\n    \"usersEmailAttribute\": \"<string>\",\n    \"usersMembershipAttribute\": \"<string>\",\n    \"usersFilter\": \"<string>\"\n}"
												},
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/userRepository/ldap/queryUsers",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"userRepository",
														"ldap",
														"queryUsers"
													]
												}
											},
											"status": "Not Acceptable",
											"code": 406,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"usersBaseDn\": \"<string>\",\n    \"usersAccountNameAttribute\": \"<string>\",\n    \"usersFirstNameAttribute\": \"<string>\",\n    \"usersLastNameAttribute\": \"<string>\",\n    \"usersEmailAttribute\": \"<string>\",\n    \"usersMembershipAttribute\": \"<string>\",\n    \"usersFilter\": \"<string>\"\n}"
												},
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/userRepository/ldap/queryUsers",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"userRepository",
														"ldap",
														"queryUsers"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "proxy",
			"item": [
				{
					"name": "test",
					"item": [
						{
							"name": "Test Internet connection using given proxy configuration",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"port\": \"<integer>\",\n    \"scheme\": \"<string>\",\n    \"server\": \"<string>\",\n    \"user\": \"<string>\",\n    \"password\": \"<string>\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/proxy/test",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"proxy",
										"test"
									]
								}
							},
							"response": [
								{
									"name": "Request was processed, check response body for details",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"port\": \"<integer>\",\n    \"scheme\": \"<string>\",\n    \"server\": \"<string>\",\n    \"user\": \"<string>\",\n    \"password\": \"<string>\"\n}"
										},
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/proxy/test",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"proxy",
												"test"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"connectionOk\": false,\n \"testExecuted\": true,\n \"testExecutionMessage\": \"commodo pariatur culpa ad\"\n}"
								}
							]
						},
						{
							"name": "Test Internet connection from specific Data Center using given proxy configuration (Multi Data Center deployment)",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"port\": \"<integer>\",\n    \"scheme\": \"<string>\",\n    \"server\": \"<string>\",\n    \"user\": \"<string>\",\n    \"password\": \"<string>\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/proxy/test/:dc",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"proxy",
										"test",
										":dc"
									],
									"variable": [
										{
											"key": "dc",
											"value": "<string>",
											"description": "(Required) Data Center"
										}
									]
								}
							},
							"response": [
								{
									"name": "Request was processed, check response body for details",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"port\": \"<integer>\",\n    \"scheme\": \"<string>\",\n    \"server\": \"<string>\",\n    \"user\": \"<string>\",\n    \"password\": \"<string>\"\n}"
										},
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/proxy/test/:dc",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"proxy",
												"test",
												":dc"
											],
											"variable": [
												{
													"key": "dc"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"connectionOk\": false,\n \"testExecuted\": true,\n \"testExecutionMessage\": \"commodo pariatur culpa ad\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "configuration",
					"item": [
						{
							"name": "Get cluster proxy configuration",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/proxy/configuration",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"proxy",
										"configuration"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/proxy/configuration",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"proxy",
												"configuration"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"scheme\": \"sed esse\",\n \"server\": \"cillum aliqua Ut officia Excep\",\n \"port\": 60687580,\n \"userOrPasswordDefined\": false\n}"
								},
								{
									"name": "Proxy is not configured",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/proxy/configuration",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"proxy",
												"configuration"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Set/update cluster proxy configuration",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"port\": \"<integer>\",\n    \"scheme\": \"<string>\",\n    \"server\": \"<string>\",\n    \"user\": \"<string>\",\n    \"password\": \"<string>\"\n}"
								},
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/proxy/configuration",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"proxy",
										"configuration"
									]
								}
							},
							"response": [
								{
									"name": "Successful, configuration updated",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"port\": \"<integer>\",\n    \"scheme\": \"<string>\",\n    \"server\": \"<string>\",\n    \"user\": \"<string>\",\n    \"password\": \"<string>\"\n}"
										},
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/proxy/configuration",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"proxy",
												"configuration"
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Successful, new configuration created",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"port\": \"<integer>\",\n    \"scheme\": \"<string>\",\n    \"server\": \"<string>\",\n    \"user\": \"<string>\",\n    \"password\": \"<string>\"\n}"
										},
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/proxy/configuration",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"proxy",
												"configuration"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Given proxy configuration is invalid",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"port\": \"<integer>\",\n    \"scheme\": \"<string>\",\n    \"server\": \"<string>\",\n    \"user\": \"<string>\",\n    \"password\": \"<string>\"\n}"
										},
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/proxy/configuration",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"proxy",
												"configuration"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Remove cluster proxy configuration",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/proxy/configuration",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"proxy",
										"configuration"
									]
								}
							},
							"response": [
								{
									"name": "Successful, previous configuration returned",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/proxy/configuration",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"proxy",
												"configuration"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"scheme\": \"sed esse\",\n \"server\": \"cillum aliqua Ut officia Excep\",\n \"port\": 60687580,\n \"userOrPasswordDefined\": false\n}"
								},
								{
									"name": "Proxy was not configured",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/proxy/configuration",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"proxy",
												"configuration"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "configurations",
					"item": [
						{
							"name": "{dc}",
							"item": [
								{
									"name": "Get Data Center proxy configuration (Multi Data Center deployment)",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/proxy/configurations/:dc",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"proxy",
												"configurations",
												":dc"
											],
											"variable": [
												{
													"key": "dc",
													"value": "<string>",
													"description": "(Required) Data Center"
												}
											]
										}
									},
									"response": [
										{
											"name": "Proxy is not configured for given Data Center",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/proxy/configurations/:dc",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"proxy",
														"configurations",
														":dc"
													],
													"variable": [
														{
															"key": "dc"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/proxy/configurations/:dc",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"proxy",
														"configurations",
														":dc"
													],
													"variable": [
														{
															"key": "dc"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"scheme\": \"sed esse\",\n \"server\": \"cillum aliqua Ut officia Excep\",\n \"port\": 60687580,\n \"userOrPasswordDefined\": false\n}"
										}
									]
								},
								{
									"name": "Set/update Data Center proxy configuration (Multi Data Center deployment)",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"port\": \"<integer>\",\n    \"scheme\": \"<string>\",\n    \"server\": \"<string>\",\n    \"user\": \"<string>\",\n    \"password\": \"<string>\"\n}"
										},
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/proxy/configurations/:dc",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"proxy",
												"configurations",
												":dc"
											],
											"variable": [
												{
													"key": "dc",
													"value": "<string>",
													"description": "(Required) Data Center"
												}
											]
										}
									},
									"response": [
										{
											"name": "Successful, new configuration created",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"port\": \"<integer>\",\n    \"scheme\": \"<string>\",\n    \"server\": \"<string>\",\n    \"user\": \"<string>\",\n    \"password\": \"<string>\"\n}"
												},
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/proxy/configurations/:dc",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"proxy",
														"configurations",
														":dc"
													],
													"variable": [
														{
															"key": "dc"
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Successful, configuration updated",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"port\": \"<integer>\",\n    \"scheme\": \"<string>\",\n    \"server\": \"<string>\",\n    \"user\": \"<string>\",\n    \"password\": \"<string>\"\n}"
												},
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/proxy/configurations/:dc",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"proxy",
														"configurations",
														":dc"
													],
													"variable": [
														{
															"key": "dc"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Given proxy configuration is invalid",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"port\": \"<integer>\",\n    \"scheme\": \"<string>\",\n    \"server\": \"<string>\",\n    \"user\": \"<string>\",\n    \"password\": \"<string>\"\n}"
												},
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/proxy/configurations/:dc",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"proxy",
														"configurations",
														":dc"
													],
													"variable": [
														{
															"key": "dc"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Remove Data Center proxy configuration (Multi Data Center deployment)",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/proxy/configurations/:dc",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"proxy",
												"configurations",
												":dc"
											],
											"variable": [
												{
													"key": "dc",
													"value": "<string>",
													"description": "(Required) Data Center"
												}
											]
										}
									},
									"response": [
										{
											"name": "Proxy was not configured for given Data Center",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/proxy/configurations/:dc",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"proxy",
														"configurations",
														":dc"
													],
													"variable": [
														{
															"key": "dc"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Successful, previous configuration returned",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/proxy/configurations/:dc",
													"protocol": "https",
													"host": [
														"{{DT_HOST}}"
													],
													"path": [
														"api",
														"v1.0",
														"onpremise",
														"proxy",
														"configurations",
														":dc"
													],
													"variable": [
														{
															"key": "dc"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"scheme\": \"sed esse\",\n \"server\": \"cillum aliqua Ut officia Excep\",\n \"port\": 60687580,\n \"userOrPasswordDefined\": false\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get proxy configurations for all Data Centers (Multi Data Center deployment)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/proxy/configurations",
									"protocol": "https",
									"host": [
										"{{DT_HOST}}"
									],
									"path": [
										"api",
										"v1.0",
										"onpremise",
										"proxy",
										"configurations"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{DT_HOST}}/api/v1.0/onpremise/proxy/configurations",
											"protocol": "https",
											"host": [
												"{{DT_HOST}}"
											],
											"path": [
												"api",
												"v1.0",
												"onpremise",
												"proxy",
												"configurations"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"configurations\": \"Duis\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			},
			{
				"key": "value",
				"value": "Api-Token {{DT_TOKEN}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "9f9bdf8c-22dd-40e2-a6cd-6d0c6aca35f7",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "b1598715-5cab-43cc-8afe-b187ec682b32",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "8d12efcf-c4e6-44a9-950e-5c56ab5fb030",
			"key": "baseUrl",
			"value": "https://{{DT_HOST}}/api/v1.0/onpremise"
		}
	],
	"protocolProfileBehavior": {}
}