{
	"info": {
		"_postman_id": "66d126b5-e28b-4e77-9e45-82862ac431f9",
		"name": "Dynatrace Cluster API v1",
		"description": "Dynatrace Managed exposes cluster management functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters. \n\nTo authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:\n\n* 400 - Bad Request: Some request parameters are not correct. See response body for details.\n* 401 - Unauthorized: A valid authorization header is required but is missing.\n* 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid.\n* 404 - Not Found: Endpoint does not exist or some entities could not be found, e.g. User account.\n* 500 - Internal Server Error: See response body for details.\n* 556 - Upgrade in progress: Operation couldn't be performed during the upgrade.\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "backup",
			"item": [
				{
					"name": "config",
					"item": [
						{
							"name": "Return backup configuration overview",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/backup/config",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"backup",
										"config"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/backup/config",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"backup",
												"config"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"datacenter\": \"dc1\",\n \"enabled\": true,\n \"storagePath\": \"/efs/backup\",\n \"includeRumData\": true,\n \"includeTsMetricData\": true,\n \"bandwidthLimitMbits\": 240,\n \"maxEsSnapshotsToClean\": 30,\n \"cassandraScheduledTime\": 22,\n \"pauseBackups\": false\n}"
								}
							]
						},
						{
							"name": "Change backup configuration",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"datacenter\": \"dc1\",\n    \"enabled\": true,\n    \"storagePath\": \"/efs/backup\",\n    \"includeRumData\": true,\n    \"includeTsMetricData\": true,\n    \"bandwidthLimitMbits\": 240,\n    \"maxEsSnapshotsToClean\": 30,\n    \"cassandraScheduledTime\": 22,\n    \"pauseBackups\": false\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/backup/config",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"backup",
										"config"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"datacenter\": \"dc1\",\n    \"enabled\": true,\n    \"storagePath\": \"/efs/backup\",\n    \"includeRumData\": true,\n    \"includeTsMetricData\": true,\n    \"bandwidthLimitMbits\": 240,\n    \"maxEsSnapshotsToClean\": 30,\n    \"cassandraScheduledTime\": 22,\n    \"pauseBackups\": false\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/backup/config",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"backup",
												"config"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Configuration change failed.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"datacenter\": \"dc1\",\n    \"enabled\": true,\n    \"storagePath\": \"/efs/backup\",\n    \"includeRumData\": true,\n    \"includeTsMetricData\": true,\n    \"bandwidthLimitMbits\": 240,\n    \"maxEsSnapshotsToClean\": 30,\n    \"cassandraScheduledTime\": 22,\n    \"pauseBackups\": false\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/backup/config",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"backup",
												"config"
											]
										}
									},
									"code": 512,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Check status of change backup configuration",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/backup/config/status?requestId=id Ut esse officia consectetur",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"backup",
										"config",
										"status"
									],
									"query": [
										{
											"key": "requestId",
											"value": "id Ut esse officia consectetur"
										}
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/backup/config/status?requestId=id Ut esse officia consectetur",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"backup",
												"config",
												"status"
											],
											"query": [
												{
													"key": "requestId",
													"value": "id Ut esse officia consectetur"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Request accepted. There will be an id in the response body to check status through the config/status endpoint.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/backup/config/status?requestId=id Ut esse officia consectetur",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"backup",
												"config",
												"status"
											],
											"query": [
												{
													"key": "requestId",
													"value": "id Ut esse officia consectetur"
												}
											]
										}
									},
									"status": "Multi-Status (WebDAV) (RFC 4918)",
									"code": 207,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "There is no response for your request id, it might have been already removed from cache if request was made several hours ago. Please make sure that request id is correct and not empty.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/backup/config/status?requestId=id Ut esse officia consectetur",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"backup",
												"config",
												"status"
											],
											"query": [
												{
													"key": "requestId",
													"value": "id Ut esse officia consectetur"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Configuration change failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/backup/config/status?requestId=id Ut esse officia consectetur",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"backup",
												"config",
												"status"
											],
											"query": [
												{
													"key": "requestId",
													"value": "id Ut esse officia consectetur"
												}
											]
										}
									},
									"code": 512,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Check if given directory is valid for backup in the cluster",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/backup/clusterCheckDir?dir=id Ut esse officia consectetur&datacenter=id Ut esse officia consectetur",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"backup",
								"clusterCheckDir"
							],
							"query": [
								{
									"key": "dir",
									"value": "id Ut esse officia consectetur",
									"description": "Backup store directory path parameter. Missing or empty values will return a 'Bad Request'"
								},
								{
									"key": "datacenter",
									"value": "id Ut esse officia consectetur",
									"description": "Datacenter where backup should be executed. Should be omitted for Single Datacenter Cluster"
								}
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/backup/clusterCheckDir?dir=id Ut esse officia consectetur&datacenter=id Ut esse officia consectetur",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"backup",
										"clusterCheckDir"
									],
									"query": [
										{
											"key": "dir",
											"value": "id Ut esse officia consectetur"
										},
										{
											"key": "datacenter",
											"value": "id Ut esse officia consectetur"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"storagePath\": \"incididunt in Lorem officia consectetur\",\n \"storageError\": \"Excepteur adipisicing sint ad\",\n \"inProgress\": true\n}"
						},
						{
							"name": "No directory information received for validation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/backup/clusterCheckDir?dir=id Ut esse officia consectetur&datacenter=id Ut esse officia consectetur",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"backup",
										"clusterCheckDir"
									],
									"query": [
										{
											"key": "dir",
											"value": "id Ut esse officia consectetur"
										},
										{
											"key": "datacenter",
											"value": "id Ut esse officia consectetur"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "bootstrap Management",
			"item": [
				{
					"name": "files",
					"item": [
						{
							"name": "ag",
							"item": [
								{
									"name": "Get ActiveGate config properties",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/bootstrapManagement/files/ag/configProperties",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bootstrapManagement",
												"files",
												"ag",
												"configProperties"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/bootstrapManagement/files/ag/configProperties",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"bootstrapManagement",
														"files",
														"ag",
														"configProperties"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"content\": [\n  \"Ut nulla d\",\n  \"Excepteur sunt Duis\"\n ]\n}"
										},
										{
											"name": "No 'config.properties' file available",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/bootstrapManagement/files/ag/configProperties",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"bootstrapManagement",
														"files",
														"ag",
														"configProperties"
													]
												}
											},
											"status": "Not Extended (RFC 2774)",
											"code": 510,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get ActiveGate secure config properties",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/bootstrapManagement/files/ag/secureConfigProperties",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bootstrapManagement",
												"files",
												"ag",
												"secureConfigProperties"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/bootstrapManagement/files/ag/secureConfigProperties",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"bootstrapManagement",
														"files",
														"ag",
														"secureConfigProperties"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"content\": [\n  \"Ut nulla d\",\n  \"Excepteur sunt Duis\"\n ]\n}"
										},
										{
											"name": "No 'secure.config.properties' file available",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/bootstrapManagement/files/ag/secureConfigProperties",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"bootstrapManagement",
														"files",
														"ag",
														"secureConfigProperties"
													]
												}
											},
											"status": "Not Extended (RFC 2774)",
											"code": 510,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get secure config properties",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/bootstrapManagement/files/secureConfigProperties",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bootstrapManagement",
										"files",
										"secureConfigProperties"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/bootstrapManagement/files/secureConfigProperties",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bootstrapManagement",
												"files",
												"secureConfigProperties"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  \"dolore nostrud do\",\n  \"id\"\n ]\n}"
								},
								{
									"name": "No 'secure.config.properties' file available",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/bootstrapManagement/files/secureConfigProperties",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bootstrapManagement",
												"files",
												"secureConfigProperties"
											]
										}
									},
									"status": "Not Extended (RFC 2774)",
									"code": 510,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get runtime properties",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/bootstrapManagement/files/runtimeProperties",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bootstrapManagement",
										"files",
										"runtimeProperties"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/bootstrapManagement/files/runtimeProperties",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bootstrapManagement",
												"files",
												"runtimeProperties"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  \"Ut nulla d\",\n  \"Excepteur sunt Duis\"\n ]\n}"
								},
								{
									"name": "No 'runtime.properties' file available",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/bootstrapManagement/files/runtimeProperties",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bootstrapManagement",
												"files",
												"runtimeProperties"
											]
										}
									},
									"status": "Not Extended (RFC 2774)",
									"code": 510,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get installer metadata",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/bootstrapManagement/files/installerMetadata",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bootstrapManagement",
										"files",
										"installerMetadata"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/bootstrapManagement/files/installerMetadata",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bootstrapManagement",
												"files",
												"installerMetadata"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"clusterBackupPath\": \"in fugiat Duis proident\",\n \"elasticsearchBackupPath\": \"officia nostrud in eiusmod\",\n \"datacenterWithBackupEnabled\": \"nulla adipi\"\n}"
								}
							]
						},
						{
							"name": "Get key store",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/bootstrapManagement/files/keyStore",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bootstrapManagement",
										"files",
										"keyStore"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/bootstrapManagement/files/keyStore",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bootstrapManagement",
												"files",
												"keyStore"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  \"Ut nulla d\",\n  \"Excepteur sunt Duis\"\n ]\n}"
								},
								{
									"name": "No 'key store' file available",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/bootstrapManagement/files/keyStore",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bootstrapManagement",
												"files",
												"keyStore"
											]
										}
									},
									"status": "Not Extended (RFC 2774)",
									"code": 510,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get config properties",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/bootstrapManagement/files/configProperties",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bootstrapManagement",
										"files",
										"configProperties"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/bootstrapManagement/files/configProperties",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bootstrapManagement",
												"files",
												"configProperties"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  \"Ut nulla d\",\n  \"Excepteur sunt Duis\"\n ]\n}"
								},
								{
									"name": "No 'config.properties' file available",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/bootstrapManagement/files/configProperties",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bootstrapManagement",
												"files",
												"configProperties"
											]
										}
									},
									"status": "Not Extended (RFC 2774)",
									"code": 510,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Get new node id",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/bootstrapManagement/newNodeId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bootstrapManagement",
								"newNodeId"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bootstrapManagement/newNodeId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bootstrapManagement",
										"newNodeId"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"content\": [\n  \"Ut nulla d\",\n  \"Excepteur sunt Duis\"\n ]\n}"
						},
						{
							"name": "Failed to generate new node Id",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bootstrapManagement/newNodeId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bootstrapManagement",
										"newNodeId"
									]
								}
							},
							"status": "Not Extended (RFC 2774)",
							"code": 510,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "endpoint",
			"item": [
				{
					"name": "web Ui Address",
					"item": [
						{
							"name": "Get WebUi address",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/endpoint/webUiAddress",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"endpoint",
										"webUiAddress"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/endpoint/webUiAddress",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"endpoint",
												"webUiAddress"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"address\": \"ullamco enim cupidatat\",\n \"newAddress\": \"aliquip ut Lorem deserunt aliqua\",\n \"usePublicIpForDomainGeneration\": false,\n \"usePublicIpForAgents\": false\n}"
								}
							]
						},
						{
							"name": "Update WebUi address",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"address\": \"ullamco enim cupidatat\",\n    \"newAddress\": \"aliquip ut Lorem deserunt aliqua\",\n    \"usePublicIpForDomainGeneration\": false,\n    \"usePublicIpForAgents\": false\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/endpoint/webUiAddress",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"endpoint",
										"webUiAddress"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"address\": \"ullamco enim cupidatat\",\n    \"newAddress\": \"aliquip ut Lorem deserunt aliqua\",\n    \"usePublicIpForDomainGeneration\": false,\n    \"usePublicIpForAgents\": false\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/endpoint/webUiAddress",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"endpoint",
												"webUiAddress"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"address\": \"ullamco enim cupidatat\",\n \"newAddress\": \"aliquip ut Lorem deserunt aliqua\",\n \"usePublicIpForDomainGeneration\": false,\n \"usePublicIpForAgents\": false\n}"
								},
								{
									"name": "Operation failed",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"address\": \"ullamco enim cupidatat\",\n    \"newAddress\": \"aliquip ut Lorem deserunt aliqua\",\n    \"usePublicIpForDomainGeneration\": false,\n    \"usePublicIpForAgents\": false\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/endpoint/webUiAddress",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"endpoint",
												"webUiAddress"
											]
										}
									},
									"status": "Not Extended (RFC 2774)",
									"code": 510,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "cdn Address",
					"item": [
						{
							"name": "Get root CDN address",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/endpoint/cdnAddress",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"endpoint",
										"cdnAddress"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/endpoint/cdnAddress",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"endpoint",
												"cdnAddress"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"address\": \"ullamco enim cupidatat\",\n \"newAddress\": \"aliquip ut Lorem deserunt aliqua\",\n \"usePublicIpForDomainGeneration\": false,\n \"usePublicIpForAgents\": false\n}"
								}
							]
						},
						{
							"name": "Update root CDN address",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"address\": \"ullamco enim cupidatat\",\n    \"newAddress\": \"aliquip ut Lorem deserunt aliqua\",\n    \"usePublicIpForDomainGeneration\": false,\n    \"usePublicIpForAgents\": false\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/endpoint/cdnAddress",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"endpoint",
										"cdnAddress"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"address\": \"ullamco enim cupidatat\",\n    \"newAddress\": \"aliquip ut Lorem deserunt aliqua\",\n    \"usePublicIpForDomainGeneration\": false,\n    \"usePublicIpForAgents\": false\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/endpoint/cdnAddress",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"endpoint",
												"cdnAddress"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"address\": \"ullamco enim cupidatat\",\n \"newAddress\": \"aliquip ut Lorem deserunt aliqua\",\n \"usePublicIpForDomainGeneration\": false,\n \"usePublicIpForAgents\": false\n}"
								},
								{
									"name": "Operation failed",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"address\": \"ullamco enim cupidatat\",\n    \"newAddress\": \"aliquip ut Lorem deserunt aliqua\",\n    \"usePublicIpForDomainGeneration\": false,\n    \"usePublicIpForAgents\": false\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/endpoint/cdnAddress",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"endpoint",
												"cdnAddress"
											]
										}
									},
									"status": "Not Extended (RFC 2774)",
									"code": 510,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "beacon Forwarder Address",
					"item": [
						{
							"name": "Get beacon forwarder address",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/endpoint/beaconForwarderAddress",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"endpoint",
										"beaconForwarderAddress"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/endpoint/beaconForwarderAddress",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"endpoint",
												"beaconForwarderAddress"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"address\": \"ullamco enim cupidatat\",\n \"newAddress\": \"aliquip ut Lorem deserunt aliqua\",\n \"usePublicIpForDomainGeneration\": false,\n \"usePublicIpForAgents\": false\n}"
								}
							]
						},
						{
							"name": "Update beacon forwarder address",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"address\": \"ullamco enim cupidatat\",\n    \"newAddress\": \"aliquip ut Lorem deserunt aliqua\",\n    \"usePublicIpForDomainGeneration\": false,\n    \"usePublicIpForAgents\": false\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/endpoint/beaconForwarderAddress",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"endpoint",
										"beaconForwarderAddress"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"address\": \"ullamco enim cupidatat\",\n    \"newAddress\": \"aliquip ut Lorem deserunt aliqua\",\n    \"usePublicIpForDomainGeneration\": false,\n    \"usePublicIpForAgents\": false\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/endpoint/beaconForwarderAddress",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"endpoint",
												"beaconForwarderAddress"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"address\": \"ullamco enim cupidatat\",\n \"newAddress\": \"aliquip ut Lorem deserunt aliqua\",\n \"usePublicIpForDomainGeneration\": false,\n \"usePublicIpForAgents\": false\n}"
								},
								{
									"name": "Operation failed",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"address\": \"ullamco enim cupidatat\",\n    \"newAddress\": \"aliquip ut Lorem deserunt aliqua\",\n    \"usePublicIpForDomainGeneration\": false,\n    \"usePublicIpForAgents\": false\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/endpoint/beaconForwarderAddress",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"endpoint",
												"beaconForwarderAddress"
											]
										}
									},
									"status": "Not Extended (RFC 2774)",
									"code": 510,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "public Ip",
					"item": [
						{
							"name": "domain/{node Id}",
							"item": [
								{
									"name": "Get node IP for domain",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/endpoint/publicIp/domain/:nodeId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"endpoint",
												"publicIp",
												"domain",
												":nodeId"
											],
											"variable": [
												{
													"key": "nodeId",
													"value": "90045238",
													"description": "(Required) Node ID"
												}
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/endpoint/publicIp/domain/:nodeId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"endpoint",
														"publicIp",
														"domain",
														":nodeId"
													],
													"variable": [
														{
															"key": "nodeId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"address\": \"ullamco enim cupidatat\",\n \"newAddress\": \"aliquip ut Lorem deserunt aliqua\",\n \"usePublicIpForDomainGeneration\": false,\n \"usePublicIpForAgents\": false\n}"
										},
										{
											"name": "Node not found by id",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/endpoint/publicIp/domain/:nodeId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"endpoint",
														"publicIp",
														"domain",
														":nodeId"
													],
													"variable": [
														{
															"key": "nodeId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Store node IP for domain",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\"id Ut esse officia consectetur\""
										},
										"url": {
											"raw": "{{baseUrl}}/endpoint/publicIp/domain/:nodeId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"endpoint",
												"publicIp",
												"domain",
												":nodeId"
											],
											"variable": [
												{
													"key": "nodeId",
													"value": "90045238",
													"description": "(Required) Node ID"
												}
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"id Ut esse officia consectetur\""
												},
												"url": {
													"raw": "{{baseUrl}}/endpoint/publicIp/domain/:nodeId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"endpoint",
														"publicIp",
														"domain",
														":nodeId"
													],
													"variable": [
														{
															"key": "nodeId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"address\": \"ullamco enim cupidatat\",\n \"newAddress\": \"aliquip ut Lorem deserunt aliqua\",\n \"usePublicIpForDomainGeneration\": false,\n \"usePublicIpForAgents\": false\n}"
										},
										{
											"name": "Operation failed",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"id Ut esse officia consectetur\""
												},
												"url": {
													"raw": "{{baseUrl}}/endpoint/publicIp/domain/:nodeId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"endpoint",
														"publicIp",
														"domain",
														":nodeId"
													],
													"variable": [
														{
															"key": "nodeId"
														}
													]
												}
											},
											"status": "Not Extended (RFC 2774)",
											"code": 510,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Invalid IP address",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"id Ut esse officia consectetur\""
												},
												"url": {
													"raw": "{{baseUrl}}/endpoint/publicIp/domain/:nodeId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"endpoint",
														"publicIp",
														"domain",
														":nodeId"
													],
													"variable": [
														{
															"key": "nodeId"
														}
													]
												}
											},
											"code": 550,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Storing IP failed",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"id Ut esse officia consectetur\""
												},
												"url": {
													"raw": "{{baseUrl}}/endpoint/publicIp/domain/:nodeId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"endpoint",
														"publicIp",
														"domain",
														":nodeId"
													],
													"variable": [
														{
															"key": "nodeId"
														}
													]
												}
											},
											"code": 551,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "agents/{node Id}",
							"item": [
								{
									"name": "Get node IP for OneAgents",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/endpoint/publicIp/agents/:nodeId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"endpoint",
												"publicIp",
												"agents",
												":nodeId"
											],
											"variable": [
												{
													"key": "nodeId",
													"value": "90045238",
													"description": "(Required) Node ID"
												}
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/endpoint/publicIp/agents/:nodeId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"endpoint",
														"publicIp",
														"agents",
														":nodeId"
													],
													"variable": [
														{
															"key": "nodeId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"address\": \"ullamco enim cupidatat\",\n \"newAddress\": \"aliquip ut Lorem deserunt aliqua\",\n \"usePublicIpForDomainGeneration\": false,\n \"usePublicIpForAgents\": false\n}"
										},
										{
											"name": "Timeout",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/endpoint/publicIp/agents/:nodeId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"endpoint",
														"publicIp",
														"agents",
														":nodeId"
													],
													"variable": [
														{
															"key": "nodeId"
														}
													]
												}
											},
											"code": 544,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Invalid address",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/endpoint/publicIp/agents/:nodeId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"endpoint",
														"publicIp",
														"agents",
														":nodeId"
													],
													"variable": [
														{
															"key": "nodeId"
														}
													]
												}
											},
											"code": 550,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Collector not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/endpoint/publicIp/agents/:nodeId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"endpoint",
														"publicIp",
														"agents",
														":nodeId"
													],
													"variable": [
														{
															"key": "nodeId"
														}
													]
												}
											},
											"code": 552,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Store node IP for OneAgents",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\"id Ut esse officia consectetur\""
										},
										"url": {
											"raw": "{{baseUrl}}/endpoint/publicIp/agents/:nodeId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"endpoint",
												"publicIp",
												"agents",
												":nodeId"
											],
											"variable": [
												{
													"key": "nodeId",
													"value": "90045238",
													"description": "(Required) Node ID"
												}
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"id Ut esse officia consectetur\""
												},
												"url": {
													"raw": "{{baseUrl}}/endpoint/publicIp/agents/:nodeId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"endpoint",
														"publicIp",
														"agents",
														":nodeId"
													],
													"variable": [
														{
															"key": "nodeId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Operation failed",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"id Ut esse officia consectetur\""
												},
												"url": {
													"raw": "{{baseUrl}}/endpoint/publicIp/agents/:nodeId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"endpoint",
														"publicIp",
														"agents",
														":nodeId"
													],
													"variable": [
														{
															"key": "nodeId"
														}
													]
												}
											},
											"status": "Not Extended (RFC 2774)",
											"code": 510,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Storing configuration failed",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"id Ut esse officia consectetur\""
												},
												"url": {
													"raw": "{{baseUrl}}/endpoint/publicIp/agents/:nodeId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"endpoint",
														"publicIp",
														"agents",
														":nodeId"
													],
													"variable": [
														{
															"key": "nodeId"
														}
													]
												}
											},
											"code": 540,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Invalid IP address",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"id Ut esse officia consectetur\""
												},
												"url": {
													"raw": "{{baseUrl}}/endpoint/publicIp/agents/:nodeId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"endpoint",
														"publicIp",
														"agents",
														":nodeId"
													],
													"variable": [
														{
															"key": "nodeId"
														}
													]
												}
											},
											"code": 550,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Collector not found",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"id Ut esse officia consectetur\""
												},
												"url": {
													"raw": "{{baseUrl}}/endpoint/publicIp/agents/:nodeId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"endpoint",
														"publicIp",
														"agents",
														":nodeId"
													],
													"variable": [
														{
															"key": "nodeId"
														}
													]
												}
											},
											"code": 552,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "cluster",
			"item": [
				{
					"name": "configuration",
					"item": [
						{
							"name": "status",
							"item": [
								{
									"name": "Get cluster nodes configuration current status",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/cluster/configuration/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"configuration",
												"status"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/configuration/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"configuration",
														"status"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get cluster nodes configuration request status",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/cluster/configuration/status/:requestedAt",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"configuration",
												"status",
												":requestedAt"
											],
											"variable": [
												{
													"key": "requestedAt",
													"value": "90045238",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/configuration/status/:requestedAt",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"configuration",
														"status",
														":requestedAt"
													],
													"variable": [
														{
															"key": "requestedAt"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Cluster nodes configuration",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/cluster/configuration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cluster",
										"configuration"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/configuration",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"configuration"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Configure cluster nodes responsibilities",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"clusterNodes\": [\n        {\n            \"id\": 45261808,\n            \"webUI\": false,\n            \"agent\": true,\n            \"datacenter\": \"proident\",\n            \"kubernetesRole\": \"et Lorem\"\n        },\n        {\n            \"id\": 88528865,\n            \"webUI\": true,\n            \"agent\": false,\n            \"datacenter\": \"occaecat eiusmod\",\n            \"kubernetesRole\": \"non sit\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/cluster/configuration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cluster",
										"configuration"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"clusterNodes\": [\n        {\n            \"id\": 8775898,\n            \"webUI\": false,\n            \"agent\": true,\n            \"datacenter\": \"laborum Lorem\",\n            \"kubernetesRole\": \"ex consequat dolore\"\n        },\n        {\n            \"id\": 52758324,\n            \"webUI\": false,\n            \"agent\": false,\n            \"datacenter\": \"sunt nisi consequat consectetur\",\n            \"kubernetesRole\": \"sed incididunt aliqua\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/cluster/configuration",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"configuration"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Get information about known servers",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/cluster",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cluster"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/cluster",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cluster"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"id\": 9180880,\n  \"clusterMemberAddress\": \"laboris Excepteur\",\n  \"operationState\": \"deserunt labore\",\n  \"buildVersion\": \"aliqua Lorem\",\n  \"osInfo\": \"id occaecat minim Duis\",\n  \"jvmInfo\": \"\",\n  \"dnsEntryPointUris\": [\n   \"https://XIbAlEZKrgfxDdscgDuwJmy.kcM2hEztllJfd,5wPkz.NHRdhM6\",\n   \"https://edbCzfMGmrtjzxZTYbCHqykFdm.btvnjzpBGB-0-BGH+gRh3,8Z-wsYVk,oFQ5yFAuwc+OhqxcLi+4..1D1NSqHsnQGCXivVdVrNl-dOVfIEHpDh\"\n  ],\n  \"restServiceRootUris\": [\n   \"https://gJrmyMiMVzoE.lrri1yieptIqtgvHJ9nRTfP,U-k2eXFBJrVzOlE6WUIHYz9wzJ0UpFj4C6Y1wsnuSYCRUxlYL9mRBy\",\n   \"https://qSXJWkEYSEoMTwyvIPPkX.hexhmBgrVDA48\"\n  ],\n  \"communicationUris\": [\n   \"https://iFNMlIQA.cvvgue6ElIc,XhOipngw9T8msHe1V5TyJI5AgArar2lCqm7jG8+snkkBn9YS+jBoyqBwv3c79\",\n   \"https://iEHIDmRCccsYMITBfknKaH.uookA46K,Jc3EsAlZjifDFoeGG7gBhpwMJzisrUs\"\n  ]\n },\n {\n  \"id\": 97518585,\n  \"clusterMemberAddress\": \"velit do veniam\",\n  \"operationState\": \"qui quis occaecat ex\",\n  \"buildVersion\": \"Ut amet aute est\",\n  \"osInfo\": \"Excepteur sit\",\n  \"jvmInfo\": \"dolore Ut in\",\n  \"dnsEntryPointUris\": [\n   \"https://ZWQePDLqOZoIduFnoqDmkVqByYT.akdplphNBsFi-G.6CrCkknqM\",\n   \"https://jXOnBEcBUMGqmmliwfFid.mshX5jBFVh2dDXkSZaLX4o2IcArZtKxgR\"\n  ],\n  \"restServiceRootUris\": [\n   \"https://xjRwroeepJmkIFNUhHZIJQQeS.qyRN,0Oom7HOTIouj4jqVOG\",\n   \"https://kziBWowW.pytwzhn\"\n  ],\n  \"communicationUris\": [\n   \"http://dSsRjLxvmwztMuYtwRwnHorxrWMn.oiiQF3c\",\n   \"https://TJui.vzRlY\"\n  ]\n }\n]"
						}
					]
				}
			]
		},
		{
			"name": "multi Dc",
			"item": [
				{
					"name": "migration",
					"item": [
						{
							"name": "cluster State",
							"item": [
								{
									"name": "{sub Step}",
									"item": [
										{
											"name": "Get sub step of migration from single to multi datacenter cluster | maturity=EARLY_ADOPTER",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/clusterState/:subStep",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"clusterState",
														":subStep"
													],
													"variable": [
														{
															"key": "subStep",
															"value": "SERVER_RECONFIGURATION",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Successful",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/multiDc/migration/clusterState/:subStep",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"multiDc",
																"migration",
																"clusterState",
																":subStep"
															],
															"variable": [
																{
																	"key": "subStep"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"FAILED\",\n \"startedAt\": -46962183,\n \"finishedAt\": -49332272,\n \"details\": \"dolor pariatur commodo enim\"\n}"
												}
											]
										},
										{
											"name": "Modify sub step of migration from single to multi datacenter cluster | maturity=EARLY_ADOPTER",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/clusterState/:subStep?status=SUCCEEDED&details=id Ut esse officia consectetur",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"clusterState",
														":subStep"
													],
													"query": [
														{
															"key": "status",
															"value": "SUCCEEDED"
														},
														{
															"key": "details",
															"value": "id Ut esse officia consectetur"
														}
													],
													"variable": [
														{
															"key": "subStep",
															"value": "SERVER_RECONFIGURATION",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "No Content",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/multiDc/migration/clusterState/:subStep?status=SUCCEEDED&details=id Ut esse officia consectetur",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"multiDc",
																"migration",
																"clusterState",
																":subStep"
															],
															"query": [
																{
																	"key": "status",
																	"value": "SUCCEEDED"
																},
																{
																	"key": "details",
																	"value": "id Ut esse officia consectetur"
																}
															],
															"variable": [
																{
																	"key": "subStep"
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Get cluster state of migration from single to multi datacenter cluster and its sub steps | maturity=EARLY_ADOPTER",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/multiDc/migration/clusterState",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"multiDc",
												"migration",
												"clusterState"
											]
										}
									},
									"response": [
										{
											"name": "Successful",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/clusterState",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"clusterState"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"singleToMultiDcMigration\": {\n  \"status\": \"IN_PROGRESS\",\n  \"startedAt\": -17874197,\n  \"finishedAt\": -32638592,\n  \"details\": \"sit\"\n },\n \"migrationSteps\": {}\n}"
										}
									]
								},
								{
									"name": "Modify the overall cluster state of migration from single to multi datacenter cluster | maturity=EARLY_ADOPTER",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/multiDc/migration/clusterState?status=SUCCEEDED&details=",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"multiDc",
												"migration",
												"clusterState"
											],
											"query": [
												{
													"key": "status",
													"value": "SUCCEEDED"
												},
												{
													"key": "details",
													"value": ""
												}
											]
										}
									},
									"response": [
										{
											"name": "No Content",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/clusterState?status=SUCCEEDED&details=",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"clusterState"
													],
													"query": [
														{
															"key": "status",
															"value": "SUCCEEDED"
														},
														{
															"key": "details",
															"value": ""
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "cluster Replication Preparation",
							"item": [
								{
									"name": "Get progress status of cluster preparation for a replication | maturity=EARLY_ADOPTER",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/multiDc/migration/clusterReplicationPreparation",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"multiDc",
												"migration",
												"clusterReplicationPreparation"
											]
										}
									},
									"response": [
										{
											"name": "Successful",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/clusterReplicationPreparation",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"clusterReplicationPreparation"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"done\": true,\n \"success\": true,\n \"percentDone\": 72161314.52053797,\n \"errorMessage\": \"ut \"\n}"
										},
										{
											"name": "Your request is still progressed.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/clusterReplicationPreparation",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"clusterReplicationPreparation"
													]
												}
											},
											"status": "Multi-Status (WebDAV) (RFC 4918)",
											"code": 207,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"done\": true,\n \"success\": true,\n \"percentDone\": 72161314.52053797,\n \"errorMessage\": \"ut \"\n}"
										},
										{
											"name": "There is no response for your request id. Please make sure that request id is correct and retry. You may get this error when components are restarting or this request is already removed from cache",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/clusterReplicationPreparation",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"clusterReplicationPreparation"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "There was problem in your request. Please check body or logs for more details.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/clusterReplicationPreparation",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"clusterReplicationPreparation"
													]
												}
											},
											"code": 512,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"done\": true,\n \"success\": true,\n \"percentDone\": 72161314.52053797,\n \"errorMessage\": \"ut \"\n}"
										}
									]
								},
								{
									"name": "Start procedure of cluster preparation for a replication | maturity=EARLY_ADOPTER",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/multiDc/migration/clusterReplicationPreparation",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"multiDc",
												"migration",
												"clusterReplicationPreparation"
											]
										}
									},
									"response": [
										{
											"name": "Successful",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/clusterReplicationPreparation",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"clusterReplicationPreparation"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unexpected problem in server.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/clusterReplicationPreparation",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"clusterReplicationPreparation"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "datacenter Topology",
							"item": [
								{
									"name": "Get cluster topology draft | maturity=EARLY_ADOPTER",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/multiDc/migration/datacenterTopology",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"multiDc",
												"migration",
												"datacenterTopology"
											]
										}
									},
									"response": [
										{
											"name": "Successful",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/datacenterTopology",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"datacenterTopology"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"datacenterTopology\": {},\n \"oldDatacenterName\": \"sint non nost\",\n \"newDatacenterName\": \"ex quis Excepteur sint Duis\"\n}"
										}
									]
								},
								{
									"name": "Create cluster topology draft | maturity=EARLY_ADOPTER",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "*/*"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"newDatacenterName\": \"non nulla ad est\",\n    \"nodesIp\": [\n        \"in fugiat\",\n        \"deserunt est magna\"\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/multiDc/migration/datacenterTopology",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"multiDc",
												"migration",
												"datacenterTopology"
											]
										}
									},
									"response": [
										{
											"name": "Successful",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"newDatacenterName\": \"adipisicing\",\n    \"nodesIp\": [\n        \"ullamco\",\n        \"est Lorem nulla laboris\"\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/datacenterTopology",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"datacenterTopology"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Invalid datacenter migration draft",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"newDatacenterName\": \"adipisicing\",\n    \"nodesIp\": [\n        \"ullamco\",\n        \"est Lorem nulla laboris\"\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/datacenterTopology",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"datacenterTopology"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete cluster topology draft | maturity=EARLY_ADOPTER",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/multiDc/migration/datacenterTopology",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"multiDc",
												"migration",
												"datacenterTopology"
											]
										}
									},
									"response": [
										{
											"name": "Successful",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/datacenterTopology",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"datacenterTopology"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "cluster Nodes/current Dc",
							"item": [
								{
									"name": "Start cluster topology configuration - open firewall ports | maturity=EARLY_ADOPTER",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/multiDc/migration/clusterNodes/currentDc",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"multiDc",
												"migration",
												"clusterNodes",
												"currentDc"
											]
										}
									},
									"response": [
										{
											"name": "Successful",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/clusterNodes/currentDc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"clusterNodes",
														"currentDc"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Request is incorrect please validate your path and arguments.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/clusterNodes/currentDc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"clusterNodes",
														"currentDc"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unexpected problem in server.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/clusterNodes/currentDc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"clusterNodes",
														"currentDc"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "There was problem in your request. Please check body or logs for more details.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/clusterNodes/currentDc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"clusterNodes",
														"currentDc"
													]
												}
											},
											"code": 512,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get topology configuration status | maturity=EARLY_ADOPTER",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/multiDc/migration/clusterNodes/currentDc/:requestId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"multiDc",
												"migration",
												"clusterNodes",
												"currentDc",
												":requestId"
											],
											"variable": [
												{
													"key": "requestId",
													"value": "id Ut esse officia consectetur",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Successful",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/clusterNodes/currentDc/:requestId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"clusterNodes",
														"currentDc",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Your request is still progressed.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/clusterNodes/currentDc/:requestId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"clusterNodes",
														"currentDc",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"status": "Multi-Status (WebDAV) (RFC 4918)",
											"code": 207,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Request is incorrect please validate your path and arguments.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/clusterNodes/currentDc/:requestId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"clusterNodes",
														"currentDc",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "There is no response for your request id. Please make sure that request id is correct and retry. You may get this error when components are restarting or this request is already removed from cache",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/clusterNodes/currentDc/:requestId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"clusterNodes",
														"currentDc",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unexpected problem in server.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/clusterNodes/currentDc/:requestId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"clusterNodes",
														"currentDc",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "There was problem in your request. Please check body or logs for more details.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/clusterNodes/currentDc/:requestId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"clusterNodes",
														"currentDc",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"code": 512,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "cassandra",
							"item": [
								{
									"name": "current Dc",
									"item": [
										{
											"name": "Start cassandra migration in current datacenter | maturity=EARLY_ADOPTER",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/cassandra/currentDc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"cassandra",
														"currentDc"
													]
												}
											},
											"response": [
												{
													"name": "Successful",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/multiDc/migration/cassandra/currentDc",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"multiDc",
																"migration",
																"cassandra",
																"currentDc"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Request is incorrect please validate your path and arguments.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/multiDc/migration/cassandra/currentDc",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"multiDc",
																"migration",
																"cassandra",
																"currentDc"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Unexpected problem in server.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/multiDc/migration/cassandra/currentDc",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"multiDc",
																"migration",
																"cassandra",
																"currentDc"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "There was problem in your request. Please check body or logs for more details.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/multiDc/migration/cassandra/currentDc",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"multiDc",
																"migration",
																"cassandra",
																"currentDc"
															]
														}
													},
													"code": 512,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get cassandra migration status in current datacenter | maturity=EARLY_ADOPTER",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/cassandra/currentDc/:requestId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"cassandra",
														"currentDc",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId",
															"value": "id Ut esse officia consectetur",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Successful",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/multiDc/migration/cassandra/currentDc/:requestId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"multiDc",
																"migration",
																"cassandra",
																"currentDc",
																":requestId"
															],
															"variable": [
																{
																	"key": "requestId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Your request is still progressed.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/multiDc/migration/cassandra/currentDc/:requestId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"multiDc",
																"migration",
																"cassandra",
																"currentDc",
																":requestId"
															],
															"variable": [
																{
																	"key": "requestId"
																}
															]
														}
													},
													"status": "Multi-Status (WebDAV) (RFC 4918)",
													"code": 207,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Request is incorrect please validate your path and arguments.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/multiDc/migration/cassandra/currentDc/:requestId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"multiDc",
																"migration",
																"cassandra",
																"currentDc",
																":requestId"
															],
															"variable": [
																{
																	"key": "requestId"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "There is no response for your request id. Please make sure that request id is correct and retry. You may get this error when components are restarting or this request is already removed from cache",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/multiDc/migration/cassandra/currentDc/:requestId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"multiDc",
																"migration",
																"cassandra",
																"currentDc",
																":requestId"
															],
															"variable": [
																{
																	"key": "requestId"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Unexpected problem in server.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/multiDc/migration/cassandra/currentDc/:requestId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"multiDc",
																"migration",
																"cassandra",
																"currentDc",
																":requestId"
															],
															"variable": [
																{
																	"key": "requestId"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "There was problem in your request. Please check body or logs for more details.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/multiDc/migration/cassandra/currentDc/:requestId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"multiDc",
																"migration",
																"cassandra",
																"currentDc",
																":requestId"
															],
															"variable": [
																{
																	"key": "requestId"
																}
															]
														}
													},
													"code": 512,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "new Dc",
									"item": [
										{
											"name": "Start cassandra migration in new datacenter | maturity=EARLY_ADOPTER",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/cassandra/newDc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"cassandra",
														"newDc"
													]
												}
											},
											"response": [
												{
													"name": "Successful",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/multiDc/migration/cassandra/newDc",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"multiDc",
																"migration",
																"cassandra",
																"newDc"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Request is incorrect please validate your path and arguments.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/multiDc/migration/cassandra/newDc",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"multiDc",
																"migration",
																"cassandra",
																"newDc"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Unexpected problem in server.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/multiDc/migration/cassandra/newDc",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"multiDc",
																"migration",
																"cassandra",
																"newDc"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "There was problem in your request. Please check body or logs for more details.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/multiDc/migration/cassandra/newDc",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"multiDc",
																"migration",
																"cassandra",
																"newDc"
															]
														}
													},
													"code": 512,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get cassandra migration status in new datacenter | maturity=EARLY_ADOPTER",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/cassandra/newDc/:requestId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"cassandra",
														"newDc",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId",
															"value": "id Ut esse officia consectetur",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Successful",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/multiDc/migration/cassandra/newDc/:requestId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"multiDc",
																"migration",
																"cassandra",
																"newDc",
																":requestId"
															],
															"variable": [
																{
																	"key": "requestId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Your request is still progressed.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/multiDc/migration/cassandra/newDc/:requestId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"multiDc",
																"migration",
																"cassandra",
																"newDc",
																":requestId"
															],
															"variable": [
																{
																	"key": "requestId"
																}
															]
														}
													},
													"status": "Multi-Status (WebDAV) (RFC 4918)",
													"code": 207,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Request is incorrect please validate your path and arguments.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/multiDc/migration/cassandra/newDc/:requestId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"multiDc",
																"migration",
																"cassandra",
																"newDc",
																":requestId"
															],
															"variable": [
																{
																	"key": "requestId"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "There is no response for your request id. Please make sure that request id is correct and retry. You may get this error when components are restarting or this request is already removed from cache",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/multiDc/migration/cassandra/newDc/:requestId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"multiDc",
																"migration",
																"cassandra",
																"newDc",
																":requestId"
															],
															"variable": [
																{
																	"key": "requestId"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Unexpected problem in server.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/multiDc/migration/cassandra/newDc/:requestId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"multiDc",
																"migration",
																"cassandra",
																"newDc",
																":requestId"
															],
															"variable": [
																{
																	"key": "requestId"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "There was problem in your request. Please check body or logs for more details.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/multiDc/migration/cassandra/newDc/:requestId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"multiDc",
																"migration",
																"cassandra",
																"newDc",
																":requestId"
															],
															"variable": [
																{
																	"key": "requestId"
																}
															]
														}
													},
													"code": 512,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Verify cassandra rebuild status | maturity=EARLY_ADOPTER",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/multiDc/migration/cassandra/rebuildStatus",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"multiDc",
												"migration",
												"cassandra",
												"rebuildStatus"
											]
										}
									},
									"response": [
										{
											"name": "Successful",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/cassandra/rebuildStatus",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"cassandra",
														"rebuildStatus"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Request is incorrect please validate your path and arguments.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/cassandra/rebuildStatus",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"cassandra",
														"rebuildStatus"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unexpected problem in server.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/cassandra/rebuildStatus",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"cassandra",
														"rebuildStatus"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "There was problem in your request. Please check body or logs for more details.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/cassandra/rebuildStatus",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"cassandra",
														"rebuildStatus"
													]
												}
											},
											"code": 512,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "elasticsearch",
							"item": [
								{
									"name": "Start elasticsearch migration | maturity=EARLY_ADOPTER",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/multiDc/migration/elasticsearch",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"multiDc",
												"migration",
												"elasticsearch"
											]
										}
									},
									"response": [
										{
											"name": "Successful",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/elasticsearch",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"elasticsearch"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Request is incorrect please validate your path and arguments.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/elasticsearch",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"elasticsearch"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unexpected problem in server.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/elasticsearch",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"elasticsearch"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "There was problem in your request. Please check body or logs for more details.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/elasticsearch",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"elasticsearch"
													]
												}
											},
											"code": 512,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get elasticsearch migration status | maturity=EARLY_ADOPTER",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/multiDc/migration/elasticsearch/:requestId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"multiDc",
												"migration",
												"elasticsearch",
												":requestId"
											],
											"variable": [
												{
													"key": "requestId",
													"value": "id Ut esse officia consectetur",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Successful",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/elasticsearch/:requestId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"elasticsearch",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Your request is still progressed.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/elasticsearch/:requestId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"elasticsearch",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"status": "Multi-Status (WebDAV) (RFC 4918)",
											"code": 207,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Request is incorrect please validate your path and arguments.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/elasticsearch/:requestId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"elasticsearch",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "There is no response for your request id. Please make sure that request id is correct and retry. You may get this error when components are restarting or this request is already removed from cache",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/elasticsearch/:requestId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"elasticsearch",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unexpected problem in server.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/elasticsearch/:requestId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"elasticsearch",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "There was problem in your request. Please check body or logs for more details.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/elasticsearch/:requestId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"elasticsearch",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"code": 512,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Verify elasticsearch migration status | maturity=EARLY_ADOPTER",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/multiDc/migration/elasticsearch/indexMigrationStatus",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"multiDc",
												"migration",
												"elasticsearch",
												"indexMigrationStatus"
											]
										}
									},
									"response": [
										{
											"name": "Successful",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/elasticsearch/indexMigrationStatus",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"elasticsearch",
														"indexMigrationStatus"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Request is incorrect please validate your path and arguments.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/elasticsearch/indexMigrationStatus",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"elasticsearch",
														"indexMigrationStatus"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unexpected problem in server.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/elasticsearch/indexMigrationStatus",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"elasticsearch",
														"indexMigrationStatus"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "There was problem in your request. Please check body or logs for more details.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/elasticsearch/indexMigrationStatus",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"elasticsearch",
														"indexMigrationStatus"
													]
												}
											},
											"code": 512,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "server",
							"item": [
								{
									"name": "Start server migration in current datacenter | maturity=EARLY_ADOPTER",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/multiDc/migration/server",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"multiDc",
												"migration",
												"server"
											]
										}
									},
									"response": [
										{
											"name": "Successful",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/server",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"server"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Request is incorrect please validate your path and arguments.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/server",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"server"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unexpected problem in server.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/server",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"server"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "There was problem in your request. Please check body or logs for more details.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/server",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"server"
													]
												}
											},
											"code": 512,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get server migration status | maturity=EARLY_ADOPTER",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/multiDc/migration/server/:requestId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"multiDc",
												"migration",
												"server",
												":requestId"
											],
											"variable": [
												{
													"key": "requestId",
													"value": "id Ut esse officia consectetur",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Successful",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/server/:requestId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"server",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Your request is still progressed.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/server/:requestId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"server",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"status": "Multi-Status (WebDAV) (RFC 4918)",
											"code": 207,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Request is incorrect please validate your path and arguments.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/server/:requestId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"server",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "There is no response for your request id. Please make sure that request id is correct and retry. You may get this error when components are restarting or this request is already removed from cache",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/server/:requestId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"server",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unexpected problem in server.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/server/:requestId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"server",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "There was problem in your request. Please check body or logs for more details.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/migration/server/:requestId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"migration",
														"server",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"code": 512,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get state of in-server config migration (from single to multi datacenter cluster) | maturity=EARLY_ADOPTER",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/multiDc/migration/inServerconfigState",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"multiDc",
										"migration",
										"inServerconfigState"
									]
								}
							},
							"response": [
								{
									"name": "Successful",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/multiDc/migration/inServerconfigState",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"multiDc",
												"migration",
												"inServerconfigState"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"componentMigrationStates\": {}\n}"
								}
							]
						},
						{
							"name": "Get nodekeeper helathcheck | maturity=EARLY_ADOPTER",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/multiDc/migration/nodekeeper/healthCheck",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"multiDc",
										"migration",
										"nodekeeper",
										"healthCheck"
									]
								}
							},
							"response": [
								{
									"name": "Successful",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/multiDc/migration/nodekeeper/healthCheck",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"multiDc",
												"migration",
												"nodekeeper",
												"healthCheck"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Request is incorrect please validate your path and arguments.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/multiDc/migration/nodekeeper/healthCheck",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"multiDc",
												"migration",
												"nodekeeper",
												"healthCheck"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Unexpected problem in server.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/multiDc/migration/nodekeeper/healthCheck",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"multiDc",
												"migration",
												"nodekeeper",
												"healthCheck"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "There was problem in your request. Please check body or logs for more details.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/multiDc/migration/nodekeeper/healthCheck",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"multiDc",
												"migration",
												"nodekeeper",
												"healthCheck"
											]
										}
									},
									"code": 512,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Clean up lost datacenter settings | maturity=EARLY_ADOPTER",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/multiDc/migration/lostDatacenterCleanUp",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"multiDc",
										"migration",
										"lostDatacenterCleanUp"
									]
								}
							},
							"response": [
								{
									"name": "Successful",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/multiDc/migration/lostDatacenterCleanUp",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"multiDc",
												"migration",
												"lostDatacenterCleanUp"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Request is incorrect please validate your path and arguments.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/multiDc/migration/lostDatacenterCleanUp",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"multiDc",
												"migration",
												"lostDatacenterCleanUp"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Unexpected problem in server.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/multiDc/migration/lostDatacenterCleanUp",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"multiDc",
												"migration",
												"lostDatacenterCleanUp"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "There was problem in your request. Please check body or logs for more details.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/multiDc/migration/lostDatacenterCleanUp",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"multiDc",
												"migration",
												"lostDatacenterCleanUp"
											]
										}
									},
									"code": 512,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Finish migration | maturity=EARLY_ADOPTER",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/multiDc/migration/finish",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"multiDc",
										"migration",
										"finish"
									]
								}
							},
							"response": [
								{
									"name": "Successful",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/multiDc/migration/finish",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"multiDc",
												"migration",
												"finish"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Request is incorrect please validate your path and arguments.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/multiDc/migration/finish",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"multiDc",
												"migration",
												"finish"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Unexpected problem in server.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/multiDc/migration/finish",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"multiDc",
												"migration",
												"finish"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "There was problem in your request. Please check body or logs for more details.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/multiDc/migration/finish",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"multiDc",
												"migration",
												"finish"
											]
										}
									},
									"code": 512,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "restore",
					"item": [
						{
							"name": "elasticsearch/recover",
							"item": [
								{
									"name": "Get status of disaster recovery. | maturity=EARLY_ADOPTER",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/multiDc/restore/elasticsearch/recover",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"multiDc",
												"restore",
												"elasticsearch",
												"recover"
											]
										}
									},
									"response": [
										{
											"name": "Successful",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/restore/elasticsearch/recover",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"restore",
														"elasticsearch",
														"recover"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Your request is still progressed.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/restore/elasticsearch/recover",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"restore",
														"elasticsearch",
														"recover"
													]
												}
											},
											"status": "Multi-Status (WebDAV) (RFC 4918)",
											"code": 207,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "There is no response for your request id. Please make sure that request id is correct and retry. You may get this error when components are restarting or this request is already removed from cache",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/restore/elasticsearch/recover",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"restore",
														"elasticsearch",
														"recover"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Path not implemented.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/restore/elasticsearch/recover",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"restore",
														"elasticsearch",
														"recover"
													]
												}
											},
											"status": "Not Implemented",
											"code": 501,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Recover elasticsearch from a snapshot on one datacenter. | maturity=EARLY_ADOPTER",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/multiDc/restore/elasticsearch/recover",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"multiDc",
												"restore",
												"elasticsearch",
												"recover"
											]
										}
									},
									"response": [
										{
											"name": "Successful",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/restore/elasticsearch/recover",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"restore",
														"elasticsearch",
														"recover"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Request is incorrect please validate your path and arguments.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/restore/elasticsearch/recover",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"restore",
														"elasticsearch",
														"recover"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Path not implemented.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/restore/elasticsearch/recover",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"restore",
														"elasticsearch",
														"recover"
													]
												}
											},
											"status": "Not Implemented",
											"code": 501,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "server/recovery",
							"item": [
								{
									"name": "Migrate servers and start components after disaster recovery | maturity=EARLY_ADOPTER",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/multiDc/restore/server/recovery",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"multiDc",
												"restore",
												"server",
												"recovery"
											]
										}
									},
									"response": [
										{
											"name": "Successful",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/restore/server/recovery",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"restore",
														"server",
														"recovery"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Request is incorrect please validate your path and arguments.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/restore/server/recovery",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"restore",
														"server",
														"recovery"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unexpected problem in server.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/restore/server/recovery",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"restore",
														"server",
														"recovery"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "There was problem in your request. Please check body or logs for more details.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/restore/server/recovery",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"restore",
														"server",
														"recovery"
													]
												}
											},
											"code": 512,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get status after server migration and start components in disaster recovery | maturity=EARLY_ADOPTER",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/multiDc/restore/server/recovery/:requestId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"multiDc",
												"restore",
												"server",
												"recovery",
												":requestId"
											],
											"variable": [
												{
													"key": "requestId",
													"value": "id Ut esse officia consectetur",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Successful",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/restore/server/recovery/:requestId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"restore",
														"server",
														"recovery",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Your request is still progressed.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/restore/server/recovery/:requestId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"restore",
														"server",
														"recovery",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"status": "Multi-Status (WebDAV) (RFC 4918)",
											"code": 207,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Request is incorrect please validate your path and arguments.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/restore/server/recovery/:requestId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"restore",
														"server",
														"recovery",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "There is no response for your request id. Please make sure that request id is correct and retry. You may get this error when components are restarting or this request is already removed from cache",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/restore/server/recovery/:requestId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"restore",
														"server",
														"recovery",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unexpected problem in server.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/restore/server/recovery/:requestId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"restore",
														"server",
														"recovery",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "There was problem in your request. Please check body or logs for more details.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/multiDc/restore/server/recovery/:requestId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"multiDc",
														"restore",
														"server",
														"recovery",
														":requestId"
													],
													"variable": [
														{
															"key": "requestId"
														}
													]
												}
											},
											"code": 512,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "elastic",
			"item": [
				{
					"name": "ccr/auto Follow Pattern",
					"item": [
						{
							"name": "Creates auto follow pattern for MultiDC environment",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/elastic/ccr/autoFollowPattern",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"elastic",
										"ccr",
										"autoFollowPattern"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/elastic/ccr/autoFollowPattern",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"elastic",
												"ccr",
												"autoFollowPattern"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"reason\": \"sed laborum in\"\n}"
								}
							]
						},
						{
							"name": "Deletes auto follow pattern for MultiDC environment",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/elastic/ccr/autoFollowPattern",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"elastic",
										"ccr",
										"autoFollowPattern"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/elastic/ccr/autoFollowPattern",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"elastic",
												"ccr",
												"autoFollowPattern"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"reason\": \"sed laborum in\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "Checks if it is safe to upgrade elasticsearch ",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/elastic/upgradeStatus?expectedElasticsearchNodes=-1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"elastic",
								"upgradeStatus"
							],
							"query": [
								{
									"key": "expectedElasticsearchNodes",
									"value": "-1"
								}
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/elastic/upgradeStatus?expectedElasticsearchNodes=-1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"elastic",
										"upgradeStatus"
									],
									"query": [
										{
											"key": "expectedElasticsearchNodes",
											"value": "-1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"upgradePossible\": false,\n \"reason\": \"mollit elit Excepteur\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "firewall Management",
			"item": [
				{
					"name": "remove Cluster Node",
					"item": [
						{
							"name": "get Async Node Removal Status",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/firewallManagement/removeClusterNode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"firewallManagement",
										"removeClusterNode"
									]
								}
							},
							"response": [
								{
									"name": "default response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/firewallManagement/removeClusterNode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"firewallManagement",
												"removeClusterNode"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "\"\""
								}
							]
						},
						{
							"name": "Remove cluster node",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ipAddress\": \"ea\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/firewallManagement/removeClusterNode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"firewallManagement",
										"removeClusterNode"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ipAddress\": \"ea\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/firewallManagement/removeClusterNode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"firewallManagement",
												"removeClusterNode"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Removal of node failed",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ipAddress\": \"ea\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/firewallManagement/removeClusterNode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"firewallManagement",
												"removeClusterNode"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "remove Cluster Nodes Delete Method",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/firewallManagement/removeClusterNode/:ip?scope=id Ut esse officia consectetur&asyncCrossNodeCommunication=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"firewallManagement",
										"removeClusterNode",
										":ip"
									],
									"query": [
										{
											"key": "scope",
											"value": "id Ut esse officia consectetur"
										},
										{
											"key": "asyncCrossNodeCommunication",
											"value": "false"
										}
									],
									"variable": [
										{
											"key": "ip",
											"value": "id Ut esse officia consectetur",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "default response",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/firewallManagement/removeClusterNode/:ip?scope=id Ut esse officia consectetur&asyncCrossNodeCommunication=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"firewallManagement",
												"removeClusterNode",
												":ip"
											],
											"query": [
												{
													"key": "scope",
													"value": "id Ut esse officia consectetur"
												},
												{
													"key": "asyncCrossNodeCommunication",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "ip"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "\"\""
								}
							]
						}
					]
				},
				{
					"name": "Add cluster node",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 33627228,\n    \"webUI\": true,\n    \"agent\": false,\n    \"datacenter\": \"magna dolore dolore\",\n    \"kubernetesRole\": \"Lorem proident\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/firewallManagement/addClusterNode",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"firewallManagement",
								"addClusterNode"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 33627228,\n    \"webUI\": true,\n    \"agent\": false,\n    \"datacenter\": \"magna dolore dolore\",\n    \"kubernetesRole\": \"Lorem proident\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/firewallManagement/addClusterNode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"firewallManagement",
										"addClusterNode"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Addition of node failed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 33627228,\n    \"webUI\": true,\n    \"agent\": false,\n    \"datacenter\": \"magna dolore dolore\",\n    \"kubernetesRole\": \"Lorem proident\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/firewallManagement/addClusterNode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"firewallManagement",
										"addClusterNode"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get cluster nodes",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/firewallManagement/clusterNodes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"firewallManagement",
								"clusterNodes"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/firewallManagement/clusterNodes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"firewallManagement",
										"clusterNodes"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"clusterNodes\": [\n  {\n   \"id\": 8775898,\n   \"webUI\": false,\n   \"agent\": true,\n   \"datacenter\": \"laborum Lorem\",\n   \"kubernetesRole\": \"ex consequat dolore\"\n  },\n  {\n   \"id\": 52758324,\n   \"webUI\": false,\n   \"agent\": false,\n   \"datacenter\": \"sunt nisi consequat consectetur\",\n   \"kubernetesRole\": \"sed incididunt aliqua\"\n  }\n ]\n}"
						},
						{
							"name": "Operation failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/firewallManagement/clusterNodes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"firewallManagement",
										"clusterNodes"
									]
								}
							},
							"status": "Not Extended (RFC 2774)",
							"code": 510,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "node Management",
			"item": [
				{
					"name": "cassandra Quorum Override",
					"item": [
						{
							"name": "Get the cassandra read quorum override.",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/nodeManagement/cassandraQuorumOverride",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"nodeManagement",
										"cassandraQuorumOverride"
									]
								},
								"description": "Does not return actual used read quorum if no override is set, in this case UNSET is returned."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodeManagement/cassandraQuorumOverride",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodeManagement",
												"cassandraQuorumOverride"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Override cassandra read quorum at runtime only for this particular server instance",
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/nodeManagement/cassandraQuorumOverride/:quorum",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"nodeManagement",
										"cassandraQuorumOverride",
										":quorum"
									],
									"variable": [
										{
											"key": "quorum",
											"value": "CL_EACH_QUORUM",
											"description": "(Required) "
										}
									]
								},
								"description": "This API allows you to override cassandra read quorum of this particular server instance. Other server instances are not affected.\n\nNote that this will not be persisted, after server restart this override will be lost!\n\nTypically you only need it in multi-datacenter fail-over scenarios. \n\n To reset the overrides call the API with the UNSET value."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodeManagement/cassandraQuorumOverride/:quorum",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodeManagement",
												"cassandraQuorumOverride",
												":quorum"
											],
											"variable": [
												{
													"key": "quorum"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "joining",
					"item": [
						{
							"name": "initialize Node Joining",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/nodeManagement/joining?ip=id Ut esse officia consectetur&timestamp=90045238&datacenter=id Ut esse officia consectetur",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"nodeManagement",
										"joining"
									],
									"query": [
										{
											"key": "ip",
											"value": "id Ut esse officia consectetur"
										},
										{
											"key": "timestamp",
											"value": "90045238"
										},
										{
											"key": "datacenter",
											"value": "id Ut esse officia consectetur"
										}
									]
								}
							},
							"response": [
								{
									"name": "default response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodeManagement/joining?ip=id Ut esse officia consectetur&timestamp=90045238&datacenter=id Ut esse officia consectetur",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodeManagement",
												"joining"
											],
											"query": [
												{
													"key": "ip",
													"value": "id Ut esse officia consectetur"
												},
												{
													"key": "timestamp",
													"value": "90045238"
												},
												{
													"key": "datacenter",
													"value": "id Ut esse officia consectetur"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "\"\""
								}
							]
						},
						{
							"name": "get Node Joining",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/nodeManagement/joining/:requestId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"nodeManagement",
										"joining",
										":requestId"
									],
									"variable": [
										{
											"key": "requestId",
											"value": "id Ut esse officia consectetur",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "default response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodeManagement/joining/:requestId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodeManagement",
												"joining",
												":requestId"
											],
											"variable": [
												{
													"key": "requestId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "\"\""
								}
							]
						}
					]
				},
				{
					"name": "join/check",
					"item": [
						{
							"name": "Initialize verification if a node can be added to the cluster",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/nodeManagement/join/check?ip=id Ut esse officia consectetur&timestamp=90045238&datacenter=id Ut esse officia consectetur",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"nodeManagement",
										"join",
										"check"
									],
									"query": [
										{
											"key": "ip",
											"value": "id Ut esse officia consectetur"
										},
										{
											"key": "timestamp",
											"value": "90045238"
										},
										{
											"key": "datacenter",
											"value": "id Ut esse officia consectetur"
										}
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodeManagement/join/check?ip=id Ut esse officia consectetur&timestamp=90045238&datacenter=id Ut esse officia consectetur",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodeManagement",
												"join",
												"check"
											],
											"query": [
												{
													"key": "ip",
													"value": "id Ut esse officia consectetur"
												},
												{
													"key": "timestamp",
													"value": "90045238"
												},
												{
													"key": "datacenter",
													"value": "id Ut esse officia consectetur"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"requestId\": \"officia consectetur minim est do\"\n}"
								}
							]
						},
						{
							"name": "Verification if a node can be added to the cluster status",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/nodeManagement/join/check/:requestId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"nodeManagement",
										"join",
										"check",
										":requestId"
									],
									"variable": [
										{
											"key": "requestId",
											"value": "id Ut esse officia consectetur",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodeManagement/join/check/:requestId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodeManagement",
												"join",
												"check",
												":requestId"
											],
											"variable": [
												{
													"key": "requestId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"nodeJoiningPreCheckFinished\": false,\n \"canRunNodeInstallation\": true,\n \"details\": \"reprehenderit ea\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "try Lock Removal",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/nodeManagement/tryLockRemoval?id=90045238&ip=id Ut esse officia consectetur&requestedOnNode=90045238&requestedByUser=id Ut esse officia consectetur",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nodeManagement",
								"tryLockRemoval"
							],
							"query": [
								{
									"key": "id",
									"value": "90045238"
								},
								{
									"key": "ip",
									"value": "id Ut esse officia consectetur"
								},
								{
									"key": "requestedOnNode",
									"value": "90045238"
								},
								{
									"key": "requestedByUser",
									"value": "id Ut esse officia consectetur"
								}
							]
						}
					},
					"response": [
						{
							"name": "default response",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/nodeManagement/tryLockRemoval?id=90045238&ip=id Ut esse officia consectetur&requestedOnNode=90045238&requestedByUser=id Ut esse officia consectetur",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"nodeManagement",
										"tryLockRemoval"
									],
									"query": [
										{
											"key": "id",
											"value": "90045238"
										},
										{
											"key": "ip",
											"value": "id Ut esse officia consectetur"
										},
										{
											"key": "requestedOnNode",
											"value": "90045238"
										},
										{
											"key": "requestedByUser",
											"value": "id Ut esse officia consectetur"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"\""
						}
					]
				},
				{
					"name": "unlock Removal",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/nodeManagement/unlockRemoval?id=90045238&ip=id Ut esse officia consectetur&removalStopReason=id Ut esse officia consectetur",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nodeManagement",
								"unlockRemoval"
							],
							"query": [
								{
									"key": "id",
									"value": "90045238"
								},
								{
									"key": "ip",
									"value": "id Ut esse officia consectetur"
								},
								{
									"key": "removalStopReason",
									"value": "id Ut esse officia consectetur"
								}
							]
						}
					},
					"response": [
						{
							"name": "default response",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/nodeManagement/unlockRemoval?id=90045238&ip=id Ut esse officia consectetur&removalStopReason=id Ut esse officia consectetur",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"nodeManagement",
										"unlockRemoval"
									],
									"query": [
										{
											"key": "id",
											"value": "90045238"
										},
										{
											"key": "ip",
											"value": "id Ut esse officia consectetur"
										},
										{
											"key": "removalStopReason",
											"value": "id Ut esse officia consectetur"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"\""
						}
					]
				},
				{
					"name": "Get node removal status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/nodeManagement/nodeRemovalStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nodeManagement",
								"nodeRemovalStatus"
							]
						},
						"description": "Responses with status of current node removal (if it's already running) and statuses of historical removals."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/nodeManagement/nodeRemovalStatus",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"nodeManagement",
										"nodeRemovalStatus"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "dead Node Cleaning",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/nodeManagement/deadNodeCleaning?ip=id Ut esse officia consectetur&requestedOnNode=90045238&requestedByUser=id Ut esse officia consectetur",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nodeManagement",
								"deadNodeCleaning"
							],
							"query": [
								{
									"key": "ip",
									"value": "id Ut esse officia consectetur"
								},
								{
									"key": "requestedOnNode",
									"value": "90045238"
								},
								{
									"key": "requestedByUser",
									"value": "id Ut esse officia consectetur"
								}
							]
						}
					},
					"response": [
						{
							"name": "default response",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/nodeManagement/deadNodeCleaning?ip=id Ut esse officia consectetur&requestedOnNode=90045238&requestedByUser=id Ut esse officia consectetur",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"nodeManagement",
										"deadNodeCleaning"
									],
									"query": [
										{
											"key": "ip",
											"value": "id Ut esse officia consectetur"
										},
										{
											"key": "requestedOnNode",
											"value": "90045238"
										},
										{
											"key": "requestedByUser",
											"value": "id Ut esse officia consectetur"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"\""
						}
					]
				},
				{
					"name": "Remove node",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nodeId\": 21779636,\n    \"ipAddress\": \"dolore nisi\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/nodeManagement/triggerRemoveNode",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nodeManagement",
								"triggerRemoveNode"
							]
						}
					},
					"response": [
						{
							"name": "Node removal process started successfully",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nodeId\": 21779636,\n    \"ipAddress\": \"dolore nisi\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/nodeManagement/triggerRemoveNode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"nodeManagement",
										"triggerRemoveNode"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Node not found by id or IP address",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nodeId\": 21779636,\n    \"ipAddress\": \"dolore nisi\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/nodeManagement/triggerRemoveNode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"nodeManagement",
										"triggerRemoveNode"
									]
								}
							},
							"status": "Multi-Status (WebDAV) (RFC 4918)",
							"code": 207,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Node joining operation is in progress",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nodeId\": 21779636,\n    \"ipAddress\": \"dolore nisi\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/nodeManagement/triggerRemoveNode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"nodeManagement",
										"triggerRemoveNode"
									]
								}
							},
							"status": "HTTP Version Not Supported",
							"code": 505,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Node removal operation is in progress",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nodeId\": 21779636,\n    \"ipAddress\": \"dolore nisi\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/nodeManagement/triggerRemoveNode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"nodeManagement",
										"triggerRemoveNode"
									]
								}
							},
							"status": "Variant Also Negotiates (RFC 2295)",
							"code": 506,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Node removal operation timeout",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nodeId\": 21779636,\n    \"ipAddress\": \"dolore nisi\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/nodeManagement/triggerRemoveNode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"nodeManagement",
										"triggerRemoveNode"
									]
								}
							},
							"status": "Insufficient Storage (WebDAV) (RFC 4918)",
							"code": 507,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Offline node removal operation error. Cleaning cluster configuration was not completed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nodeId\": 21779636,\n    \"ipAddress\": \"dolore nisi\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/nodeManagement/triggerRemoveNode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"nodeManagement",
										"triggerRemoveNode"
									]
								}
							},
							"code": 530,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Lock node removal operation error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nodeId\": 21779636,\n    \"ipAddress\": \"dolore nisi\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/nodeManagement/triggerRemoveNode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"nodeManagement",
										"triggerRemoveNode"
									]
								}
							},
							"code": 531,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Trigger node removal process error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nodeId\": 21779636,\n    \"ipAddress\": \"dolore nisi\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/nodeManagement/triggerRemoveNode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"nodeManagement",
										"triggerRemoveNode"
									]
								}
							},
							"code": 532,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Node removal operation is not allowed. Upgrade is in progress.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nodeId\": 21779636,\n    \"ipAddress\": \"dolore nisi\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/nodeManagement/triggerRemoveNode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"nodeManagement",
										"triggerRemoveNode"
									]
								}
							},
							"code": 533,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Node removal operation is not allowed. Cassandra nodes are not in valid state (UN).",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nodeId\": 21779636,\n    \"ipAddress\": \"dolore nisi\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/nodeManagement/triggerRemoveNode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"nodeManagement",
										"triggerRemoveNode"
									]
								}
							},
							"code": 534,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Node removal operation is not allowed. Elasticsearch is sharding data.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nodeId\": 21779636,\n    \"ipAddress\": \"dolore nisi\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/nodeManagement/triggerRemoveNode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"nodeManagement",
										"triggerRemoveNode"
									]
								}
							},
							"code": 535,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Node is not reachable error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nodeId\": 21779636,\n    \"ipAddress\": \"dolore nisi\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/nodeManagement/triggerRemoveNode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"nodeManagement",
										"triggerRemoveNode"
									]
								}
							},
							"code": 536,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "set Installer Status",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"in ut ea\",\n    \"details\": \"aliquip amet dolore\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/nodeManagement/installerStatus?ip=id Ut esse officia consectetur",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nodeManagement",
								"installerStatus"
							],
							"query": [
								{
									"key": "ip",
									"value": "id Ut esse officia consectetur"
								}
							]
						}
					},
					"response": [
						{
							"name": "default response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"in ut ea\",\n    \"details\": \"aliquip amet dolore\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/nodeManagement/installerStatus?ip=id Ut esse officia consectetur",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"nodeManagement",
										"installerStatus"
									],
									"query": [
										{
											"key": "ip",
											"value": "id Ut esse officia consectetur"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"\""
						}
					]
				},
				{
					"name": "try Lock Joining",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/nodeManagement/tryLockJoining?ip=id Ut esse officia consectetur",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nodeManagement",
								"tryLockJoining"
							],
							"query": [
								{
									"key": "ip",
									"value": "id Ut esse officia consectetur"
								}
							]
						}
					},
					"response": [
						{
							"name": "default response",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/nodeManagement/tryLockJoining?ip=id Ut esse officia consectetur",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"nodeManagement",
										"tryLockJoining"
									],
									"query": [
										{
											"key": "ip",
											"value": "id Ut esse officia consectetur"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"\""
						}
					]
				},
				{
					"name": "finalize Joining",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ip\": \"fugiat culpa\",\n    \"result\": \"UNKNOWN\",\n    \"details\": \"sunt et mollit labor\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/nodeManagement/finalizeJoining?ip=id Ut esse officia consectetur&status=IN_PROGRESS&forceUnlock=false",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nodeManagement",
								"finalizeJoining"
							],
							"query": [
								{
									"key": "ip",
									"value": "id Ut esse officia consectetur"
								},
								{
									"key": "status",
									"value": "IN_PROGRESS"
								},
								{
									"key": "forceUnlock",
									"value": "false"
								}
							]
						}
					},
					"response": [
						{
							"name": "default response",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ip\": \"fugiat culpa\",\n    \"result\": \"UNKNOWN\",\n    \"details\": \"sunt et mollit labor\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/nodeManagement/finalizeJoining?ip=id Ut esse officia consectetur&status=IN_PROGRESS&forceUnlock=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"nodeManagement",
										"finalizeJoining"
									],
									"query": [
										{
											"key": "ip",
											"value": "id Ut esse officia consectetur"
										},
										{
											"key": "status",
											"value": "IN_PROGRESS"
										},
										{
											"key": "forceUnlock",
											"value": "false"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"\""
						}
					]
				},
				{
					"name": "Restart node",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/nodeManagement/nodeRestart",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nodeManagement",
								"nodeRestart"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/nodeManagement/nodeRestart",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"nodeManagement",
										"nodeRestart"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Restart failed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/nodeManagement/nodeRestart",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"nodeManagement",
										"nodeRestart"
									]
								}
							},
							"status": "Not Extended (RFC 2774)",
							"code": 510,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get node's server status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/nodeManagement/nodeServerStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nodeManagement",
								"nodeServerStatus"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/nodeManagement/nodeServerStatus",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"nodeManagement",
										"nodeServerStatus"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"STARTUP\""
						}
					]
				},
				{
					"name": "Get product version",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/nodeManagement/productVersion",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nodeManagement",
								"productVersion"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/nodeManagement/productVersion",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"nodeManagement",
										"productVersion"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"productVersion\": \"incididunt sunt tempor fugia\"\n}"
						}
					]
				},
				{
					"name": "get Nodekeeper Product Version",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/nodeManagement/nodekeeperProductVersion",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nodeManagement",
								"nodekeeperProductVersion"
							]
						}
					},
					"response": [
						{
							"name": "default response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/nodeManagement/nodekeeperProductVersion",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"nodeManagement",
										"nodekeeperProductVersion"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"\""
						}
					]
				},
				{
					"name": "Override which nodes can perform internal responsibilities",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"responsibilityNodeIds\": [\n        -55582970,\n        -52366922\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/nodeManagement/responsibilityOverride",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nodeManagement",
								"responsibilityOverride"
							]
						},
						"description": "This API allows you to define which nodes can perform cluster-wide responsibilities, for example metric aging or problem detection, by specifying nodes IDs. \n\nTypically you only need it in multi-datacenter fail-over scenarios. \n\n To reset the overrides call the API with an empty list of node IDs."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"responsibilityNodeIds\": [\n        77983350,\n        54450548\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/nodeManagement/responsibilityOverride",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"nodeManagement",
										"responsibilityOverride"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "preferences",
			"item": [
				{
					"name": "Get Dynatrace Managed specific properties",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/preferences",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"preferences"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/preferences",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"preferences"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"supportSendBilling\": true,\n \"supportSendClusterHealth\": true,\n \"suppressNonBillingRelevantData\": false,\n \"certificateManagementEnabled\": false,\n \"certificateManagementPossible\": true,\n \"supportSendEvents\": false,\n \"supportAllowRemoteAccess\": true,\n \"remoteAccessOnDemandOnly\": false,\n \"communityCreateUser\": true,\n \"communityExternalSearch\": true,\n \"backupEnabled\": false,\n \"ruxitMonitorsRuxit\": true,\n \"telemetrySharing\": false,\n \"helpChatEnabled\": true,\n \"readOnlyRemoteAccessAllowed\": true\n}"
						}
					]
				},
				{
					"name": "Update properties",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"supportSendBilling\": false,\n    \"supportSendClusterHealth\": true,\n    \"suppressNonBillingRelevantData\": false,\n    \"certificateManagementEnabled\": true,\n    \"certificateManagementPossible\": true,\n    \"supportSendEvents\": true,\n    \"supportAllowRemoteAccess\": true,\n    \"remoteAccessOnDemandOnly\": true,\n    \"communityCreateUser\": false,\n    \"communityExternalSearch\": true,\n    \"ruxitMonitorsRuxit\": true,\n    \"telemetrySharing\": true,\n    \"helpChatEnabled\": false,\n    \"readOnlyRemoteAccessAllowed\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/preferences",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"preferences"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"supportSendBilling\": false,\n    \"supportSendClusterHealth\": true,\n    \"suppressNonBillingRelevantData\": false,\n    \"certificateManagementEnabled\": true,\n    \"certificateManagementPossible\": true,\n    \"supportSendEvents\": true,\n    \"supportAllowRemoteAccess\": true,\n    \"remoteAccessOnDemandOnly\": true,\n    \"communityCreateUser\": false,\n    \"communityExternalSearch\": true,\n    \"ruxitMonitorsRuxit\": true,\n    \"telemetrySharing\": true,\n    \"helpChatEnabled\": false,\n    \"readOnlyRemoteAccessAllowed\": true\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/preferences",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"preferences"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"supportSendBilling\": true,\n \"supportSendClusterHealth\": true,\n \"suppressNonBillingRelevantData\": false,\n \"certificateManagementEnabled\": false,\n \"certificateManagementPossible\": true,\n \"supportSendEvents\": false,\n \"supportAllowRemoteAccess\": true,\n \"remoteAccessOnDemandOnly\": false,\n \"communityCreateUser\": true,\n \"communityExternalSearch\": true,\n \"backupEnabled\": false,\n \"ruxitMonitorsRuxit\": true,\n \"telemetrySharing\": false,\n \"helpChatEnabled\": true,\n \"readOnlyRemoteAccessAllowed\": true\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"supportSendBilling\": false,\n    \"supportSendClusterHealth\": true,\n    \"suppressNonBillingRelevantData\": false,\n    \"certificateManagementEnabled\": true,\n    \"certificateManagementPossible\": true,\n    \"supportSendEvents\": true,\n    \"supportAllowRemoteAccess\": true,\n    \"remoteAccessOnDemandOnly\": true,\n    \"communityCreateUser\": false,\n    \"communityExternalSearch\": true,\n    \"ruxitMonitorsRuxit\": true,\n    \"telemetrySharing\": true,\n    \"helpChatEnabled\": false,\n    \"readOnlyRemoteAccessAllowed\": true\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/preferences",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"preferences"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "smtp",
			"item": [
				{
					"name": "Get SMTP configuration",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/smtp",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"smtp"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/smtp",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"smtp"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"hostName\": \"dolore officia nisi nulla\",\n \"port\": 5603563,\n \"userName\": \"minim quis nisi\",\n \"password\": \"aliqua dolore Duis\",\n \"isPasswordConfigured\": true,\n \"connectionSecurity\": \"TLS\",\n \"senderEmailAddress\": \"commodo ipsum velit\",\n \"allowFallbackViaMissionControl\": false,\n \"useSmtpServer\": true\n}"
						}
					]
				},
				{
					"name": "Update SMTP configuration",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"hostName\": \"dolore officia nisi nulla\",\n    \"port\": 5603563,\n    \"userName\": \"minim quis nisi\",\n    \"password\": \"aliqua dolore Duis\",\n    \"isPasswordConfigured\": true,\n    \"connectionSecurity\": \"TLS\",\n    \"senderEmailAddress\": \"commodo ipsum velit\",\n    \"allowFallbackViaMissionControl\": false,\n    \"useSmtpServer\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/smtp",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"smtp"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"hostName\": \"dolore officia nisi nulla\",\n    \"port\": 5603563,\n    \"userName\": \"minim quis nisi\",\n    \"password\": \"aliqua dolore Duis\",\n    \"isPasswordConfigured\": true,\n    \"connectionSecurity\": \"TLS\",\n    \"senderEmailAddress\": \"commodo ipsum velit\",\n    \"allowFallbackViaMissionControl\": false,\n    \"useSmtpServer\": true\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/smtp",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"smtp"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"hostName\": \"dolore officia nisi nulla\",\n \"port\": 5603563,\n \"userName\": \"minim quis nisi\",\n \"password\": \"aliqua dolore Duis\",\n \"isPasswordConfigured\": true,\n \"connectionSecurity\": \"TLS\",\n \"senderEmailAddress\": \"commodo ipsum velit\",\n \"allowFallbackViaMissionControl\": false,\n \"useSmtpServer\": true\n}"
						},
						{
							"name": "Invalid SMTP configuration",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"hostName\": \"dolore officia nisi nulla\",\n    \"port\": 5603563,\n    \"userName\": \"minim quis nisi\",\n    \"password\": \"aliqua dolore Duis\",\n    \"isPasswordConfigured\": true,\n    \"connectionSecurity\": \"TLS\",\n    \"senderEmailAddress\": \"commodo ipsum velit\",\n    \"allowFallbackViaMissionControl\": false,\n    \"useSmtpServer\": true\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/smtp",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"smtp"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "SMTP configuration not accepted",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"hostName\": \"dolore officia nisi nulla\",\n    \"port\": 5603563,\n    \"userName\": \"minim quis nisi\",\n    \"password\": \"aliqua dolore Duis\",\n    \"isPasswordConfigured\": true,\n    \"connectionSecurity\": \"TLS\",\n    \"senderEmailAddress\": \"commodo ipsum velit\",\n    \"allowFallbackViaMissionControl\": false,\n    \"useSmtpServer\": true\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/smtp",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"smtp"
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Send test email",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/smtp/sendTestMessage/:emailAddress",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"smtp",
								"sendTestMessage",
								":emailAddress"
							],
							"variable": [
								{
									"key": "emailAddress",
									"value": "id Ut esse officia consectetur",
									"description": "(Required) "
								}
							]
						},
						"description": "You can send only one test email per minute"
					},
					"response": [
						{
							"name": "Successfully sent",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/smtp/sendTestMessage/:emailAddress",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"smtp",
										"sendTestMessage",
										":emailAddress"
									],
									"variable": [
										{
											"key": "emailAddress"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Incorrect email address",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/smtp/sendTestMessage/:emailAddress",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"smtp",
										"sendTestMessage",
										":emailAddress"
									],
									"variable": [
										{
											"key": "emailAddress"
										}
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Too short a time interval between sending attempts",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/smtp/sendTestMessage/:emailAddress",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"smtp",
										"sendTestMessage",
										":emailAddress"
									],
									"variable": [
										{
											"key": "emailAddress"
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Sending email failed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/smtp/sendTestMessage/:emailAddress",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"smtp",
										"sendTestMessage",
										":emailAddress"
									],
									"variable": [
										{
											"key": "emailAddress"
										}
									]
								}
							},
							"status": "Not Extended (RFC 2774)",
							"code": 510,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "ssl Certificate",
			"item": [
				{
					"name": "store/{entity Type}/{entity Id}",
					"item": [
						{
							"name": "Get certificate-storage status",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/sslCertificate/store/:entityType/:entityId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sslCertificate",
										"store",
										":entityType",
										":entityId"
									],
									"variable": [
										{
											"key": "entityType",
											"value": "SERVER",
											"description": "(Required) entity type, possible values = \"COLLECTOR\" "
										},
										{
											"key": "entityId",
											"value": "90045238",
											"description": "(Required) Node ID, which can be extracted from the URL in 'Node details' view."
										}
									]
								}
							},
							"response": [
								{
									"name": "Successful or in progress",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sslCertificate/store/:entityType/:entityId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"certificateStoreStatus\": \"PUBLIC_KEY_CERTIFICATE_IS_INVALID\",\n \"detailedError\": \"aute\"\n}"
								},
								{
									"name": "Incorrect entity type",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sslCertificate/store/:entityType/:entityId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"certificateStoreStatus\": \"PUBLIC_KEY_CERTIFICATE_IS_INVALID\",\n \"detailedError\": \"aute\"\n}"
								},
								{
									"name": "Status not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sslCertificate/store/:entityType/:entityId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"certificateStoreStatus\": \"PUBLIC_KEY_CERTIFICATE_IS_INVALID\",\n \"detailedError\": \"aute\"\n}"
								},
								{
									"name": "Internal error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sslCertificate/store/:entityType/:entityId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Certificate chain is invalid",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sslCertificate/store/:entityType/:entityId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"code": 522,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"certificateStoreStatus\": \"PUBLIC_KEY_CERTIFICATE_IS_INVALID\",\n \"detailedError\": \"aute\"\n}"
								},
								{
									"name": "Private key does not match public key certificate",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sslCertificate/store/:entityType/:entityId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"code": 523,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"certificateStoreStatus\": \"PUBLIC_KEY_CERTIFICATE_IS_INVALID\",\n \"detailedError\": \"aute\"\n}"
								},
								{
									"name": "Public key certificate is invalid",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sslCertificate/store/:entityType/:entityId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"code": 525,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"certificateStoreStatus\": \"PUBLIC_KEY_CERTIFICATE_IS_INVALID\",\n \"detailedError\": \"aute\"\n}"
								},
								{
									"name": "Private key is invalid",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sslCertificate/store/:entityType/:entityId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"code": 526,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"certificateStoreStatus\": \"PUBLIC_KEY_CERTIFICATE_IS_INVALID\",\n \"detailedError\": \"aute\"\n}"
								},
								{
									"name": "Error while storing SSL certificate",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sslCertificate/store/:entityType/:entityId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"code": 527,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"certificateStoreStatus\": \"PUBLIC_KEY_CERTIFICATE_IS_INVALID\",\n \"detailedError\": \"aute\"\n}"
								},
								{
									"name": "Certificate has been stored but has not been refreshed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sslCertificate/store/:entityType/:entityId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"code": 528,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"certificateStoreStatus\": \"PUBLIC_KEY_CERTIFICATE_IS_INVALID\",\n \"detailedError\": \"aute\"\n}"
								},
								{
									"name": "Internal error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sslCertificate/store/:entityType/:entityId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"code": 529,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"certificateStoreStatus\": \"PUBLIC_KEY_CERTIFICATE_IS_INVALID\",\n \"detailedError\": \"aute\"\n}"
								}
							]
						},
						{
							"name": "Store SSL certificate status",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"privateKeyEncoded\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEow...aHzMvp\\n-----END RSA PRIVATE KEY-----\",\n    \"publicKeyCertificateEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\",\n    \"certificateChainEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\\n-----BEGIN CERTIFICATE-----\\nMIIDKT...bXTK+M\\n-----END CERTIFICATE-----\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/sslCertificate/store/:entityType/:entityId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sslCertificate",
										"store",
										":entityType",
										":entityId"
									],
									"variable": [
										{
											"key": "entityType",
											"value": "SERVER",
											"description": "(Required) entity type, possible values = \"SERVER, COLLECTOR\" "
										},
										{
											"key": "entityId",
											"value": "90045238",
											"description": "(Required) Node ID, which can be extracted from the URL in 'Node details' view."
										}
									]
								}
							},
							"response": [
								{
									"name": "Successful or in progress",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"privateKeyEncoded\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEow...aHzMvp\\n-----END RSA PRIVATE KEY-----\",\n    \"publicKeyCertificateEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\",\n    \"certificateChainEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\\n-----BEGIN CERTIFICATE-----\\nMIIDKT...bXTK+M\\n-----END CERTIFICATE-----\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sslCertificate/store/:entityType/:entityId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"certificateStoreStatus\": \"PUBLIC_KEY_CERTIFICATE_IS_INVALID\",\n \"detailedError\": \"aute\"\n}"
								},
								{
									"name": "Incorrect entity type",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"privateKeyEncoded\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEow...aHzMvp\\n-----END RSA PRIVATE KEY-----\",\n    \"publicKeyCertificateEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\",\n    \"certificateChainEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\\n-----BEGIN CERTIFICATE-----\\nMIIDKT...bXTK+M\\n-----END CERTIFICATE-----\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sslCertificate/store/:entityType/:entityId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"certificateStoreStatus\": \"PUBLIC_KEY_CERTIFICATE_IS_INVALID\",\n \"detailedError\": \"aute\"\n}"
								},
								{
									"name": "Internal error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"privateKeyEncoded\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEow...aHzMvp\\n-----END RSA PRIVATE KEY-----\",\n    \"publicKeyCertificateEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\",\n    \"certificateChainEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\\n-----BEGIN CERTIFICATE-----\\nMIIDKT...bXTK+M\\n-----END CERTIFICATE-----\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sslCertificate/store/:entityType/:entityId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Certificate chain is invalid",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"privateKeyEncoded\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEow...aHzMvp\\n-----END RSA PRIVATE KEY-----\",\n    \"publicKeyCertificateEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\",\n    \"certificateChainEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\\n-----BEGIN CERTIFICATE-----\\nMIIDKT...bXTK+M\\n-----END CERTIFICATE-----\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sslCertificate/store/:entityType/:entityId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"code": 522,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"certificateStoreStatus\": \"PUBLIC_KEY_CERTIFICATE_IS_INVALID\",\n \"detailedError\": \"aute\"\n}"
								},
								{
									"name": "Private key does not match public key certificate",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"privateKeyEncoded\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEow...aHzMvp\\n-----END RSA PRIVATE KEY-----\",\n    \"publicKeyCertificateEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\",\n    \"certificateChainEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\\n-----BEGIN CERTIFICATE-----\\nMIIDKT...bXTK+M\\n-----END CERTIFICATE-----\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sslCertificate/store/:entityType/:entityId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"code": 523,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"certificateStoreStatus\": \"PUBLIC_KEY_CERTIFICATE_IS_INVALID\",\n \"detailedError\": \"aute\"\n}"
								},
								{
									"name": "Public key certificate is invalid",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"privateKeyEncoded\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEow...aHzMvp\\n-----END RSA PRIVATE KEY-----\",\n    \"publicKeyCertificateEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\",\n    \"certificateChainEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\\n-----BEGIN CERTIFICATE-----\\nMIIDKT...bXTK+M\\n-----END CERTIFICATE-----\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sslCertificate/store/:entityType/:entityId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"code": 525,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"certificateStoreStatus\": \"PUBLIC_KEY_CERTIFICATE_IS_INVALID\",\n \"detailedError\": \"aute\"\n}"
								},
								{
									"name": "Private key is invalid",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"privateKeyEncoded\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEow...aHzMvp\\n-----END RSA PRIVATE KEY-----\",\n    \"publicKeyCertificateEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\",\n    \"certificateChainEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\\n-----BEGIN CERTIFICATE-----\\nMIIDKT...bXTK+M\\n-----END CERTIFICATE-----\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sslCertificate/store/:entityType/:entityId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"code": 526,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"certificateStoreStatus\": \"PUBLIC_KEY_CERTIFICATE_IS_INVALID\",\n \"detailedError\": \"aute\"\n}"
								},
								{
									"name": "Error while storing SSL certificate",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"privateKeyEncoded\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEow...aHzMvp\\n-----END RSA PRIVATE KEY-----\",\n    \"publicKeyCertificateEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\",\n    \"certificateChainEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\\n-----BEGIN CERTIFICATE-----\\nMIIDKT...bXTK+M\\n-----END CERTIFICATE-----\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sslCertificate/store/:entityType/:entityId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"code": 527,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"certificateStoreStatus\": \"PUBLIC_KEY_CERTIFICATE_IS_INVALID\",\n \"detailedError\": \"aute\"\n}"
								},
								{
									"name": "Certificate has been stored but has not been refreshed",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"privateKeyEncoded\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEow...aHzMvp\\n-----END RSA PRIVATE KEY-----\",\n    \"publicKeyCertificateEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\",\n    \"certificateChainEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\\n-----BEGIN CERTIFICATE-----\\nMIIDKT...bXTK+M\\n-----END CERTIFICATE-----\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sslCertificate/store/:entityType/:entityId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"code": 528,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"certificateStoreStatus\": \"PUBLIC_KEY_CERTIFICATE_IS_INVALID\",\n \"detailedError\": \"aute\"\n}"
								},
								{
									"name": "Internal error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"privateKeyEncoded\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEow...aHzMvp\\n-----END RSA PRIVATE KEY-----\",\n    \"publicKeyCertificateEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\",\n    \"certificateChainEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\\n-----BEGIN CERTIFICATE-----\\nMIIDKT...bXTK+M\\n-----END CERTIFICATE-----\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sslCertificate/store/:entityType/:entityId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sslCertificate",
												"store",
												":entityType",
												":entityId"
											],
											"variable": [
												{
													"key": "entityType"
												},
												{
													"key": "entityId"
												}
											]
										}
									},
									"code": 529,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"certificateStoreStatus\": \"PUBLIC_KEY_CERTIFICATE_IS_INVALID\",\n \"detailedError\": \"aute\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "SSL certificate details.",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/sslCertificate/:entityType/:entityId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sslCertificate",
								":entityType",
								":entityId"
							],
							"variable": [
								{
									"key": "entityType",
									"value": "SERVER",
									"description": "(Required) entity type, possible values = \"SERVER, COLLECTOR\" "
								},
								{
									"key": "entityId",
									"value": "90045238",
									"description": "(Required) Node ID, which can be extracted from the URL in 'Node details' view."
								}
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/sslCertificate/:entityType/:entityId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sslCertificate",
										":entityType",
										":entityId"
									],
									"variable": [
										{
											"key": "entityType"
										},
										{
											"key": "entityId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"customKeyStore\": false,\n \"inProgress\": false,\n \"expirationDate\": \"1964-09-13T09:56:01.813Z\",\n \"restartRequired\": false,\n \"customKeyStoreWritable\": true,\n \"issuer\": \"deserun\",\n \"subject\": \"non nulla\",\n \"default\": false\n}"
						},
						{
							"name": "Internal server error.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/sslCertificate/:entityType/:entityId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sslCertificate",
										":entityType",
										":entityId"
									],
									"variable": [
										{
											"key": "entityType"
										},
										{
											"key": "entityId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "sso/saml/sp/cert",
			"item": [
				{
					"name": "Get SAML SP X.509 certificate details",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/sso/saml/sp/cert",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sso",
								"saml",
								"sp",
								"cert"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/sso/saml/sp/cert",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sso",
										"saml",
										"sp",
										"cert"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"issuer\": \"dolor anim\",\n \"subject\": \"laborum cillum elit nulla\",\n \"expirationTimestamp\": -4882969,\n \"expirationDate\": \"velit\"\n}"
						},
						{
							"name": "Internal server error.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/sso/saml/sp/cert",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sso",
										"saml",
										"sp",
										"cert"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Update SAML SP X.509 certificate",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"privateKeyEncoded\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEow...aHzMvp\\n-----END RSA PRIVATE KEY-----\",\n    \"publicKeyCertificateEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/sso/saml/sp/cert",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sso",
								"saml",
								"sp",
								"cert"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"privateKeyEncoded\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEow...aHzMvp\\n-----END RSA PRIVATE KEY-----\",\n    \"publicKeyCertificateEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/sso/saml/sp/cert",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sso",
										"saml",
										"sp",
										"cert"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Failed. The input is invalid.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"privateKeyEncoded\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEow...aHzMvp\\n-----END RSA PRIVATE KEY-----\",\n    \"publicKeyCertificateEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/sso/saml/sp/cert",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sso",
										"saml",
										"sp",
										"cert"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"error\": {\n  \"constraintViolations\": [\n   {\n    \"parameterLocation\": \"QUERY\",\n    \"location\": \"et incididunt cillum\",\n    \"message\": \"laborum Duis aute labore\",\n    \"path\": \"est Duis sint\"\n   },\n   {\n    \"parameterLocation\": \"QUERY\",\n    \"location\": \"eu \",\n    \"message\": \"laboris no\",\n    \"path\": \"quis esse sit\"\n   }\n  ],\n  \"message\": \"pariatur proident occaecat\",\n  \"code\": -96482182\n }\n}"
						},
						{
							"name": "Operation failed. Check server logs for more details.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"privateKeyEncoded\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEow...aHzMvp\\n-----END RSA PRIVATE KEY-----\",\n    \"publicKeyCertificateEncoded\": \"-----BEGIN CERTIFICATE-----\\nMIIDKT...XbTK+M\\n-----END CERTIFICATE-----\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/sso/saml/sp/cert",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sso",
										"saml",
										"sp",
										"cert"
									]
								}
							},
							"status": "Not Extended (RFC 2774)",
							"code": 510,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "support Archive",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "Get support upgrade file",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/supportArchive/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"supportArchive",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "90045238",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Ok - download file",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/supportArchive/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"supportArchive",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/zip"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Support archive generation has not completed yet",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/supportArchive/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"supportArchive",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Could not find support archive request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/supportArchive/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"supportArchive",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Support archive was already deleted from disk",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/supportArchive/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"supportArchive",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Cancel support upgrade generation",
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/supportArchive/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"supportArchive",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "90045238",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Ok",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/supportArchive/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"supportArchive",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete existing support archive",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/supportArchive/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"supportArchive",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "90045238",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Ok - deleted successfully",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/supportArchive/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"supportArchive",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Could not find support archive request",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/supportArchive/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"supportArchive",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Support archive generation in progress - please cancel it using /cancel",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/supportArchive/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"supportArchive",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get support upgrade generation status",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/supportArchive/:id/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"supportArchive",
										":id",
										"status"
									],
									"variable": [
										{
											"key": "id",
											"value": "90045238",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Support archive generation state",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/supportArchive/:id/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"supportArchive",
												":id",
												"status"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"downloadState\": \"TRANSFERING\",\n \"report\": {\n  \"parts\": [\n   {\n    \"compressedTotalBytes\": -34576952,\n    \"numberOfFiles\": -93514334,\n    \"uncompressedTotalBytes\": 81794808,\n    \"source\": \"sit fugiat culpa in elit\",\n    \"errors\": [\n     \"dolore Lo\",\n     \"qui do dolore\"\n    ]\n   },\n   {\n    \"compressedTotalBytes\": -16142661,\n    \"numberOfFiles\": -35036380,\n    \"uncompressedTotalBytes\": 27624750,\n    \"source\": \"do tempor\",\n    \"errors\": [\n     \"est ad\",\n     \"velit ipsum labore irure\"\n    ]\n   }\n  ]\n }\n}"
								},
								{
									"name": "Could not find support archive request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/supportArchive/:id/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"supportArchive",
												":id",
												"status"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get support upgrade generation report",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/supportArchive/:id/report",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"supportArchive",
										":id",
										"report"
									],
									"variable": [
										{
											"key": "id",
											"value": "90045238",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Support archive generation report",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/supportArchive/:id/report",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"supportArchive",
												":id",
												"report"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"downloadState\": \"TRANSFERING\",\n \"report\": {\n  \"parts\": [\n   {\n    \"compressedTotalBytes\": -34576952,\n    \"numberOfFiles\": -93514334,\n    \"uncompressedTotalBytes\": 81794808,\n    \"source\": \"sit fugiat culpa in elit\",\n    \"errors\": [\n     \"dolore Lo\",\n     \"qui do dolore\"\n    ]\n   },\n   {\n    \"compressedTotalBytes\": -16142661,\n    \"numberOfFiles\": -35036380,\n    \"uncompressedTotalBytes\": 27624750,\n    \"source\": \"do tempor\",\n    \"errors\": [\n     \"est ad\",\n     \"velit ipsum labore irure\"\n    ]\n   }\n  ]\n }\n}"
								},
								{
									"name": "Support archive generation has not completed yet",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/supportArchive/:id/report",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"supportArchive",
												":id",
												"report"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Could not find support archive request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/supportArchive/:id/report",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"supportArchive",
												":id",
												"report"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Trigger support upgrade generation",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"numberOfDays\": 77828237,\n    \"includeServerData\": false,\n    \"includeActiveGateData\": true,\n    \"includeLogs\": false,\n    \"includeDebugLogs\": false,\n    \"includeAgentRegistryLogs\": false,\n    \"includeLauncherLogs\": true,\n    \"includeMonitoringConfigAuditLogs\": false,\n    \"includeOtherAuditLogs\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/supportArchive",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"supportArchive"
							]
						}
					},
					"response": [
						{
							"name": "Ok - returns support archive id",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"numberOfDays\": 77828237,\n    \"includeServerData\": false,\n    \"includeActiveGateData\": true,\n    \"includeLogs\": false,\n    \"includeDebugLogs\": false,\n    \"includeAgentRegistryLogs\": false,\n    \"includeLauncherLogs\": true,\n    \"includeMonitoringConfigAuditLogs\": false,\n    \"includeOtherAuditLogs\": true\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/supportArchive",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"supportArchive"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "90045238"
						},
						{
							"name": "Could not trigger support archive generation",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"numberOfDays\": 77828237,\n    \"includeServerData\": false,\n    \"includeActiveGateData\": true,\n    \"includeLogs\": false,\n    \"includeDebugLogs\": false,\n    \"includeAgentRegistryLogs\": false,\n    \"includeLauncherLogs\": true,\n    \"includeMonitoringConfigAuditLogs\": false,\n    \"includeOtherAuditLogs\": true\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/supportArchive",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"supportArchive"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "upgrade Management",
			"item": [
				{
					"name": "installation Files",
					"item": [
						{
							"name": "{type}/{version}",
							"item": [
								{
									"name": "Modify update package state. Particular package might be excluded from download or re-downloaded.",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"excludedFromDownload\": false\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/upgradeManagement/installationFiles/:type/:version",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"upgradeManagement",
												"installationFiles",
												":type",
												":version"
											],
											"variable": [
												{
													"key": "type",
													"value": "AGENT",
													"description": "(Required) Installation package type, possible values = \"SERVER, AGENT, JS_AGENT, SG, NGINX\" "
												},
												{
													"key": "version",
													"value": "id Ut esse officia consectetur",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Successfully scheduled. Package should be excluded/re-downloaded soon.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"excludedFromDownload\": false\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/upgradeManagement/installationFiles/:type/:version",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"upgradeManagement",
														"installationFiles",
														":type",
														":version"
													],
													"variable": [
														{
															"key": "type"
														},
														{
															"key": "version"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Specified installation package was not found.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"excludedFromDownload\": false\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/upgradeManagement/installationFiles/:type/:version",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"upgradeManagement",
														"installationFiles",
														":type",
														":version"
													],
													"variable": [
														{
															"key": "type"
														},
														{
															"key": "version"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Operation is not allowed. See response message for more details.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"excludedFromDownload\": false\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/upgradeManagement/installationFiles/:type/:version",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"upgradeManagement",
														"installationFiles",
														":type",
														":version"
													],
													"variable": [
														{
															"key": "type"
														},
														{
															"key": "version"
														}
													]
												}
											},
											"status": "Precondition Failed",
											"code": 412,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Operation failed. Check server logs for more details.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"excludedFromDownload\": false\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/upgradeManagement/installationFiles/:type/:version",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"upgradeManagement",
														"installationFiles",
														":type",
														":version"
													],
													"variable": [
														{
															"key": "type"
														},
														{
															"key": "version"
														}
													]
												}
											},
											"status": "Not Extended (RFC 2774)",
											"code": 510,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Trigger removal of installation package",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/upgradeManagement/installationFiles/:type/:version",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"upgradeManagement",
												"installationFiles",
												":type",
												":version"
											],
											"variable": [
												{
													"key": "type",
													"value": "AGENT",
													"description": "(Required) Installation package type, possible values = \"SERVER, AGENT, JS_AGENT, SG, NGINX\" "
												},
												{
													"key": "version",
													"value": "id Ut esse officia consectetur",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Successfully scheduled. Package should be removed from all nodes within a couple of minutes.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/upgradeManagement/installationFiles/:type/:version",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"upgradeManagement",
														"installationFiles",
														":type",
														":version"
													],
													"variable": [
														{
															"key": "type"
														},
														{
															"key": "version"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Specified installation package was not found.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/upgradeManagement/installationFiles/:type/:version",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"upgradeManagement",
														"installationFiles",
														":type",
														":version"
													],
													"variable": [
														{
															"key": "type"
														},
														{
															"key": "version"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Removing installation files is not allowed. Update list is synchronized with Mission Control.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/upgradeManagement/installationFiles/:type/:version",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"upgradeManagement",
														"installationFiles",
														":type",
														":version"
													],
													"variable": [
														{
															"key": "type"
														},
														{
															"key": "version"
														}
													]
												}
											},
											"status": "Precondition Failed",
											"code": 412,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Operation failed. Check server logs for more details.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/upgradeManagement/installationFiles/:type/:version",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"upgradeManagement",
														"installationFiles",
														":type",
														":version"
													],
													"variable": [
														{
															"key": "type"
														},
														{
															"key": "version"
														}
													]
												}
											},
											"status": "Not Extended (RFC 2774)",
											"code": 510,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get list of installation files and their cluster-wide availability information",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/upgradeManagement/installationFiles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"upgradeManagement",
										"installationFiles"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/upgradeManagement/installationFiles",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"upgradeManagement",
												"installationFiles"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"excludedFromDownload\": true,\n  \"deletedFromMCStorage\": true,\n  \"deleteEnabled\": true,\n  \"readyNodeIds\": [\n   -72389402,\n   -47870432\n  ],\n  \"fileSizeInBytes\": 55727765,\n  \"countOfTenantsUsingThisAgentAsStandardVersion\": -74847020,\n  \"version\": \"labore ipsum sed fugiat\",\n  \"type\": \"SERVER\",\n  \"status\": \"PROBLEM\"\n },\n {\n  \"excludedFromDownload\": false,\n  \"deletedFromMCStorage\": false,\n  \"deleteEnabled\": false,\n  \"readyNodeIds\": [\n   -15486599,\n   -85719336\n  ],\n  \"fileSizeInBytes\": -56178081,\n  \"countOfTenantsUsingThisAgentAsStandardVersion\": -62136675,\n  \"version\": \"qui\",\n  \"type\": \"ODIN\",\n  \"status\": \"EXCLUDED\"\n }\n]"
								}
							]
						}
					]
				},
				{
					"name": "Get system precondition check state for the cluster",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/upgradeManagement/clusterUpgradeStartupState",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"upgradeManagement",
								"clusterUpgradeStartupState"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/upgradeManagement/clusterUpgradeStartupState",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"upgradeManagement",
										"clusterUpgradeStartupState"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"state\": \"NODEKEEPER_UPGRADE\",\n \"error\": \"do Lorem in ullamco eu\"\n}"
						}
					]
				},
				{
					"name": "Trigger manual cluster upgrade",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/upgradeManagement/triggerUpgrade",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"upgradeManagement",
								"triggerUpgrade"
							]
						}
					},
					"response": [
						{
							"name": "Started successfully.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/upgradeManagement/triggerUpgrade",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"upgradeManagement",
										"triggerUpgrade"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Triggering of upgrade failed due to missing new version on all nodes.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/upgradeManagement/triggerUpgrade",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"upgradeManagement",
										"triggerUpgrade"
									]
								}
							},
							"status": "Precondition Failed",
							"code": 412,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Could not trigger upgrade. Check logs for details...",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/upgradeManagement/triggerUpgrade",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"upgradeManagement",
										"triggerUpgrade"
									]
								}
							},
							"status": "Not Extended (RFC 2774)",
							"code": 510,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Upgrade suspended by Dynatrace Mission Control. Could not upgrade cluster now.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/upgradeManagement/triggerUpgrade",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"upgradeManagement",
										"triggerUpgrade"
									]
								}
							},
							"code": 553,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "groups",
			"item": [
				{
					"name": "{group Id}",
					"item": [
						{
							"name": "Get group",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/groups/:groupId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups",
										":groupId"
									],
									"variable": [
										{
											"key": "groupId",
											"value": "id Ut esse officia consectetur",
											"description": "(Required) Group ID path parameter. Missing or empty values will return a 'Bad Request'."
										}
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"ut ea\",\n \"isClusterAdminGroup\": true,\n \"name\": \"cupidatat amet\",\n \"hasAccessAccountRole\": false,\n \"hasManageAccountAndViewProductUsageRole\": false,\n \"ldapGroupNames\": [\n  \"aliquip esse sit reprehenderit\",\n  \"culpa\"\n ],\n \"ssoGroupNames\": [\n  \"commodo fugiat dolor\",\n  \"cillum nostrud officia\"\n ],\n \"accessRight\": {}\n}"
								},
								{
									"name": "No ID information received for the request to get a group",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete group",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/groups/:groupId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups",
										":groupId"
									],
									"variable": [
										{
											"key": "groupId",
											"value": "id Ut esse officia consectetur",
											"description": "(Required) Group ID path parameter. Missing or empty values will return a 'Bad Request'."
										}
									]
								}
							},
							"response": [
								{
									"name": "Successfully deleted",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"ut ea\",\n \"isClusterAdminGroup\": true,\n \"name\": \"cupidatat amet\",\n \"hasAccessAccountRole\": false,\n \"hasManageAccountAndViewProductUsageRole\": false,\n \"ldapGroupNames\": [\n  \"aliquip esse sit reprehenderit\",\n  \"culpa\"\n ],\n \"ssoGroupNames\": [\n  \"commodo fugiat dolor\",\n  \"cillum nostrud officia\"\n ],\n \"accessRight\": {}\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "management Zones",
					"item": [
						{
							"name": "Get management zone permissions for all groups",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/groups/managementZones",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups",
										"managementZones"
									]
								},
								"description": "This is a list of management zone specific permissions only. Environment permissions are not taken into account here. Groups with permissions for whole environments can also see all management zones defined in these environments, even if they have no management zone specific permissions and the list returned by this request is empty."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/groups/managementZones",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												"managementZones"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"groupId\": \"in mollit dolor sint id\",\n  \"mzPermissionsPerEnvironment\": [\n   {\n    \"environmentUuid\": \"elit in\",\n    \"mzPermissions\": [\n     {\n      \"mzId\": \"Ut aliqua\",\n      \"permissions\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ]\n     },\n     {\n      \"mzId\": \"sunt sed aliquip\",\n      \"permissions\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ]\n     }\n    ]\n   },\n   {\n    \"environmentUuid\": \"anim\",\n    \"mzPermissions\": [\n     {\n      \"mzId\": \"exercitation occaecat\",\n      \"permissions\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ]\n     },\n     {\n      \"mzId\": \"veniam\",\n      \"permissions\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ]\n     }\n    ]\n   }\n  ]\n },\n {\n  \"groupId\": \"do esse reprehenderit\",\n  \"mzPermissionsPerEnvironment\": [\n   {\n    \"environmentUuid\": \"fugiat occaecat do in\",\n    \"mzPermissions\": [\n     {\n      \"mzId\": \"anim minim\",\n      \"permissions\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ]\n     },\n     {\n      \"mzId\": \"sunt\",\n      \"permissions\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ]\n     }\n    ]\n   },\n   {\n    \"environmentUuid\": \"ni\",\n    \"mzPermissions\": [\n     {\n      \"mzId\": \"qui ut elit voluptate\",\n      \"permissions\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ]\n     },\n     {\n      \"mzId\": \"irure dolor nulla\",\n      \"permissions\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ]\n     }\n    ]\n   }\n  ]\n }\n]"
								}
							]
						},
						{
							"name": "Update management zone permissions for a single group",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"groupId\": \"officia Lorem\",\n    \"mzPermissionsPerEnvironment\": [\n        {\n            \"environmentUuid\": \"irure reprehenderit\",\n            \"mzPermissions\": [\n                {\n                    \"mzId\": \"id\",\n                    \"permissions\": [\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        },\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        }\n                    ]\n                },\n                {\n                    \"mzId\": \"eu tempor Lorem\",\n                    \"permissions\": [\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        },\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            \"environmentUuid\": \"magna cillum\",\n            \"mzPermissions\": [\n                {\n                    \"mzId\": \"ex\",\n                    \"permissions\": [\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        },\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        }\n                    ]\n                },\n                {\n                    \"mzId\": \"aliqua\",\n                    \"permissions\": [\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        },\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/groups/managementZones",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups",
										"managementZones"
									]
								}
							},
							"response": [
								{
									"name": "Successfully updated",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"groupId\": \"officia Lorem\",\n    \"mzPermissionsPerEnvironment\": [\n        {\n            \"environmentUuid\": \"irure reprehenderit\",\n            \"mzPermissions\": [\n                {\n                    \"mzId\": \"id\",\n                    \"permissions\": [\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        },\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        }\n                    ]\n                },\n                {\n                    \"mzId\": \"eu tempor Lorem\",\n                    \"permissions\": [\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        },\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            \"environmentUuid\": \"magna cillum\",\n            \"mzPermissions\": [\n                {\n                    \"mzId\": \"ex\",\n                    \"permissions\": [\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        },\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        }\n                    ]\n                },\n                {\n                    \"mzId\": \"aliqua\",\n                    \"permissions\": [\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        },\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/groups/managementZones",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												"managementZones"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Provided model is incorrect or is missing required elements",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"groupId\": \"officia Lorem\",\n    \"mzPermissionsPerEnvironment\": [\n        {\n            \"environmentUuid\": \"irure reprehenderit\",\n            \"mzPermissions\": [\n                {\n                    \"mzId\": \"id\",\n                    \"permissions\": [\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        },\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        }\n                    ]\n                },\n                {\n                    \"mzId\": \"eu tempor Lorem\",\n                    \"permissions\": [\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        },\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            \"environmentUuid\": \"magna cillum\",\n            \"mzPermissions\": [\n                {\n                    \"mzId\": \"ex\",\n                    \"permissions\": [\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        },\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        }\n                    ]\n                },\n                {\n                    \"mzId\": \"aliqua\",\n                    \"permissions\": [\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        },\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/groups/managementZones",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												"managementZones"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "A group, environment or management zone does not exist",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"groupId\": \"officia Lorem\",\n    \"mzPermissionsPerEnvironment\": [\n        {\n            \"environmentUuid\": \"irure reprehenderit\",\n            \"mzPermissions\": [\n                {\n                    \"mzId\": \"id\",\n                    \"permissions\": [\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        },\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        }\n                    ]\n                },\n                {\n                    \"mzId\": \"eu tempor Lorem\",\n                    \"permissions\": [\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        },\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            \"environmentUuid\": \"magna cillum\",\n            \"mzPermissions\": [\n                {\n                    \"mzId\": \"ex\",\n                    \"permissions\": [\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        },\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        }\n                    ]\n                },\n                {\n                    \"mzId\": \"aliqua\",\n                    \"permissions\": [\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        },\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/groups/managementZones",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												"managementZones"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Operation failed",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"groupId\": \"officia Lorem\",\n    \"mzPermissionsPerEnvironment\": [\n        {\n            \"environmentUuid\": \"irure reprehenderit\",\n            \"mzPermissions\": [\n                {\n                    \"mzId\": \"id\",\n                    \"permissions\": [\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        },\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        }\n                    ]\n                },\n                {\n                    \"mzId\": \"eu tempor Lorem\",\n                    \"permissions\": [\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        },\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            \"environmentUuid\": \"magna cillum\",\n            \"mzPermissions\": [\n                {\n                    \"mzId\": \"ex\",\n                    \"permissions\": [\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        },\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        }\n                    ]\n                },\n                {\n                    \"mzId\": \"aliqua\",\n                    \"permissions\": [\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        },\n                        {\n                            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/groups/managementZones",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												"managementZones"
											]
										}
									},
									"status": "Not Extended (RFC 2774)",
									"code": 510,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get management zone permissions for a given group",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/groups/managementZones/:groupId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups",
										"managementZones",
										":groupId"
									],
									"variable": [
										{
											"key": "groupId",
											"value": "id Ut esse officia consectetur",
											"description": "(Required) Group ID path parameter. Missing or empty values will return a 'Bad Request'."
										}
									]
								},
								"description": "This is a list of management zone specific permissions only. Environment permissions are not taken into account here. Groups with permissions for whole environments can also see all management zones defined in these environments, even if they have no management zone specific permissions and the list returned by this request is empty."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/groups/managementZones/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												"managementZones",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"groupId\": \"officia Lorem\",\n \"mzPermissionsPerEnvironment\": [\n  {\n   \"environmentUuid\": \"irure reprehenderit\",\n   \"mzPermissions\": [\n    {\n     \"mzId\": \"id\",\n     \"permissions\": [\n      {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     ]\n    },\n    {\n     \"mzId\": \"eu tempor Lorem\",\n     \"permissions\": [\n      {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     ]\n    }\n   ]\n  },\n  {\n   \"environmentUuid\": \"magna cillum\",\n   \"mzPermissions\": [\n    {\n     \"mzId\": \"ex\",\n     \"permissions\": [\n      {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     ]\n    },\n    {\n     \"mzId\": \"aliqua\",\n     \"permissions\": [\n      {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n     ]\n    }\n   ]\n  }\n ]\n}"
								},
								{
									"name": "No ID information received for the request to get group MZ permissions",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/groups/managementZones/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												"managementZones",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Group not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/groups/managementZones/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												"managementZones",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Get groups",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"groups"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"id\": \"tempor sunt aute\",\n  \"isClusterAdminGroup\": false,\n  \"name\": \"ut sunt\",\n  \"hasAccessAccountRole\": true,\n  \"hasManageAccountAndViewProductUsageRole\": true,\n  \"ldapGroupNames\": [\n   \"ipsum amet\",\n   \"ex cup\"\n  ],\n  \"ssoGroupNames\": [\n   \"anim dolor do\",\n   \"labore\"\n  ],\n  \"accessRight\": {}\n },\n {\n  \"id\": \"proident et adipisicing\",\n  \"isClusterAdminGroup\": true,\n  \"name\": \"aliquip ex id tempor\",\n  \"hasAccessAccountRole\": false,\n  \"hasManageAccountAndViewProductUsageRole\": true,\n  \"ldapGroupNames\": [\n   \"minim cupidatat sit\",\n   \"quis\"\n  ],\n  \"ssoGroupNames\": [\n   \"in Lorem deserunt\",\n   \"sint laboris ex elit\"\n  ],\n  \"accessRight\": {}\n }\n]"
						}
					]
				},
				{
					"name": "Update group",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"dolor proident laboris\",\n    \"isClusterAdminGroup\": true,\n    \"name\": \"Excepteur velit\",\n    \"hasAccessAccountRole\": false,\n    \"hasManageAccountAndViewProductUsageRole\": true,\n    \"isAccessAccount\": true,\n    \"isManageAccount\": false,\n    \"ldapGroupNames\": [\n        \"est in Excepteur veniam\",\n        \"esse magna tempor\"\n    ],\n    \"ssoGroupNames\": [\n        \"dolore eiusmod\",\n        \"velit incididunt\"\n    ],\n    \"accessRight\": {}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"groups"
							]
						}
					},
					"response": [
						{
							"name": "Successfully updated",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"dolor proident laboris\",\n    \"isClusterAdminGroup\": true,\n    \"name\": \"Excepteur velit\",\n    \"hasAccessAccountRole\": false,\n    \"hasManageAccountAndViewProductUsageRole\": true,\n    \"isAccessAccount\": true,\n    \"isManageAccount\": false,\n    \"ldapGroupNames\": [\n        \"est in Excepteur veniam\",\n        \"esse magna tempor\"\n    ],\n    \"ssoGroupNames\": [\n        \"dolore eiusmod\",\n        \"velit incididunt\"\n    ],\n    \"accessRight\": {}\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"ut ea\",\n \"isClusterAdminGroup\": true,\n \"name\": \"cupidatat amet\",\n \"hasAccessAccountRole\": false,\n \"hasManageAccountAndViewProductUsageRole\": false,\n \"ldapGroupNames\": [\n  \"aliquip esse sit reprehenderit\",\n  \"culpa\"\n ],\n \"ssoGroupNames\": [\n  \"commodo fugiat dolor\",\n  \"cillum nostrud officia\"\n ],\n \"accessRight\": {}\n}"
						},
						{
							"name": "Operation failed. The input is invalid. Possible reasons:\n - No group information received for the request to create a group\n - Group ID is not set\n - Group name cannot be null or empty\n - At least one of the specified environments doesn't exist\n",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"dolor proident laboris\",\n    \"isClusterAdminGroup\": true,\n    \"name\": \"Excepteur velit\",\n    \"hasAccessAccountRole\": false,\n    \"hasManageAccountAndViewProductUsageRole\": true,\n    \"isAccessAccount\": true,\n    \"isManageAccount\": false,\n    \"ldapGroupNames\": [\n        \"est in Excepteur veniam\",\n        \"esse magna tempor\"\n    ],\n    \"ssoGroupNames\": [\n        \"dolore eiusmod\",\n        \"velit incididunt\"\n    ],\n    \"accessRight\": {}\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not acceptable. Group name already exists or group not found",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"dolor proident laboris\",\n    \"isClusterAdminGroup\": true,\n    \"name\": \"Excepteur velit\",\n    \"hasAccessAccountRole\": false,\n    \"hasManageAccountAndViewProductUsageRole\": true,\n    \"isAccessAccount\": true,\n    \"isManageAccount\": false,\n    \"ldapGroupNames\": [\n        \"est in Excepteur veniam\",\n        \"esse magna tempor\"\n    ],\n    \"ssoGroupNames\": [\n        \"dolore eiusmod\",\n        \"velit incididunt\"\n    ],\n    \"accessRight\": {}\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups"
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create group",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"dolor proident laboris\",\n    \"isClusterAdminGroup\": true,\n    \"name\": \"Excepteur velit\",\n    \"hasAccessAccountRole\": false,\n    \"hasManageAccountAndViewProductUsageRole\": true,\n    \"isAccessAccount\": true,\n    \"isManageAccount\": false,\n    \"ldapGroupNames\": [\n        \"est in Excepteur veniam\",\n        \"esse magna tempor\"\n    ],\n    \"ssoGroupNames\": [\n        \"dolore eiusmod\",\n        \"velit incididunt\"\n    ],\n    \"accessRight\": {}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"groups"
							]
						}
					},
					"response": [
						{
							"name": "Successfully updated",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"dolor proident laboris\",\n    \"isClusterAdminGroup\": true,\n    \"name\": \"Excepteur velit\",\n    \"hasAccessAccountRole\": false,\n    \"hasManageAccountAndViewProductUsageRole\": true,\n    \"isAccessAccount\": true,\n    \"isManageAccount\": false,\n    \"ldapGroupNames\": [\n        \"est in Excepteur veniam\",\n        \"esse magna tempor\"\n    ],\n    \"ssoGroupNames\": [\n        \"dolore eiusmod\",\n        \"velit incididunt\"\n    ],\n    \"accessRight\": {}\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"ut ea\",\n \"isClusterAdminGroup\": true,\n \"name\": \"cupidatat amet\",\n \"hasAccessAccountRole\": false,\n \"hasManageAccountAndViewProductUsageRole\": false,\n \"ldapGroupNames\": [\n  \"aliquip esse sit reprehenderit\",\n  \"culpa\"\n ],\n \"ssoGroupNames\": [\n  \"commodo fugiat dolor\",\n  \"cillum nostrud officia\"\n ],\n \"accessRight\": {}\n}"
						},
						{
							"name": "Operation failed. The input is invalid. Possible reasons:\n - No group information received for the request to create a group\n - Group ID cannot be set\n - Group name cannot be null or empty\n - At least one of the specified environments doesn't exist\n",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"dolor proident laboris\",\n    \"isClusterAdminGroup\": true,\n    \"name\": \"Excepteur velit\",\n    \"hasAccessAccountRole\": false,\n    \"hasManageAccountAndViewProductUsageRole\": true,\n    \"isAccessAccount\": true,\n    \"isManageAccount\": false,\n    \"ldapGroupNames\": [\n        \"est in Excepteur veniam\",\n        \"esse magna tempor\"\n    ],\n    \"ssoGroupNames\": [\n        \"dolore eiusmod\",\n        \"velit incididunt\"\n    ],\n    \"accessRight\": {}\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not acceptable. Group already exists",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"dolor proident laboris\",\n    \"isClusterAdminGroup\": true,\n    \"name\": \"Excepteur velit\",\n    \"hasAccessAccountRole\": false,\n    \"hasManageAccountAndViewProductUsageRole\": true,\n    \"isAccessAccount\": true,\n    \"isManageAccount\": false,\n    \"ldapGroupNames\": [\n        \"est in Excepteur veniam\",\n        \"esse magna tempor\"\n    ],\n    \"ssoGroupNames\": [\n        \"dolore eiusmod\",\n        \"velit incididunt\"\n    ],\n    \"accessRight\": {}\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups"
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create groups",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"id\": \"tempor sunt aute\",\n        \"isClusterAdminGroup\": false,\n        \"name\": \"ut sunt\",\n        \"hasAccessAccountRole\": true,\n        \"hasManageAccountAndViewProductUsageRole\": true,\n        \"ldapGroupNames\": [\n            \"ipsum amet\",\n            \"ex cup\"\n        ],\n        \"ssoGroupNames\": [\n            \"anim dolor do\",\n            \"labore\"\n        ],\n        \"accessRight\": {}\n    },\n    {\n        \"id\": \"proident et adipisicing\",\n        \"isClusterAdminGroup\": true,\n        \"name\": \"aliquip ex id tempor\",\n        \"hasAccessAccountRole\": false,\n        \"hasManageAccountAndViewProductUsageRole\": true,\n        \"ldapGroupNames\": [\n            \"minim cupidatat sit\",\n            \"quis\"\n        ],\n        \"ssoGroupNames\": [\n            \"in Lorem deserunt\",\n            \"sint laboris ex elit\"\n        ],\n        \"accessRight\": {}\n    }\n]"
						},
						"url": {
							"raw": "{{baseUrl}}/groups/bulk",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"groups",
								"bulk"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"id\": \"ad eiusmod\",\n        \"isClusterAdminGroup\": false,\n        \"name\": \"voluptate cillum\",\n        \"hasAccessAccountRole\": true,\n        \"hasManageAccountAndViewProductUsageRole\": false,\n        \"ldapGroupNames\": [\n            \"Ut nulla\",\n            \"officia v\"\n        ],\n        \"ssoGroupNames\": [\n            \"dolor\",\n            \"commodo mollit ex est\"\n        ],\n        \"accessRight\": {}\n    },\n    {\n        \"id\": \"in sunt proident\",\n        \"isClusterAdminGroup\": false,\n        \"name\": \"\",\n        \"hasAccessAccountRole\": true,\n        \"hasManageAccountAndViewProductUsageRole\": false,\n        \"ldapGroupNames\": [\n            \"et\",\n            \"in culpa\"\n        ],\n        \"ssoGroupNames\": [\n            \"dolore ex\",\n            \"Duis nisi \"\n        ],\n        \"accessRight\": {}\n    }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/groups/bulk",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups",
										"bulk"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"id\": \"tempor sunt aute\",\n  \"isClusterAdminGroup\": false,\n  \"name\": \"ut sunt\",\n  \"hasAccessAccountRole\": true,\n  \"hasManageAccountAndViewProductUsageRole\": true,\n  \"ldapGroupNames\": [\n   \"ipsum amet\",\n   \"ex cup\"\n  ],\n  \"ssoGroupNames\": [\n   \"anim dolor do\",\n   \"labore\"\n  ],\n  \"accessRight\": {}\n },\n {\n  \"id\": \"proident et adipisicing\",\n  \"isClusterAdminGroup\": true,\n  \"name\": \"aliquip ex id tempor\",\n  \"hasAccessAccountRole\": false,\n  \"hasManageAccountAndViewProductUsageRole\": true,\n  \"ldapGroupNames\": [\n   \"minim cupidatat sit\",\n   \"quis\"\n  ],\n  \"ssoGroupNames\": [\n   \"in Lorem deserunt\",\n   \"sint laboris ex elit\"\n  ],\n  \"accessRight\": {}\n }\n]"
						},
						{
							"name": "No group information received for the create-group request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"id\": \"ad eiusmod\",\n        \"isClusterAdminGroup\": false,\n        \"name\": \"voluptate cillum\",\n        \"hasAccessAccountRole\": true,\n        \"hasManageAccountAndViewProductUsageRole\": false,\n        \"ldapGroupNames\": [\n            \"Ut nulla\",\n            \"officia v\"\n        ],\n        \"ssoGroupNames\": [\n            \"dolor\",\n            \"commodo mollit ex est\"\n        ],\n        \"accessRight\": {}\n    },\n    {\n        \"id\": \"in sunt proident\",\n        \"isClusterAdminGroup\": false,\n        \"name\": \"\",\n        \"hasAccessAccountRole\": true,\n        \"hasManageAccountAndViewProductUsageRole\": false,\n        \"ldapGroupNames\": [\n            \"et\",\n            \"in culpa\"\n        ],\n        \"ssoGroupNames\": [\n            \"dolore ex\",\n            \"Duis nisi \"\n        ],\n        \"accessRight\": {}\n    }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/groups/bulk",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups",
										"bulk"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unacceptable or incomplete request. Some groups were added.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"id\": \"ad eiusmod\",\n        \"isClusterAdminGroup\": false,\n        \"name\": \"voluptate cillum\",\n        \"hasAccessAccountRole\": true,\n        \"hasManageAccountAndViewProductUsageRole\": false,\n        \"ldapGroupNames\": [\n            \"Ut nulla\",\n            \"officia v\"\n        ],\n        \"ssoGroupNames\": [\n            \"dolor\",\n            \"commodo mollit ex est\"\n        ],\n        \"accessRight\": {}\n    },\n    {\n        \"id\": \"in sunt proident\",\n        \"isClusterAdminGroup\": false,\n        \"name\": \"\",\n        \"hasAccessAccountRole\": true,\n        \"hasManageAccountAndViewProductUsageRole\": false,\n        \"ldapGroupNames\": [\n            \"et\",\n            \"in culpa\"\n        ],\n        \"ssoGroupNames\": [\n            \"dolore ex\",\n            \"Duis nisi \"\n        ],\n        \"accessRight\": {}\n    }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/groups/bulk",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups",
										"bulk"
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"id\": \"tempor sunt aute\",\n  \"isClusterAdminGroup\": false,\n  \"name\": \"ut sunt\",\n  \"hasAccessAccountRole\": true,\n  \"hasManageAccountAndViewProductUsageRole\": true,\n  \"ldapGroupNames\": [\n   \"ipsum amet\",\n   \"ex cup\"\n  ],\n  \"ssoGroupNames\": [\n   \"anim dolor do\",\n   \"labore\"\n  ],\n  \"accessRight\": {}\n },\n {\n  \"id\": \"proident et adipisicing\",\n  \"isClusterAdminGroup\": true,\n  \"name\": \"aliquip ex id tempor\",\n  \"hasAccessAccountRole\": false,\n  \"hasManageAccountAndViewProductUsageRole\": true,\n  \"ldapGroupNames\": [\n   \"minim cupidatat sit\",\n   \"quis\"\n  ],\n  \"ssoGroupNames\": [\n   \"in Lorem deserunt\",\n   \"sint laboris ex elit\"\n  ],\n  \"accessRight\": {}\n }\n]"
						}
					]
				}
			]
		},
		{
			"name": "users",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "Get user",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "id Ut esse officia consectetur",
											"description": "(Required) User ID path parameter. Missing or empty values will return a 'Bad Request'"
										}
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"email\": \"elit labore\",\n \"firstName\": \"aliqua velit anim nostrud\",\n \"id\": \"incididunt Ut quis\",\n \"lastName\": \"nulla ad Lo\",\n \"passwordClearText\": \"velit\",\n \"groups\": [\n  \"deserunt \",\n  \"deserunt adipisicing veniam in in\"\n ]\n}"
								},
								{
									"name": "No ID information received for the get-user request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete user",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "id Ut esse officia consectetur",
											"description": "(Required) User ID path parameter. Missing or empty values will return a 'Bad Request'."
										}
									]
								}
							},
							"response": [
								{
									"name": "Successfully deleted",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"email\": \"elit labore\",\n \"firstName\": \"aliqua velit anim nostrud\",\n \"id\": \"incididunt Ut quis\",\n \"lastName\": \"nulla ad Lo\",\n \"passwordClearText\": \"velit\",\n \"groups\": [\n  \"deserunt \",\n  \"deserunt adipisicing veniam in in\"\n ]\n}"
								},
								{
									"name": "Not modified",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Modified",
									"code": 304,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "No ID information received for the delete-user request",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Unacceptable request",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Get users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"email\": \"quis\",\n  \"firstName\": \"sit sed velit\",\n  \"id\": \"minim consequat est quis\",\n  \"lastName\": \"sed voluptate ut et minim\",\n  \"passwordClearText\": \"non consectetur\",\n  \"groups\": [\n   \"velit\",\n   \"minim labore\"\n  ]\n },\n {\n  \"email\": \"sunt officia\",\n  \"firstName\": \"esse anim laboris\",\n  \"id\": \"ea sint in\",\n  \"lastName\": \"occaecat minim sunt\",\n  \"passwordClearText\": \"dolor exercitatio\",\n  \"groups\": [\n   \"laborum fugiat amet\",\n   \"labore cupidatat anim\"\n  ]\n }\n]"
						}
					]
				},
				{
					"name": "Update user",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"elit labore\",\n    \"firstName\": \"aliqua velit anim nostrud\",\n    \"id\": \"incididunt Ut quis\",\n    \"lastName\": \"nulla ad Lo\",\n    \"passwordClearText\": \"velit\",\n    \"groups\": [\n        \"deserunt \",\n        \"deserunt adipisicing veniam in in\"\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": [
						{
							"name": "Successfully updated",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"elit labore\",\n    \"firstName\": \"aliqua velit anim nostrud\",\n    \"id\": \"incididunt Ut quis\",\n    \"lastName\": \"nulla ad Lo\",\n    \"passwordClearText\": \"velit\",\n    \"groups\": [\n        \"deserunt \",\n        \"deserunt adipisicing veniam in in\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"email\": \"elit labore\",\n \"firstName\": \"aliqua velit anim nostrud\",\n \"id\": \"incididunt Ut quis\",\n \"lastName\": \"nulla ad Lo\",\n \"passwordClearText\": \"velit\",\n \"groups\": [\n  \"deserunt \",\n  \"deserunt adipisicing veniam in in\"\n ]\n}"
						},
						{
							"name": "Operation failed. The input is invalid. Possible reasons:\n - all required values (ID, email, first name, last name) must be set\n - invalid user data\n - user email address already assigned\n - user group ID does not exist",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"elit labore\",\n    \"firstName\": \"aliqua velit anim nostrud\",\n    \"id\": \"incididunt Ut quis\",\n    \"lastName\": \"nulla ad Lo\",\n    \"passwordClearText\": \"velit\",\n    \"groups\": [\n        \"deserunt \",\n        \"deserunt adipisicing veniam in in\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Operation forbidden - users and groups are fully managed via LDAP or SSO",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"elit labore\",\n    \"firstName\": \"aliqua velit anim nostrud\",\n    \"id\": \"incididunt Ut quis\",\n    \"lastName\": \"nulla ad Lo\",\n    \"passwordClearText\": \"velit\",\n    \"groups\": [\n        \"deserunt \",\n        \"deserunt adipisicing veniam in in\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not found",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"elit labore\",\n    \"firstName\": \"aliqua velit anim nostrud\",\n    \"id\": \"incididunt Ut quis\",\n    \"lastName\": \"nulla ad Lo\",\n    \"passwordClearText\": \"velit\",\n    \"groups\": [\n        \"deserunt \",\n        \"deserunt adipisicing veniam in in\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unacceptable request",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"elit labore\",\n    \"firstName\": \"aliqua velit anim nostrud\",\n    \"id\": \"incididunt Ut quis\",\n    \"lastName\": \"nulla ad Lo\",\n    \"passwordClearText\": \"velit\",\n    \"groups\": [\n        \"deserunt \",\n        \"deserunt adipisicing veniam in in\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Email address already registered",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"elit labore\",\n    \"firstName\": \"aliqua velit anim nostrud\",\n    \"id\": \"incididunt Ut quis\",\n    \"lastName\": \"nulla ad Lo\",\n    \"passwordClearText\": \"velit\",\n    \"groups\": [\n        \"deserunt \",\n        \"deserunt adipisicing veniam in in\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"code": 524,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create user",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"elit labore\",\n    \"firstName\": \"aliqua velit anim nostrud\",\n    \"id\": \"incididunt Ut quis\",\n    \"lastName\": \"nulla ad Lo\",\n    \"passwordClearText\": \"velit\",\n    \"groups\": [\n        \"deserunt \",\n        \"deserunt adipisicing veniam in in\"\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": [
						{
							"name": "Successfully created",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"elit labore\",\n    \"firstName\": \"aliqua velit anim nostrud\",\n    \"id\": \"incididunt Ut quis\",\n    \"lastName\": \"nulla ad Lo\",\n    \"passwordClearText\": \"velit\",\n    \"groups\": [\n        \"deserunt \",\n        \"deserunt adipisicing veniam in in\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"email\": \"elit labore\",\n \"firstName\": \"aliqua velit anim nostrud\",\n \"id\": \"incididunt Ut quis\",\n \"lastName\": \"nulla ad Lo\",\n \"passwordClearText\": \"velit\",\n \"groups\": [\n  \"deserunt \",\n  \"deserunt adipisicing veniam in in\"\n ]\n}"
						},
						{
							"name": "Operation failed. The input is invalid. Possible reasons:\n - all required values (ID, email, first name, last name) must be set\n - invalid user data\n - user ID already exists\n - user email address already assigned\n - user group ID does not exist",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"elit labore\",\n    \"firstName\": \"aliqua velit anim nostrud\",\n    \"id\": \"incididunt Ut quis\",\n    \"lastName\": \"nulla ad Lo\",\n    \"passwordClearText\": \"velit\",\n    \"groups\": [\n        \"deserunt \",\n        \"deserunt adipisicing veniam in in\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Operation forbidden - users and groups are fully managed via LDAP or SSO",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"elit labore\",\n    \"firstName\": \"aliqua velit anim nostrud\",\n    \"id\": \"incididunt Ut quis\",\n    \"lastName\": \"nulla ad Lo\",\n    \"passwordClearText\": \"velit\",\n    \"groups\": [\n        \"deserunt \",\n        \"deserunt adipisicing veniam in in\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unacceptable request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"elit labore\",\n    \"firstName\": \"aliqua velit anim nostrud\",\n    \"id\": \"incididunt Ut quis\",\n    \"lastName\": \"nulla ad Lo\",\n    \"passwordClearText\": \"velit\",\n    \"groups\": [\n        \"deserunt \",\n        \"deserunt adipisicing veniam in in\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Couldn't create user",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"elit labore\",\n    \"firstName\": \"aliqua velit anim nostrud\",\n    \"id\": \"incididunt Ut quis\",\n    \"lastName\": \"nulla ad Lo\",\n    \"passwordClearText\": \"velit\",\n    \"groups\": [\n        \"deserunt \",\n        \"deserunt adipisicing veniam in in\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"code": 522,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "User already exists",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"elit labore\",\n    \"firstName\": \"aliqua velit anim nostrud\",\n    \"id\": \"incididunt Ut quis\",\n    \"lastName\": \"nulla ad Lo\",\n    \"passwordClearText\": \"velit\",\n    \"groups\": [\n        \"deserunt \",\n        \"deserunt adipisicing veniam in in\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"code": 523,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Email address already registered",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"elit labore\",\n    \"firstName\": \"aliqua velit anim nostrud\",\n    \"id\": \"incididunt Ut quis\",\n    \"lastName\": \"nulla ad Lo\",\n    \"passwordClearText\": \"velit\",\n    \"groups\": [\n        \"deserunt \",\n        \"deserunt adipisicing veniam in in\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"code": 524,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create users",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"email\": \"quis\",\n        \"firstName\": \"sit sed velit\",\n        \"id\": \"minim consequat est quis\",\n        \"lastName\": \"sed voluptate ut et minim\",\n        \"passwordClearText\": \"non consectetur\",\n        \"groups\": [\n            \"velit\",\n            \"minim labore\"\n        ]\n    },\n    {\n        \"email\": \"sunt officia\",\n        \"firstName\": \"esse anim laboris\",\n        \"id\": \"ea sint in\",\n        \"lastName\": \"occaecat minim sunt\",\n        \"passwordClearText\": \"dolor exercitatio\",\n        \"groups\": [\n            \"laborum fugiat amet\",\n            \"labore cupidatat anim\"\n        ]\n    }\n]"
						},
						"url": {
							"raw": "{{baseUrl}}/users/bulk",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"bulk"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"email\": \"aliquip dolor ex esse sed\",\n        \"firstName\": \"dolore ea sit\",\n        \"id\": \"tempor\",\n        \"lastName\": \"sunt reprehenderit enim\",\n        \"passwordClearText\": \"ipsum Ut\",\n        \"groups\": [\n            \"temp\",\n            \"ut mollit deserunt consectetur\"\n        ]\n    },\n    {\n        \"email\": \"occaecat enim adipisicing\",\n        \"firstName\": \"voluptate\",\n        \"id\": \"non eiusmod consectetur voluptate dolore\",\n        \"lastName\": \"ipsum\",\n        \"passwordClearText\": \"proident culpa labore\",\n        \"groups\": [\n            \"consequat\",\n            \"dolor dolor\"\n        ]\n    }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/users/bulk",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"bulk"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"email\": \"quis\",\n  \"firstName\": \"sit sed velit\",\n  \"id\": \"minim consequat est quis\",\n  \"lastName\": \"sed voluptate ut et minim\",\n  \"passwordClearText\": \"non consectetur\",\n  \"groups\": [\n   \"velit\",\n   \"minim labore\"\n  ]\n },\n {\n  \"email\": \"sunt officia\",\n  \"firstName\": \"esse anim laboris\",\n  \"id\": \"ea sint in\",\n  \"lastName\": \"occaecat minim sunt\",\n  \"passwordClearText\": \"dolor exercitatio\",\n  \"groups\": [\n   \"laborum fugiat amet\",\n   \"labore cupidatat anim\"\n  ]\n }\n]"
						},
						{
							"name": "Operation failed. The input is invalid. Possible reasons:\n - no user information received for the create-users request\n - all required values (ID, email, first name, last name) must be set\n - invalid user data\n - input contains duplicated IDs\n - input con",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"email\": \"aliquip dolor ex esse sed\",\n        \"firstName\": \"dolore ea sit\",\n        \"id\": \"tempor\",\n        \"lastName\": \"sunt reprehenderit enim\",\n        \"passwordClearText\": \"ipsum Ut\",\n        \"groups\": [\n            \"temp\",\n            \"ut mollit deserunt consectetur\"\n        ]\n    },\n    {\n        \"email\": \"occaecat enim adipisicing\",\n        \"firstName\": \"voluptate\",\n        \"id\": \"non eiusmod consectetur voluptate dolore\",\n        \"lastName\": \"ipsum\",\n        \"passwordClearText\": \"proident culpa labore\",\n        \"groups\": [\n            \"consequat\",\n            \"dolor dolor\"\n        ]\n    }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/users/bulk",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"bulk"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Operation forbidden - either LDAP or SSO with group assignment integration is turned on",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"email\": \"aliquip dolor ex esse sed\",\n        \"firstName\": \"dolore ea sit\",\n        \"id\": \"tempor\",\n        \"lastName\": \"sunt reprehenderit enim\",\n        \"passwordClearText\": \"ipsum Ut\",\n        \"groups\": [\n            \"temp\",\n            \"ut mollit deserunt consectetur\"\n        ]\n    },\n    {\n        \"email\": \"occaecat enim adipisicing\",\n        \"firstName\": \"voluptate\",\n        \"id\": \"non eiusmod consectetur voluptate dolore\",\n        \"lastName\": \"ipsum\",\n        \"passwordClearText\": \"proident culpa labore\",\n        \"groups\": [\n            \"consequat\",\n            \"dolor dolor\"\n        ]\n    }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/users/bulk",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"bulk"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unacceptable or incomplete request. Some users added",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"email\": \"aliquip dolor ex esse sed\",\n        \"firstName\": \"dolore ea sit\",\n        \"id\": \"tempor\",\n        \"lastName\": \"sunt reprehenderit enim\",\n        \"passwordClearText\": \"ipsum Ut\",\n        \"groups\": [\n            \"temp\",\n            \"ut mollit deserunt consectetur\"\n        ]\n    },\n    {\n        \"email\": \"occaecat enim adipisicing\",\n        \"firstName\": \"voluptate\",\n        \"id\": \"non eiusmod consectetur voluptate dolore\",\n        \"lastName\": \"ipsum\",\n        \"passwordClearText\": \"proident culpa labore\",\n        \"groups\": [\n            \"consequat\",\n            \"dolor dolor\"\n        ]\n    }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/users/bulk",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"bulk"
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"email\": \"quis\",\n  \"firstName\": \"sit sed velit\",\n  \"id\": \"minim consequat est quis\",\n  \"lastName\": \"sed voluptate ut et minim\",\n  \"passwordClearText\": \"non consectetur\",\n  \"groups\": [\n   \"velit\",\n   \"minim labore\"\n  ]\n },\n {\n  \"email\": \"sunt officia\",\n  \"firstName\": \"esse anim laboris\",\n  \"id\": \"ea sint in\",\n  \"lastName\": \"occaecat minim sunt\",\n  \"passwordClearText\": \"dolor exercitatio\",\n  \"groups\": [\n   \"laborum fugiat amet\",\n   \"labore cupidatat anim\"\n  ]\n }\n]"
						}
					]
				}
			]
		},
		{
			"name": "user Repository",
			"item": [
				{
					"name": "authentication Mode",
					"item": [
						{
							"name": "Get authentication mode",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/userRepository/authenticationMode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"userRepository",
										"authenticationMode"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/userRepository/authenticationMode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"userRepository",
												"authenticationMode"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"authenticationProvider\": \"LDAP\",\n \"authorizationProvider\": \"LDAP\",\n \"ssoOnly\": true\n}"
								}
							]
						},
						{
							"name": "Update authentication mode",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"authenticationProvider\": \"LDAP\",\n    \"authorizationProvider\": \"LDAP\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/userRepository/authenticationMode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"userRepository",
										"authenticationMode"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"authenticationProvider\": \"LDAP\",\n    \"authorizationProvider\": \"LDAP\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/userRepository/authenticationMode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"userRepository",
												"authenticationMode"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"authenticationProvider\": \"LDAP\",\n \"authorizationProvider\": \"LDAP\",\n \"ssoOnly\": true\n}"
								},
								{
									"name": "Not Acceptable. LDAP cannot be turned on if \"Import user groups\" from SSO flag is turned on",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"authenticationProvider\": \"LDAP\",\n    \"authorizationProvider\": \"LDAP\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/userRepository/authenticationMode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"userRepository",
												"authenticationMode"
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "ldap",
					"item": [
						{
							"name": "connection Configuration",
							"item": [
								{
									"name": "Get LDAP configuration",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/userRepository/ldap/connectionConfiguration",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"userRepository",
												"ldap",
												"connectionConfiguration"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/userRepository/ldap/connectionConfiguration",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"userRepository",
														"ldap",
														"connectionConfiguration"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"shouldUseSecureConnection\": false,\n \"hostName\": \"ut sed cupidatat ex nisi\",\n \"port\": -67759439,\n \"bindDn\": \"cillum ullamco do\",\n \"bindPassword\": \"dolor aliquip consequat dolore\",\n \"bindPasswordSet\": true,\n \"referralHopLimit\": -90650194\n}"
										}
									]
								},
								{
									"name": "Update LDAP connection",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"shouldUseSecureConnection\": false,\n    \"hostName\": \"ut sed cupidatat ex nisi\",\n    \"port\": -67759439,\n    \"bindDn\": \"cillum ullamco do\",\n    \"bindPassword\": \"dolor aliquip consequat dolore\",\n    \"bindPasswordSet\": true,\n    \"referralHopLimit\": -90650194\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/userRepository/ldap/connectionConfiguration",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"userRepository",
												"ldap",
												"connectionConfiguration"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"shouldUseSecureConnection\": false,\n    \"hostName\": \"ut sed cupidatat ex nisi\",\n    \"port\": -67759439,\n    \"bindDn\": \"cillum ullamco do\",\n    \"bindPassword\": \"dolor aliquip consequat dolore\",\n    \"bindPasswordSet\": true,\n    \"referralHopLimit\": -90650194\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/userRepository/ldap/connectionConfiguration",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"userRepository",
														"ldap",
														"connectionConfiguration"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Not Acceptable",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"shouldUseSecureConnection\": false,\n    \"hostName\": \"ut sed cupidatat ex nisi\",\n    \"port\": -67759439,\n    \"bindDn\": \"cillum ullamco do\",\n    \"bindPassword\": \"dolor aliquip consequat dolore\",\n    \"bindPasswordSet\": true,\n    \"referralHopLimit\": -90650194\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/userRepository/ldap/connectionConfiguration",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"userRepository",
														"ldap",
														"connectionConfiguration"
													]
												}
											},
											"status": "Not Acceptable",
											"code": 406,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "query Groups",
							"item": [
								{
									"name": "Get LDAP group configuration",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/userRepository/ldap/queryGroups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"userRepository",
												"ldap",
												"queryGroups"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/userRepository/ldap/queryGroups",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"userRepository",
														"ldap",
														"queryGroups"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"groupsDn\": \"proident elit\",\n \"groupsFilter\": \"laborum ut id qui\",\n \"groupsIdAttribute\": \"elit amet\",\n \"groupsDisplayNameAttribute\": \"dolor officia quis\",\n \"groupsMemberAttribute\": \"adipisicing sunt\"\n}"
										}
									]
								},
								{
									"name": "Update LDAP groups query configuration",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"groupsDn\": \"proident elit\",\n    \"groupsFilter\": \"laborum ut id qui\",\n    \"groupsIdAttribute\": \"elit amet\",\n    \"groupsDisplayNameAttribute\": \"dolor officia quis\",\n    \"groupsMemberAttribute\": \"adipisicing sunt\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/userRepository/ldap/queryGroups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"userRepository",
												"ldap",
												"queryGroups"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"groupsDn\": \"proident elit\",\n    \"groupsFilter\": \"laborum ut id qui\",\n    \"groupsIdAttribute\": \"elit amet\",\n    \"groupsDisplayNameAttribute\": \"dolor officia quis\",\n    \"groupsMemberAttribute\": \"adipisicing sunt\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/userRepository/ldap/queryGroups",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"userRepository",
														"ldap",
														"queryGroups"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unacceptable request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"groupsDn\": \"proident elit\",\n    \"groupsFilter\": \"laborum ut id qui\",\n    \"groupsIdAttribute\": \"elit amet\",\n    \"groupsDisplayNameAttribute\": \"dolor officia quis\",\n    \"groupsMemberAttribute\": \"adipisicing sunt\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/userRepository/ldap/queryGroups",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"userRepository",
														"ldap",
														"queryGroups"
													]
												}
											},
											"status": "Not Acceptable",
											"code": 406,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "query Users",
							"item": [
								{
									"name": "Get LDAP users query configuration",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/userRepository/ldap/queryUsers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"userRepository",
												"ldap",
												"queryUsers"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/userRepository/ldap/queryUsers",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"userRepository",
														"ldap",
														"queryUsers"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"usersBaseDn\": \"minim dolor ut officia consequat\",\n \"usersAccountNameAttribute\": \"Ut magna reprehenderit\",\n \"usersFirstNameAttribute\": \"reprehenderit labore\",\n \"usersLastNameAttribute\": \"aliquip ea deserunt ex Excepteur\",\n \"usersEmailAttribute\": \"labori\",\n \"usersMembershipAttribute\": \"in Lorem fugiat et\",\n \"usersFilter\": \"nisi ea magna\"\n}"
										}
									]
								},
								{
									"name": "Update LDAP users query configuration",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"usersBaseDn\": \"minim dolor ut officia consequat\",\n    \"usersAccountNameAttribute\": \"Ut magna reprehenderit\",\n    \"usersFirstNameAttribute\": \"reprehenderit labore\",\n    \"usersLastNameAttribute\": \"aliquip ea deserunt ex Excepteur\",\n    \"usersEmailAttribute\": \"labori\",\n    \"usersMembershipAttribute\": \"in Lorem fugiat et\",\n    \"usersFilter\": \"nisi ea magna\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/userRepository/ldap/queryUsers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"userRepository",
												"ldap",
												"queryUsers"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"usersBaseDn\": \"minim dolor ut officia consequat\",\n    \"usersAccountNameAttribute\": \"Ut magna reprehenderit\",\n    \"usersFirstNameAttribute\": \"reprehenderit labore\",\n    \"usersLastNameAttribute\": \"aliquip ea deserunt ex Excepteur\",\n    \"usersEmailAttribute\": \"labori\",\n    \"usersMembershipAttribute\": \"in Lorem fugiat et\",\n    \"usersFilter\": \"nisi ea magna\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/userRepository/ldap/queryUsers",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"userRepository",
														"ldap",
														"queryUsers"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unacceptable request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"usersBaseDn\": \"minim dolor ut officia consequat\",\n    \"usersAccountNameAttribute\": \"Ut magna reprehenderit\",\n    \"usersFirstNameAttribute\": \"reprehenderit labore\",\n    \"usersLastNameAttribute\": \"aliquip ea deserunt ex Excepteur\",\n    \"usersEmailAttribute\": \"labori\",\n    \"usersMembershipAttribute\": \"in Lorem fugiat et\",\n    \"usersFilter\": \"nisi ea magna\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/userRepository/ldap/queryUsers",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"userRepository",
														"ldap",
														"queryUsers"
													]
												}
											},
											"status": "Not Acceptable",
											"code": 406,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "proxy",
			"item": [
				{
					"name": "test",
					"item": [
						{
							"name": "Test Internet connection using given proxy configuration",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"port\": 58342,\n    \"scheme\": \"https\",\n    \"server\": \"uSUF\",\n    \"user\": \"labore cillum nisi minim\",\n    \"password\": \"consequat cupidatat\",\n    \"nonProxyHosts\": [\n        \"Lorem dolor ex dolore non\",\n        \"et reprehenderit magna dolore Excepteur\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/proxy/test",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"proxy",
										"test"
									]
								}
							},
							"response": [
								{
									"name": "Request was processed, check response body for details",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"port\": 22105,\n    \"scheme\": \"http\",\n    \"server\": \"WnHuhbf\",\n    \"user\": \"laborum anim ut magna commodo\",\n    \"password\": \"irure re\",\n    \"nonProxyHosts\": [\n        \"sunt consectetur et cillum\",\n        \"irure dolore occaecat\"\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/proxy/test",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"proxy",
												"test"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"connectionOk\": true,\n \"testExecuted\": true,\n \"testExecutionMessage\": \"esse Duis eiusmod\"\n}"
								}
							]
						},
						{
							"name": "Test Internet connection from specific Data Center using given proxy configuration (Multi Data Center deployment)",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"port\": 22105,\n    \"scheme\": \"http\",\n    \"server\": \"WnHuhbf\",\n    \"user\": \"laborum anim ut magna commodo\",\n    \"password\": \"irure re\",\n    \"nonProxyHosts\": [\n        \"sunt consectetur et cillum\",\n        \"irure dolore occaecat\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/proxy/test/:dc",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"proxy",
										"test",
										":dc"
									],
									"variable": [
										{
											"key": "dc",
											"value": "id Ut esse officia consectetur",
											"description": "(Required) Data Center"
										}
									]
								}
							},
							"response": [
								{
									"name": "Request was processed, check response body for details",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"port\": 22105,\n    \"scheme\": \"http\",\n    \"server\": \"WnHuhbf\",\n    \"user\": \"laborum anim ut magna commodo\",\n    \"password\": \"irure re\",\n    \"nonProxyHosts\": [\n        \"sunt consectetur et cillum\",\n        \"irure dolore occaecat\"\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/proxy/test/:dc",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"proxy",
												"test",
												":dc"
											],
											"variable": [
												{
													"key": "dc"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"connectionOk\": true,\n \"testExecuted\": true,\n \"testExecutionMessage\": \"esse Duis eiusmod\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "configuration",
					"item": [
						{
							"name": "Get cluster proxy configuration",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/proxy/configuration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"proxy",
										"configuration"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/proxy/configuration",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"proxy",
												"configuration"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"scheme\": \"nulla nostrud amet\",\n \"server\": \"eu magna in enim\",\n \"port\": -53412890,\n \"nonProxyHosts\": [\n  \"in commodo occaecat ex\",\n  \"Duis aute dolore\"\n ],\n \"userOrPasswordDefined\": true\n}"
								},
								{
									"name": "Proxy is not configured",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/proxy/configuration",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"proxy",
												"configuration"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Set/update cluster proxy configuration",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"port\": 22105,\n    \"scheme\": \"http\",\n    \"server\": \"WnHuhbf\",\n    \"user\": \"laborum anim ut magna commodo\",\n    \"password\": \"irure re\",\n    \"nonProxyHosts\": [\n        \"sunt consectetur et cillum\",\n        \"irure dolore occaecat\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/proxy/configuration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"proxy",
										"configuration"
									]
								}
							},
							"response": [
								{
									"name": "Successful, new configuration created",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"port\": 22105,\n    \"scheme\": \"http\",\n    \"server\": \"WnHuhbf\",\n    \"user\": \"laborum anim ut magna commodo\",\n    \"password\": \"irure re\",\n    \"nonProxyHosts\": [\n        \"sunt consectetur et cillum\",\n        \"irure dolore occaecat\"\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/proxy/configuration",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"proxy",
												"configuration"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Successful, configuration updated",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"port\": 22105,\n    \"scheme\": \"http\",\n    \"server\": \"WnHuhbf\",\n    \"user\": \"laborum anim ut magna commodo\",\n    \"password\": \"irure re\",\n    \"nonProxyHosts\": [\n        \"sunt consectetur et cillum\",\n        \"irure dolore occaecat\"\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/proxy/configuration",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"proxy",
												"configuration"
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Given proxy configuration is invalid",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"port\": 22105,\n    \"scheme\": \"http\",\n    \"server\": \"WnHuhbf\",\n    \"user\": \"laborum anim ut magna commodo\",\n    \"password\": \"irure re\",\n    \"nonProxyHosts\": [\n        \"sunt consectetur et cillum\",\n        \"irure dolore occaecat\"\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/proxy/configuration",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"proxy",
												"configuration"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Remove cluster proxy configuration",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/proxy/configuration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"proxy",
										"configuration"
									]
								}
							},
							"response": [
								{
									"name": "Successful, previous configuration returned",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/proxy/configuration",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"proxy",
												"configuration"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"scheme\": \"deserunt laboris do m\",\n \"server\": \"pariatur proident\",\n \"port\": -7131642,\n \"nonProxyHosts\": [\n  \"reprehenderit ea quis in adipisicing\",\n  \"deserunt sit ipsum irure pariatur\"\n ],\n \"userOrPasswordDefined\": false\n}"
								},
								{
									"name": "Proxy was not configured",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/proxy/configuration",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"proxy",
												"configuration"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "configurations",
					"item": [
						{
							"name": "{dc}",
							"item": [
								{
									"name": "Get Data Center proxy configuration (Multi Data Center deployment)",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/proxy/configurations/:dc",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"proxy",
												"configurations",
												":dc"
											],
											"variable": [
												{
													"key": "dc",
													"value": "id Ut esse officia consectetur",
													"description": "(Required) Data Center"
												}
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/proxy/configurations/:dc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"proxy",
														"configurations",
														":dc"
													],
													"variable": [
														{
															"key": "dc"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"scheme\": \"deserunt laboris do m\",\n \"server\": \"pariatur proident\",\n \"port\": -7131642,\n \"nonProxyHosts\": [\n  \"reprehenderit ea quis in adipisicing\",\n  \"deserunt sit ipsum irure pariatur\"\n ],\n \"userOrPasswordDefined\": false\n}"
										},
										{
											"name": "Proxy is not configured for given Data Center",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/proxy/configurations/:dc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"proxy",
														"configurations",
														":dc"
													],
													"variable": [
														{
															"key": "dc"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Set/update Data Center proxy configuration (Multi Data Center deployment)",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"port\": 22105,\n    \"scheme\": \"http\",\n    \"server\": \"WnHuhbf\",\n    \"user\": \"laborum anim ut magna commodo\",\n    \"password\": \"irure re\",\n    \"nonProxyHosts\": [\n        \"sunt consectetur et cillum\",\n        \"irure dolore occaecat\"\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/proxy/configurations/:dc",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"proxy",
												"configurations",
												":dc"
											],
											"variable": [
												{
													"key": "dc",
													"value": "id Ut esse officia consectetur",
													"description": "(Required) Data Center"
												}
											]
										}
									},
									"response": [
										{
											"name": "Successful, new configuration created",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"port\": 22105,\n    \"scheme\": \"http\",\n    \"server\": \"WnHuhbf\",\n    \"user\": \"laborum anim ut magna commodo\",\n    \"password\": \"irure re\",\n    \"nonProxyHosts\": [\n        \"sunt consectetur et cillum\",\n        \"irure dolore occaecat\"\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/proxy/configurations/:dc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"proxy",
														"configurations",
														":dc"
													],
													"variable": [
														{
															"key": "dc"
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Successful, configuration updated",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"port\": 22105,\n    \"scheme\": \"http\",\n    \"server\": \"WnHuhbf\",\n    \"user\": \"laborum anim ut magna commodo\",\n    \"password\": \"irure re\",\n    \"nonProxyHosts\": [\n        \"sunt consectetur et cillum\",\n        \"irure dolore occaecat\"\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/proxy/configurations/:dc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"proxy",
														"configurations",
														":dc"
													],
													"variable": [
														{
															"key": "dc"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Given proxy configuration is invalid",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"port\": 22105,\n    \"scheme\": \"http\",\n    \"server\": \"WnHuhbf\",\n    \"user\": \"laborum anim ut magna commodo\",\n    \"password\": \"irure re\",\n    \"nonProxyHosts\": [\n        \"sunt consectetur et cillum\",\n        \"irure dolore occaecat\"\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/proxy/configurations/:dc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"proxy",
														"configurations",
														":dc"
													],
													"variable": [
														{
															"key": "dc"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Remove Data Center proxy configuration (Multi Data Center deployment)",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/proxy/configurations/:dc",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"proxy",
												"configurations",
												":dc"
											],
											"variable": [
												{
													"key": "dc",
													"value": "id Ut esse officia consectetur",
													"description": "(Required) Data Center"
												}
											]
										}
									},
									"response": [
										{
											"name": "Successful, previous configuration returned",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/proxy/configurations/:dc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"proxy",
														"configurations",
														":dc"
													],
													"variable": [
														{
															"key": "dc"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"scheme\": \"deserunt laboris do m\",\n \"server\": \"pariatur proident\",\n \"port\": -7131642,\n \"nonProxyHosts\": [\n  \"reprehenderit ea quis in adipisicing\",\n  \"deserunt sit ipsum irure pariatur\"\n ],\n \"userOrPasswordDefined\": false\n}"
										},
										{
											"name": "Proxy was not configured for given Data Center",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/proxy/configurations/:dc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"proxy",
														"configurations",
														":dc"
													],
													"variable": [
														{
															"key": "dc"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get proxy configurations for all Data Centers (Multi Data Center deployment)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/proxy/configurations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"proxy",
										"configurations"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/proxy/configurations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"proxy",
												"configurations"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"configurations\": {}\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "password Policy",
			"item": [
				{
					"name": "Get default's realm password policy configuration",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/passwordPolicy",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"passwordPolicy"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/passwordPolicy",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"passwordPolicy"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"minNumberOfDigits\": 124,\n \"minNumberOfLowercaseChars\": 43,\n \"minNumberOfNonAlphanumericChars\": 126,\n \"minNumberOfUppercaseChars\": 0,\n \"minPasswordLength\": 16,\n \"realmId\": \"commodo ut\"\n}"
						},
						{
							"name": "Realm not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/passwordPolicy",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"passwordPolicy"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Update password policy configuration",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"minNumberOfDigits\": 124,\n    \"minNumberOfLowercaseChars\": 43,\n    \"minNumberOfNonAlphanumericChars\": 126,\n    \"minNumberOfUppercaseChars\": 0,\n    \"minPasswordLength\": 16,\n    \"realmId\": \"commodo ut\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/passwordPolicy",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"passwordPolicy"
							]
						}
					},
					"response": [
						{
							"name": "Successfully updated. Response doesn't have a body.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"minNumberOfDigits\": 124,\n    \"minNumberOfLowercaseChars\": 43,\n    \"minNumberOfNonAlphanumericChars\": 126,\n    \"minNumberOfUppercaseChars\": 0,\n    \"minPasswordLength\": 16,\n    \"realmId\": \"commodo ut\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/passwordPolicy",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"passwordPolicy"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Failed. The input is invalid.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"minNumberOfDigits\": 124,\n    \"minNumberOfLowercaseChars\": 43,\n    \"minNumberOfNonAlphanumericChars\": 126,\n    \"minNumberOfUppercaseChars\": 0,\n    \"minPasswordLength\": 16,\n    \"realmId\": \"commodo ut\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/passwordPolicy",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"passwordPolicy"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"error\": {\n  \"constraintViolations\": [\n   {\n    \"parameterLocation\": \"QUERY\",\n    \"location\": \"et incididunt cillum\",\n    \"message\": \"laborum Duis aute labore\",\n    \"path\": \"est Duis sint\"\n   },\n   {\n    \"parameterLocation\": \"QUERY\",\n    \"location\": \"eu \",\n    \"message\": \"laboris no\",\n    \"path\": \"quis esse sit\"\n   }\n  ],\n  \"message\": \"pariatur proident occaecat\",\n  \"code\": -96482182\n }\n}"
						},
						{
							"name": "Realm not found",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"minNumberOfDigits\": 124,\n    \"minNumberOfLowercaseChars\": 43,\n    \"minNumberOfNonAlphanumericChars\": 126,\n    \"minNumberOfUppercaseChars\": 0,\n    \"minPasswordLength\": 16,\n    \"realmId\": \"commodo ut\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/passwordPolicy",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"passwordPolicy"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			},
			{
				"key": "value",
				"value": "Api-Token {{DT_TOKEN}}",
				"type": "string"
			},
			{
				"key": "in",
				"value": "header",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://{{DT_HOST}}/api/v1.0/onpremise",
			"type": "string"
		}
	]
}